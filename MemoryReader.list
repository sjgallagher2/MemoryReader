
MemoryReader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f3c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080060d0  080060d0  000160d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         0000015c  20000000  08006144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000898  2000015c  080062a0  0002015c  2**2
                  ALLOC
  5 ._user_heap_stack 00000600  200009f4  080062a0  000209f4  2**0
                  ALLOC
  6 .ARM.attributes 00000033  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
  7 .debug_line   00014b5d  00000000  00000000  0002018f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002468d  00000000  00000000  00034cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005bc5  00000000  00000000  00059379  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000cc8  00000000  00000000  0005ef40  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00082e8c  00000000  00000000  0005fc08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001080  00000000  00000000  000e2a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000020c0  00000000  00000000  000e3b18  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000859d  00000000  00000000  000e5bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001ab03  00000000  00000000  000ee175  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      00000076  00000000  00000000  00108c78  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000194 <Reset_Handler-0x14>:
 8000194:	08006144 	.word	0x08006144
 8000198:	20000000 	.word	0x20000000
 800019c:	2000015c 	.word	0x2000015c
 80001a0:	2000015c 	.word	0x2000015c
 80001a4:	200009f4 	.word	0x200009f4

080001a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80001a8:	f8df d030 	ldr.w	sp, [pc, #48]	; 80001dc <LoopFillZerobss+0x10>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80001ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80001ae:	e003      	b.n	80001b8 <LoopCopyDataInit>

080001b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80001b0:	4b0b      	ldr	r3, [pc, #44]	; (80001e0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80001b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80001b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80001b6:	3104      	adds	r1, #4

080001b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80001b8:	480a      	ldr	r0, [pc, #40]	; (80001e4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80001ba:	4b0b      	ldr	r3, [pc, #44]	; (80001e8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80001bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80001be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80001c0:	d3f6      	bcc.n	80001b0 <CopyDataInit>
  ldr  r2, =_sbss
 80001c2:	4a0a      	ldr	r2, [pc, #40]	; (80001ec <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80001c4:	e002      	b.n	80001cc <LoopFillZerobss>

080001c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80001c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80001c8:	f842 3b04 	str.w	r3, [r2], #4

080001cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80001ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80001d0:	d3f9      	bcc.n	80001c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80001d2:	f001 f9f3 	bl	80015bc <SystemInit>
/* Call static constructors */
/*    bl __libc_init_array */	/* Uncomment this line if there's an _init function with ctor and dtor lists */
/* Call the application's entry point.*/
  bl  main
 80001d6:	f001 f829 	bl	800122c <main>
  bx  lr    
 80001da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80001dc:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80001e0:	08006144 	.word	0x08006144
  ldr  r0, =_sdata
 80001e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80001e8:	2000015c 	.word	0x2000015c
  ldr  r2, =_sbss
 80001ec:	2000015c 	.word	0x2000015c
  ldr  r3, = _ebss
 80001f0:	200009f4 	.word	0x200009f4

080001f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80001f4:	e7fe      	b.n	80001f4 <ADC_IRQHandler>

080001f6 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
  /* USER CODE END 4 */ 
}
 80001f6:	2000      	movs	r0, #0
 80001f8:	4770      	bx	lr

080001fa <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80001fa:	2000      	movs	r0, #0
 80001fc:	4770      	bx	lr
	...

08000200 <CDC_Init_FS>:
{ 
 8000200:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8000202:	4c09      	ldr	r4, [pc, #36]	; (8000228 <CDC_Init_FS+0x28>)
 8000204:	4909      	ldr	r1, [pc, #36]	; (800022c <CDC_Init_FS+0x2c>)
 8000206:	2200      	movs	r2, #0
 8000208:	4620      	mov	r0, r4
 800020a:	f000 fe5f 	bl	8000ecc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800020e:	4908      	ldr	r1, [pc, #32]	; (8000230 <CDC_Init_FS+0x30>)
 8000210:	4620      	mov	r0, r4
 8000212:	f000 fe63 	bl	8000edc <USBD_CDC_SetRxBuffer>
  init_circbuf(circular_buffer_1,UserRxCBufData,RX_CBUF_DATA_SIZE);
 8000216:	4b07      	ldr	r3, [pc, #28]	; (8000234 <CDC_Init_FS+0x34>)
 8000218:	4907      	ldr	r1, [pc, #28]	; (8000238 <CDC_Init_FS+0x38>)
 800021a:	6818      	ldr	r0, [r3, #0]
 800021c:	2210      	movs	r2, #16
 800021e:	f001 f96f 	bl	8001500 <init_circbuf>
}
 8000222:	2000      	movs	r0, #0
 8000224:	bd10      	pop	{r4, pc}
 8000226:	bf00      	nop
 8000228:	20000598 	.word	0x20000598
 800022c:	20000198 	.word	0x20000198
 8000230:	20000178 	.word	0x20000178
 8000234:	20000154 	.word	0x20000154
 8000238:	20000188 	.word	0x20000188

0800023c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 800023c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000240:	460f      	mov	r7, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  if(*Len < circbuf_get_free_space(circular_buffer_1))
 8000242:	4c13      	ldr	r4, [pc, #76]	; (8000290 <CDC_Receive_FS+0x54>)
 8000244:	4e13      	ldr	r6, [pc, #76]	; (8000294 <CDC_Receive_FS+0x58>)
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8000246:	4601      	mov	r1, r0
{
 8000248:	4680      	mov	r8, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800024a:	4813      	ldr	r0, [pc, #76]	; (8000298 <CDC_Receive_FS+0x5c>)
 800024c:	f000 fe46 	bl	8000edc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8000250:	4811      	ldr	r0, [pc, #68]	; (8000298 <CDC_Receive_FS+0x5c>)
 8000252:	f000 fe60 	bl	8000f16 <USBD_CDC_ReceivePacket>
  if(*Len < circbuf_get_free_space(circular_buffer_1))
 8000256:	6820      	ldr	r0, [r4, #0]
 8000258:	683d      	ldr	r5, [r7, #0]
 800025a:	f001 f995 	bl	8001588 <circbuf_get_free_space>
 800025e:	4285      	cmp	r5, r0
 8000260:	4625      	mov	r5, r4
 8000262:	d211      	bcs.n	8000288 <CDC_Receive_FS+0x4c>
  {
    data_overflow = 0;
 8000264:	2400      	movs	r4, #0
 8000266:	7034      	strb	r4, [r6, #0]
    uint8_t cbuf_status = CIRCBUF_STATUS_OK;
    for(uint32_t i = 0; i< *Len; i++)
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	429c      	cmp	r4, r3
 800026c:	d302      	bcc.n	8000274 <CDC_Receive_FS+0x38>

  }
  
  return (USBD_OK);
  /* USER CODE END 6 */ 
}
 800026e:	2000      	movs	r0, #0
 8000270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      cbuf_status = circbuf_push(circular_buffer_1,Buf[i]);
 8000274:	f818 1004 	ldrb.w	r1, [r8, r4]
 8000278:	6828      	ldr	r0, [r5, #0]
 800027a:	f001 f945 	bl	8001508 <circbuf_push>
      if(cbuf_status == CIRCBUF_STATUS_FULL)
 800027e:	2801      	cmp	r0, #1
        data_overflow = 1;
 8000280:	bf08      	it	eq
 8000282:	7030      	strbeq	r0, [r6, #0]
    for(uint32_t i = 0; i< *Len; i++)
 8000284:	3401      	adds	r4, #1
 8000286:	e7ef      	b.n	8000268 <CDC_Receive_FS+0x2c>
    data_overflow = 1;
 8000288:	2301      	movs	r3, #1
 800028a:	7033      	strb	r3, [r6, #0]
 800028c:	e7ef      	b.n	800026e <CDC_Receive_FS+0x32>
 800028e:	bf00      	nop
 8000290:	20000154 	.word	0x20000154
 8000294:	2000015c 	.word	0x2000015c
 8000298:	20000598 	.word	0x20000598

0800029c <VCP_Data_Overflow>:
  return data_overflow;
 800029c:	4b01      	ldr	r3, [pc, #4]	; (80002a4 <VCP_Data_Overflow+0x8>)
 800029e:	7818      	ldrb	r0, [r3, #0]
}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	2000015c 	.word	0x2000015c

080002a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be send
  * @param  Len: Number of data to be send (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80002a8:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */ 
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80002aa:	4c09      	ldr	r4, [pc, #36]	; (80002d0 <CDC_Transmit_FS+0x28>)
 80002ac:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  if (hcdc->TxState != 0){
 80002b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
{
 80002b4:	460a      	mov	r2, r1
  if (hcdc->TxState != 0){
 80002b6:	b943      	cbnz	r3, 80002ca <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80002b8:	4601      	mov	r1, r0
 80002ba:	4620      	mov	r0, r4
 80002bc:	f000 fe06 	bl	8000ecc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80002c0:	4620      	mov	r0, r4
  /* USER CODE END 7 */ 
  return result;
}
 80002c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80002c6:	f000 be0f 	b.w	8000ee8 <USBD_CDC_TransmitPacket>
}
 80002ca:	2001      	movs	r0, #1
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	bf00      	nop
 80002d0:	20000598 	.word	0x20000598

080002d4 <USBD_static_malloc>:
/* USER CODE BEGIN 1 */
void* USBD_static_malloc(uint32_t size)
{
    static uint32_t mem[MAX_STATIC_ALLOC_SIZE];
    return mem;
}
 80002d4:	4800      	ldr	r0, [pc, #0]	; (80002d8 <USBD_static_malloc+0x4>)
 80002d6:	4770      	bx	lr
 80002d8:	20000160 	.word	0x20000160

080002dc <USBD_static_free>:
void USBD_static_free(void* p) {}
 80002dc:	4770      	bx	lr
	...

080002e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80002e0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 80002e2:	6803      	ldr	r3, [r0, #0]
 80002e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80002e8:	b086      	sub	sp, #24
  if(pcdHandle->Instance==USB_OTG_FS)
 80002ea:	d125      	bne.n	8000338 <HAL_PCD_MspInit+0x58>
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002ec:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80002f0:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002f2:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002f4:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002f8:	2303      	movs	r3, #3
 80002fa:	e9cd 4303 	strd	r4, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002fe:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000300:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000302:	480e      	ldr	r0, [pc, #56]	; (800033c <HAL_PCD_MspInit+0x5c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000304:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000306:	f003 f9c9 	bl	800369c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800030a:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <HAL_PCD_MspInit+0x60>)
 800030c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800030e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000312:	635a      	str	r2, [r3, #52]	; 0x34
 8000314:	9400      	str	r4, [sp, #0]
 8000316:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000318:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800031c:	645a      	str	r2, [r3, #68]	; 0x44
 800031e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000324:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000326:	2043      	movs	r0, #67	; 0x43
 8000328:	4622      	mov	r2, r4
 800032a:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800032c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800032e:	f003 fc5f 	bl	8003bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000332:	2043      	movs	r0, #67	; 0x43
 8000334:	f003 fc90 	bl	8003c58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000338:	b006      	add	sp, #24
 800033a:	bd10      	pop	{r4, pc}
 800033c:	40020000 	.word	0x40020000
 8000340:	40023800 	.word	0x40023800

08000344 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 8000344:	b508      	push	{r3, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 8000346:	6803      	ldr	r3, [r0, #0]
 8000348:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800034c:	d10e      	bne.n	800036c <HAL_PCD_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 800034e:	4a08      	ldr	r2, [pc, #32]	; (8000370 <HAL_PCD_MspDeInit+0x2c>)
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8000350:	4808      	ldr	r0, [pc, #32]	; (8000374 <HAL_PCD_MspDeInit+0x30>)
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 8000352:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000358:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 800035a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800035e:	f003 fa65 	bl	800382c <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 8000362:	2043      	movs	r0, #67	; 0x43

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 8000364:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 8000368:	f003 bc82 	b.w	8003c70 <HAL_NVIC_DisableIRQ>
}
 800036c:	bd08      	pop	{r3, pc}
 800036e:	bf00      	nop
 8000370:	40023800 	.word	0x40023800
 8000374:	40020000 	.word	0x40020000

08000378 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8000378:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 800037c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8000380:	f000 b98d 	b.w	800069e <USBD_LL_SetupStage>

08000384 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8000384:	231c      	movs	r3, #28
 8000386:	fb03 0301 	mla	r3, r3, r1, r0
 800038a:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800038e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000392:	f000 b9b1 	b.w	80006f8 <USBD_LL_DataOutStage>

08000396 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8000396:	231c      	movs	r3, #28
 8000398:	fb03 0301 	mla	r3, r3, r1, r0
 800039c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80003a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80003a2:	f000 b9d9 	b.w	8000758 <USBD_LL_DataInStage>

080003a6 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80003a6:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80003aa:	f000 ba55 	b.w	8000858 <USBD_LL_SOF>

080003ae <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80003ae:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 80003b0:	68c1      	ldr	r1, [r0, #12]
{ 
 80003b2:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 80003b4:	3100      	adds	r1, #0
 80003b6:	bf18      	it	ne
 80003b8:	2101      	movne	r1, #1
 80003ba:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80003be:	f000 fa39 	bl	8000834 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80003c2:	f8d4 03ec 	ldr.w	r0, [r4, #1004]	; 0x3ec
}
 80003c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80003ca:	f000 ba14 	b.w	80007f6 <USBD_LL_Reset>
	...

080003d0 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{  
 80003d0:	b510      	push	{r4, lr}
 80003d2:	4604      	mov	r4, r0
   /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80003d4:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80003d8:	f000 fa2f 	bl	800083a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80003dc:	6822      	ldr	r2, [r4, #0]
 80003de:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80003e2:	f043 0301 	orr.w	r3, r3, #1
 80003e6:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80003ea:	6a23      	ldr	r3, [r4, #32]
 80003ec:	b123      	cbz	r3, 80003f8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80003ee:	4a03      	ldr	r2, [pc, #12]	; (80003fc <HAL_PCD_SuspendCallback+0x2c>)
 80003f0:	6913      	ldr	r3, [r2, #16]
 80003f2:	f043 0306 	orr.w	r3, r3, #6
 80003f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	bf00      	nop
 80003fc:	e000ed00 	.word	0xe000ed00

08000400 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8000400:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8000404:	f000 ba22 	b.w	800084c <USBD_LL_Resume>

08000408 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8000408:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800040c:	f000 ba32 	b.w	8000874 <USBD_LL_IsoOUTIncomplete>

08000410 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8000410:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8000414:	f000 ba2c 	b.w	8000870 <USBD_LL_IsoINIncomplete>

08000418 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8000418:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800041c:	f000 ba2c 	b.w	8000878 <USBD_LL_DevConnected>

08000420 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8000420:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8000424:	f000 ba2a 	b.w	800087c <USBD_LL_DevDisconnected>

08000428 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8000428:	b508      	push	{r3, lr}
  /* Init USB_IP */
  if (pdev->id == DEVICE_FS) {
 800042a:	7802      	ldrb	r2, [r0, #0]
 800042c:	bb42      	cbnz	r2, 8000480 <USBD_LL_Init+0x58>
  /* Link The driver to the stack */	
  hpcd_USB_OTG_FS.pData = pdev;
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <USBD_LL_Init+0x5c>)
  pdev->pData = &hpcd_USB_OTG_FS; 
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000430:	2104      	movs	r1, #4
  hpcd_USB_OTG_FS.pData = pdev;
 8000432:	f8c3 03ec 	str.w	r0, [r3, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS; 
 8000436:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800043a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800043e:	e9c3 0100 	strd	r0, r1, [r3]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000442:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000444:	e9c3 1203 	strd	r1, r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000448:	e9c3 2105 	strd	r2, r1, [r3, #20]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800044c:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800044e:	2101      	movs	r1, #1
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000450:	e9c3 2207 	strd	r2, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000454:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000456:	e9c3 120b 	strd	r1, r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800045a:	f001 f910 	bl	800167e <HAL_PCD_Init>
 800045e:	b108      	cbz	r0, 8000464 <USBD_LL_Init+0x3c>
  {
    Error_Handler();
 8000460:	f000 ffc6 	bl	80013f0 <Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8000464:	2180      	movs	r1, #128	; 0x80
 8000466:	4807      	ldr	r0, [pc, #28]	; (8000484 <USBD_LL_Init+0x5c>)
 8000468:	f003 f914 	bl	8003694 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800046c:	2240      	movs	r2, #64	; 0x40
 800046e:	2100      	movs	r1, #0
 8000470:	4804      	ldr	r0, [pc, #16]	; (8000484 <USBD_LL_Init+0x5c>)
 8000472:	f003 f8ef 	bl	8003654 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8000476:	2280      	movs	r2, #128	; 0x80
 8000478:	2101      	movs	r1, #1
 800047a:	4802      	ldr	r0, [pc, #8]	; (8000484 <USBD_LL_Init+0x5c>)
 800047c:	f003 f8ea 	bl	8003654 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8000480:	2000      	movs	r0, #0
 8000482:	bd08      	pop	{r3, pc}
 8000484:	200001a8 	.word	0x200001a8

08000488 <USBD_LL_DeInit>:
  * @brief  De-Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_DeInit (USBD_HandleTypeDef *pdev)
{
 8000488:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_DeInit(pdev->pData);
 800048a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800048e:	f001 f98d 	bl	80017ac <HAL_PCD_DeInit>
     
  switch (hal_status) {
 8000492:	2803      	cmp	r0, #3
 8000494:	bf96      	itet	ls
 8000496:	4b02      	ldrls	r3, [pc, #8]	; (80004a0 <USBD_LL_DeInit+0x18>)
  hal_status = HAL_PCD_DeInit(pdev->pData);
 8000498:	2002      	movhi	r0, #2
 800049a:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 800049c:	bd08      	pop	{r3, pc}
 800049e:	bf00      	nop
 80004a0:	080060d0 	.word	0x080060d0

080004a4 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80004a4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80004a6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80004aa:	f001 f952 	bl	8001752 <HAL_PCD_Start>
     
  switch (hal_status) {
 80004ae:	2803      	cmp	r0, #3
 80004b0:	bf96      	itet	ls
 80004b2:	4b02      	ldrls	r3, [pc, #8]	; (80004bc <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 80004b4:	2002      	movhi	r0, #2
 80004b6:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80004b8:	bd08      	pop	{r3, pc}
 80004ba:	bf00      	nop
 80004bc:	080060d0 	.word	0x080060d0

080004c0 <USBD_LL_Stop>:
  * @brief  Stops the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Stop (USBD_HandleTypeDef *pdev)
{
 80004c0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Stop(pdev->pData);
 80004c2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80004c6:	f001 f959 	bl	800177c <HAL_PCD_Stop>
     
  switch (hal_status) {
 80004ca:	2803      	cmp	r0, #3
 80004cc:	bf96      	itet	ls
 80004ce:	4b02      	ldrls	r3, [pc, #8]	; (80004d8 <USBD_LL_Stop+0x18>)
  hal_status = HAL_PCD_Stop(pdev->pData);
 80004d0:	2002      	movhi	r0, #2
 80004d2:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80004d4:	bd08      	pop	{r3, pc}
 80004d6:	bf00      	nop
 80004d8:	080060d0 	.word	0x080060d0

080004dc <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 80004dc:	b510      	push	{r4, lr}
 80004de:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 80004e0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80004e4:	4613      	mov	r3, r2
 80004e6:	4622      	mov	r2, r4
 80004e8:	f001 fc5e 	bl	8001da8 <HAL_PCD_EP_Open>
                               ep_addr, 
                               ep_mps, 
                               ep_type);
  
     
  switch (hal_status) {
 80004ec:	2803      	cmp	r0, #3
 80004ee:	bf96      	itet	ls
 80004f0:	4b01      	ldrls	r3, [pc, #4]	; (80004f8 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 80004f2:	2002      	movhi	r0, #2
 80004f4:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80004f6:	bd10      	pop	{r4, pc}
 80004f8:	080060d0 	.word	0x080060d0

080004fc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80004fc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80004fe:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8000502:	f001 fc7e 	bl	8001e02 <HAL_PCD_EP_Close>
      
  switch (hal_status) {
 8000506:	2803      	cmp	r0, #3
 8000508:	bf96      	itet	ls
 800050a:	4b02      	ldrls	r3, [pc, #8]	; (8000514 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800050c:	2002      	movhi	r0, #2
 800050e:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8000510:	bd08      	pop	{r3, pc}
 8000512:	bf00      	nop
 8000514:	080060d0 	.word	0x080060d0

08000518 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_FlushEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8000518:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800051a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800051e:	f001 fd2f 	bl	8001f80 <HAL_PCD_EP_Flush>
      
  switch (hal_status) {
 8000522:	2803      	cmp	r0, #3
 8000524:	bf96      	itet	ls
 8000526:	4b02      	ldrls	r3, [pc, #8]	; (8000530 <USBD_LL_FlushEP+0x18>)
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8000528:	2002      	movhi	r0, #2
 800052a:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 800052c:	bd08      	pop	{r3, pc}
 800052e:	bf00      	nop
 8000530:	080060d0 	.word	0x080060d0

08000534 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8000534:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8000536:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800053a:	f001 fcd1 	bl	8001ee0 <HAL_PCD_EP_SetStall>
      
  switch (hal_status) {
 800053e:	2803      	cmp	r0, #3
 8000540:	bf96      	itet	ls
 8000542:	4b02      	ldrls	r3, [pc, #8]	; (800054c <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8000544:	2002      	movhi	r0, #2
 8000546:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8000548:	bd08      	pop	{r3, pc}
 800054a:	bf00      	nop
 800054c:	080060d0 	.word	0x080060d0

08000550 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8000550:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8000552:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8000556:	f001 fcee 	bl	8001f36 <HAL_PCD_EP_ClrStall>
     
  switch (hal_status) {
 800055a:	2803      	cmp	r0, #3
 800055c:	bf96      	itet	ls
 800055e:	4b02      	ldrls	r3, [pc, #8]	; (8000568 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8000560:	2002      	movhi	r0, #2
 8000562:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8000564:	bd08      	pop	{r3, pc}
 8000566:	bf00      	nop
 8000568:	080060d0 	.word	0x080060d0

0800056c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 800056c:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8000570:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  if((ep_addr & 0x80) == 0x80)
 8000574:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8000578:	bf1b      	ittet	ne
 800057a:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800057e:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8000582:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8000586:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800058a:	bf08      	it	eq
 800058c:	f891 01fa 	ldrbeq.w	r0, [r1, #506]	; 0x1fa
  }
}
 8000590:	4770      	bx	lr
	...

08000594 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8000594:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8000596:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800059a:	f001 fbf3 	bl	8001d84 <HAL_PCD_SetAddress>
     
  switch (hal_status) {
 800059e:	2803      	cmp	r0, #3
 80005a0:	bf96      	itet	ls
 80005a2:	4b02      	ldrls	r3, [pc, #8]	; (80005ac <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80005a4:	2002      	movhi	r0, #2
 80005a6:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80005a8:	bd08      	pop	{r3, pc}
 80005aa:	bf00      	nop
 80005ac:	080060d0 	.word	0x080060d0

080005b0 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 80005b0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80005b2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80005b6:	f001 fc73 	bl	8001ea0 <HAL_PCD_EP_Transmit>
     
  switch (hal_status) {
 80005ba:	2803      	cmp	r0, #3
 80005bc:	bf96      	itet	ls
 80005be:	4b02      	ldrls	r3, [pc, #8]	; (80005c8 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80005c0:	2002      	movhi	r0, #2
 80005c2:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 80005c4:	bd08      	pop	{r3, pc}
 80005c6:	bf00      	nop
 80005c8:	080060d0 	.word	0x080060d0

080005cc <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 80005cc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80005ce:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80005d2:	f001 fc39 	bl	8001e48 <HAL_PCD_EP_Receive>
     
  switch (hal_status) {
 80005d6:	2803      	cmp	r0, #3
 80005d8:	bf96      	itet	ls
 80005da:	4b02      	ldrls	r3, [pc, #8]	; (80005e4 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80005dc:	2002      	movhi	r0, #2
 80005de:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80005e0:	bd08      	pop	{r3, pc}
 80005e2:	bf00      	nop
 80005e4:	080060d0 	.word	0x080060d0

080005e8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 80005e8:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80005ea:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80005ee:	f001 fc4f 	bl	8001e90 <HAL_PCD_EP_GetRxCount>
}
 80005f2:	bd08      	pop	{r3, pc}

080005f4 <USBD_LL_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void  USBD_LL_Delay (uint32_t Delay)
{
  HAL_Delay(Delay);  
 80005f4:	f002 bea8 	b.w	8003348 <HAL_Delay>

080005f8 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80005f8:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80005fa:	b180      	cbz	r0, 800061e <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80005fc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000600:	b113      	cbz	r3, 8000608 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8000602:	2300      	movs	r3, #0
 8000604:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8000608:	b109      	cbz	r1, 800060e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800060a:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800060e:	2301      	movs	r3, #1
 8000610:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8000614:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8000616:	f7ff ff07 	bl	8000428 <USBD_LL_Init>
  
  return USBD_OK; 
 800061a:	2000      	movs	r0, #0
}
 800061c:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800061e:	2002      	movs	r0, #2
 8000620:	e7fc      	b.n	800061c <USBD_Init+0x24>

08000622 <USBD_DeInit>:
*         Re-Initialize th device library
* @param  pdev: device instance
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8000622:	b510      	push	{r4, lr}
  /* Set Default State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8000624:	2301      	movs	r3, #1
 8000626:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800062a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800062e:	7901      	ldrb	r1, [r0, #4]
 8000630:	685b      	ldr	r3, [r3, #4]
{
 8000632:	4604      	mov	r4, r0
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8000634:	4798      	blx	r3
  
    /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 8000636:	4620      	mov	r0, r4
 8000638:	f7ff ff42 	bl	80004c0 <USBD_LL_Stop>
  
  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
 800063c:	4620      	mov	r0, r4
 800063e:	f7ff ff23 	bl	8000488 <USBD_LL_DeInit>
  
  return USBD_OK;
}
 8000642:	2000      	movs	r0, #0
 8000644:	bd10      	pop	{r4, pc}

08000646 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8000646:	b119      	cbz	r1, 8000650 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8000648:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800064c:	2000      	movs	r0, #0
 800064e:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8000650:	2002      	movs	r0, #2
  }
  
  return status;
}
 8000652:	4770      	bx	lr

08000654 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8000654:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8000656:	f7ff ff25 	bl	80004a4 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800065a:	2000      	movs	r0, #0
 800065c:	bd08      	pop	{r3, pc}

0800065e <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop   (USBD_HandleTypeDef *pdev)
{
 800065e:	b510      	push	{r4, lr}
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8000660:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000664:	7901      	ldrb	r1, [r0, #4]
 8000666:	685b      	ldr	r3, [r3, #4]
{
 8000668:	4604      	mov	r4, r0
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800066a:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 800066c:	4620      	mov	r0, r4
 800066e:	f7ff ff27 	bl	80004c0 <USBD_LL_Stop>
  
  return USBD_OK;  
}
 8000672:	2000      	movs	r0, #0
 8000674:	bd10      	pop	{r4, pc}

08000676 <USBD_RunTestMode>:
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
  return USBD_OK;
}
 8000676:	2000      	movs	r0, #0
 8000678:	4770      	bx	lr

0800067a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800067a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800067c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000680:	b90b      	cbnz	r3, 8000686 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8000682:	2002      	movs	r0, #2
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8000684:	bd08      	pop	{r3, pc}
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4798      	blx	r3
 800068a:	2800      	cmp	r0, #0
 800068c:	d0fa      	beq.n	8000684 <USBD_SetClassConfig+0xa>
 800068e:	e7f8      	b.n	8000682 <USBD_SetClassConfig+0x8>

08000690 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8000690:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8000692:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	4798      	blx	r3
  return USBD_OK;
}
 800069a:	2000      	movs	r0, #0
 800069c:	bd08      	pop	{r3, pc}

0800069e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800069e:	b538      	push	{r3, r4, r5, lr}
 80006a0:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80006a2:	f500 7502 	add.w	r5, r0, #520	; 0x208
 80006a6:	4628      	mov	r0, r5
 80006a8:	f000 fab8 	bl	8000c1c <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80006ac:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80006ae:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80006b2:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80006b6:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80006ba:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80006be:	f001 031f 	and.w	r3, r1, #31
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d00e      	beq.n	80006e4 <USBD_LL_SetupStage+0x46>
 80006c6:	b13b      	cbz	r3, 80006d8 <USBD_LL_SetupStage+0x3a>
 80006c8:	2b02      	cmp	r3, #2
 80006ca:	d010      	beq.n	80006ee <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80006cc:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80006d0:	4620      	mov	r0, r4
 80006d2:	f7ff ff2f 	bl	8000534 <USBD_LL_StallEP>
    break;
 80006d6:	e003      	b.n	80006e0 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80006d8:	4629      	mov	r1, r5
 80006da:	4620      	mov	r0, r4
 80006dc:	f000 f92a 	bl	8000934 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80006e0:	2000      	movs	r0, #0
 80006e2:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80006e4:	4629      	mov	r1, r5
 80006e6:	4620      	mov	r0, r4
 80006e8:	f000 fa1e 	bl	8000b28 <USBD_StdItfReq>
    break;
 80006ec:	e7f8      	b.n	80006e0 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 80006ee:	4629      	mov	r1, r5
 80006f0:	4620      	mov	r0, r4
 80006f2:	f000 fa31 	bl	8000b58 <USBD_StdEPReq>
    break;
 80006f6:	e7f3      	b.n	80006e0 <USBD_LL_SetupStage+0x42>

080006f8 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80006f8:	b538      	push	{r3, r4, r5, lr}
 80006fa:	4604      	mov	r4, r0
 80006fc:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80006fe:	bb01      	cbnz	r1, 8000742 <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8000700:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8000704:	2b03      	cmp	r3, #3
 8000706:	d10d      	bne.n	8000724 <USBD_LL_DataOutStage+0x2c>
    {
      if(pep->rem_length > pep->maxpacket)
 8000708:	e9d0 3243 	ldrd	r3, r2, [r0, #268]	; 0x10c
 800070c:	4293      	cmp	r3, r2
 800070e:	d90b      	bls.n	8000728 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -=  pep->maxpacket;
 8000710:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8000712:	429a      	cmp	r2, r3
 8000714:	bf28      	it	cs
 8000716:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8000718:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 800071c:	b292      	uxth	r2, r2
 800071e:	4629      	mov	r1, r5
 8000720:	f000 f8d9 	bl	80008d6 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8000724:	2000      	movs	r0, #0
 8000726:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8000728:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800072c:	691b      	ldr	r3, [r3, #16]
 800072e:	b123      	cbz	r3, 800073a <USBD_LL_DataOutStage+0x42>
 8000730:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8000734:	2a03      	cmp	r2, #3
 8000736:	d100      	bne.n	800073a <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev); 
 8000738:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800073a:	4620      	mov	r0, r4
 800073c:	f000 f8d3 	bl	80008e6 <USBD_CtlSendStatus>
 8000740:	e7f0      	b.n	8000724 <USBD_LL_DataOutStage+0x2c>
  else if((pdev->pClass->DataOut != NULL)&&
 8000742:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d0eb      	beq.n	8000724 <USBD_LL_DataOutStage+0x2c>
 800074c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8000750:	2a03      	cmp	r2, #3
 8000752:	d1e7      	bne.n	8000724 <USBD_LL_DataOutStage+0x2c>
    pdev->pClass->DataOut(pdev, epnum); 
 8000754:	4798      	blx	r3
 8000756:	e7e5      	b.n	8000724 <USBD_LL_DataOutStage+0x2c>

08000758 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8000758:	b570      	push	{r4, r5, r6, lr}
 800075a:	4613      	mov	r3, r2
 800075c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800075e:	460e      	mov	r6, r1
 8000760:	2900      	cmp	r1, #0
 8000762:	d13d      	bne.n	80007e0 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8000764:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8000768:	2a02      	cmp	r2, #2
 800076a:	d10f      	bne.n	800078c <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 800076c:	e9d0 5207 	ldrd	r5, r2, [r0, #28]
 8000770:	4295      	cmp	r5, r2
 8000772:	d914      	bls.n	800079e <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8000774:	1aaa      	subs	r2, r5, r2
 8000776:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8000778:	4619      	mov	r1, r3
 800077a:	b292      	uxth	r2, r2
 800077c:	f000 f896 	bl	80008ac <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8000780:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8000782:	461a      	mov	r2, r3
 8000784:	4619      	mov	r1, r3
 8000786:	4620      	mov	r0, r4
 8000788:	f7ff ff20 	bl	80005cc <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800078c:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8000790:	2b01      	cmp	r3, #1
 8000792:	d102      	bne.n	800079a <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 800079a:	2000      	movs	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 800079e:	6983      	ldr	r3, [r0, #24]
 80007a0:	fbb3 f5f2 	udiv	r5, r3, r2
 80007a4:	fb02 3515 	mls	r5, r2, r5, r3
 80007a8:	b965      	cbnz	r5, 80007c4 <USBD_LL_DataInStage+0x6c>
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d80a      	bhi.n	80007c4 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80007ae:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d206      	bcs.n	80007c4 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80007b6:	462a      	mov	r2, r5
 80007b8:	f000 f878 	bl	80008ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80007bc:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80007c0:	462b      	mov	r3, r5
 80007c2:	e7de      	b.n	8000782 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80007c4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	b12b      	cbz	r3, 80007d8 <USBD_LL_DataInStage+0x80>
 80007cc:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80007d0:	2a03      	cmp	r2, #3
 80007d2:	d101      	bne.n	80007d8 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 80007d4:	4620      	mov	r0, r4
 80007d6:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 80007d8:	4620      	mov	r0, r4
 80007da:	f000 f88f 	bl	80008fc <USBD_CtlReceiveStatus>
 80007de:	e7d5      	b.n	800078c <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 80007e0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0d7      	beq.n	800079a <USBD_LL_DataInStage+0x42>
 80007ea:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80007ee:	2a03      	cmp	r2, #3
 80007f0:	d1d3      	bne.n	800079a <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 80007f2:	4798      	blx	r3
 80007f4:	e7d1      	b.n	800079a <USBD_LL_DataInStage+0x42>

080007f6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80007f6:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80007f8:	2200      	movs	r2, #0
{
 80007fa:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 80007fc:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80007fe:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8000800:	2340      	movs	r3, #64	; 0x40
 8000802:	f7ff fe6b 	bl	80004dc <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8000806:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8000808:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 800080c:	2200      	movs	r2, #0
 800080e:	2180      	movs	r1, #128	; 0x80
 8000810:	4620      	mov	r0, r4
 8000812:	f7ff fe63 	bl	80004dc <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8000816:	2301      	movs	r3, #1
 8000818:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800081c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8000820:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8000822:	b12b      	cbz	r3, 8000830 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8000824:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8000828:	7921      	ldrb	r1, [r4, #4]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	4620      	mov	r0, r4
 800082e:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8000830:	2000      	movs	r0, #0
 8000832:	bd38      	pop	{r3, r4, r5, pc}

08000834 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8000834:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8000836:	2000      	movs	r0, #0
 8000838:	4770      	bx	lr

0800083a <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800083a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800083e:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8000842:	2304      	movs	r3, #4
 8000844:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8000848:	2000      	movs	r0, #0
 800084a:	4770      	bx	lr

0800084c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 800084c:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8000850:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8000854:	2000      	movs	r0, #0
 8000856:	4770      	bx	lr

08000858 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8000858:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800085a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800085e:	2a03      	cmp	r2, #3
 8000860:	d104      	bne.n	800086c <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8000862:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000866:	69db      	ldr	r3, [r3, #28]
 8000868:	b103      	cbz	r3, 800086c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800086a:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800086c:	2000      	movs	r0, #0
 800086e:	bd08      	pop	{r3, pc}

08000870 <USBD_LL_IsoINIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8000870:	2000      	movs	r0, #0
 8000872:	4770      	bx	lr

08000874 <USBD_LL_IsoOUTIncomplete>:
 8000874:	2000      	movs	r0, #0
 8000876:	4770      	bx	lr

08000878 <USBD_LL_DevConnected>:
 8000878:	2000      	movs	r0, #0
 800087a:	4770      	bx	lr

0800087c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800087c:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800087e:	2201      	movs	r2, #1
 8000880:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8000884:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8000888:	7901      	ldrb	r1, [r0, #4]
 800088a:	6852      	ldr	r2, [r2, #4]
 800088c:	4790      	blx	r2
   
  return USBD_OK;
}
 800088e:	2000      	movs	r0, #0
 8000890:	bd08      	pop	{r3, pc}

08000892 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8000892:	b510      	push	{r4, lr}
 8000894:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8000896:	2202      	movs	r2, #2
 8000898:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800089c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80008a0:	460a      	mov	r2, r1
 80008a2:	2100      	movs	r1, #0
 80008a4:	f7ff fe84 	bl	80005b0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80008a8:	2000      	movs	r0, #0
 80008aa:	bd10      	pop	{r4, pc}

080008ac <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80008ac:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80008ae:	4613      	mov	r3, r2
 80008b0:	460a      	mov	r2, r1
 80008b2:	2100      	movs	r1, #0
 80008b4:	f7ff fe7c 	bl	80005b0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80008b8:	2000      	movs	r0, #0
 80008ba:	bd08      	pop	{r3, pc}

080008bc <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80008bc:	b510      	push	{r4, lr}
 80008be:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80008c0:	2203      	movs	r2, #3
 80008c2:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 80008c6:	e9c0 3342 	strd	r3, r3, [r0, #264]	; 0x108
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80008ca:	460a      	mov	r2, r1
 80008cc:	2100      	movs	r1, #0
 80008ce:	f7ff fe7d 	bl	80005cc <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80008d2:	2000      	movs	r0, #0
 80008d4:	bd10      	pop	{r4, pc}

080008d6 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80008d6:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80008d8:	4613      	mov	r3, r2
 80008da:	460a      	mov	r2, r1
 80008dc:	2100      	movs	r1, #0
 80008de:	f7ff fe75 	bl	80005cc <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80008e2:	2000      	movs	r0, #0
 80008e4:	bd08      	pop	{r3, pc}

080008e6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80008e6:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80008e8:	2304      	movs	r3, #4
 80008ea:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80008ee:	2300      	movs	r3, #0
 80008f0:	461a      	mov	r2, r3
 80008f2:	4619      	mov	r1, r3
 80008f4:	f7ff fe5c 	bl	80005b0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80008f8:	2000      	movs	r0, #0
 80008fa:	bd08      	pop	{r3, pc}

080008fc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80008fc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80008fe:	2305      	movs	r3, #5
 8000900:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8000904:	2300      	movs	r3, #0
 8000906:	461a      	mov	r2, r3
 8000908:	4619      	mov	r1, r3
 800090a:	f7ff fe5f 	bl	80005cc <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800090e:	2000      	movs	r0, #0
 8000910:	bd08      	pop	{r3, pc}

08000912 <USBD_GetRxCount>:
* @param  pdev: device instance
* @param  ep_addr: endpoint address
* @retval Rx Data blength
*/
uint16_t  USBD_GetRxCount (USBD_HandleTypeDef  *pdev , uint8_t ep_addr)
{
 8000912:	b508      	push	{r3, lr}
  return USBD_LL_GetRxDataSize(pdev, ep_addr);
 8000914:	f7ff fe68 	bl	80005e8 <USBD_LL_GetRxDataSize>
}
 8000918:	b280      	uxth	r0, r0
 800091a:	bd08      	pop	{r3, pc}

0800091c <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800091c:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800091e:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8000920:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8000922:	f7ff fe07 	bl	8000534 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8000926:	4620      	mov	r0, r4
 8000928:	2100      	movs	r1, #0
}
 800092a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800092e:	f7ff be01 	b.w	8000534 <USBD_LL_StallEP>
	...

08000934 <USBD_StdDevReq>:
{
 8000934:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8000936:	784b      	ldrb	r3, [r1, #1]
{
 8000938:	4604      	mov	r4, r0
 800093a:	460d      	mov	r5, r1
  switch (req->bRequest) 
 800093c:	2b09      	cmp	r3, #9
 800093e:	d876      	bhi.n	8000a2e <USBD_StdDevReq+0xfa>
 8000940:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000944:	00e500c9 	.word	0x00e500c9
 8000948:	00d90075 	.word	0x00d90075
 800094c:	006d0075 	.word	0x006d0075
 8000950:	0075000a 	.word	0x0075000a
 8000954:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8000958:	884b      	ldrh	r3, [r1, #2]
 800095a:	0a1a      	lsrs	r2, r3, #8
 800095c:	3a01      	subs	r2, #1
 800095e:	2a06      	cmp	r2, #6
 8000960:	d865      	bhi.n	8000a2e <USBD_StdDevReq+0xfa>
 8000962:	e8df f002 	tbb	[pc, r2]
 8000966:	1c04      	.short	0x1c04
 8000968:	49646429 	.word	0x49646429
 800096c:	52          	.byte	0x52
 800096d:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800096e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8000972:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8000974:	7c20      	ldrb	r0, [r4, #16]
 8000976:	f10d 0106 	add.w	r1, sp, #6
 800097a:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800097c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8000980:	2a00      	cmp	r2, #0
 8000982:	d067      	beq.n	8000a54 <USBD_StdDevReq+0x120>
 8000984:	88eb      	ldrh	r3, [r5, #6]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d064      	beq.n	8000a54 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 800098a:	429a      	cmp	r2, r3
 800098c:	bf28      	it	cs
 800098e:	461a      	movcs	r2, r3
 8000990:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8000994:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 8000996:	4620      	mov	r0, r4
 8000998:	f7ff ff7b 	bl	8000892 <USBD_CtlSendData>
    break;
 800099c:	e05a      	b.n	8000a54 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800099e:	7c02      	ldrb	r2, [r0, #16]
 80009a0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80009a4:	b932      	cbnz	r2, 80009b4 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80009a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80009a8:	f10d 0006 	add.w	r0, sp, #6
 80009ac:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80009ae:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80009b0:	7043      	strb	r3, [r0, #1]
      break; 
 80009b2:	e7e3      	b.n	800097c <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80009b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b6:	e7f7      	b.n	80009a8 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b05      	cmp	r3, #5
 80009bc:	d837      	bhi.n	8000a2e <USBD_StdDevReq+0xfa>
 80009be:	e8df f003 	tbb	[pc, r3]
 80009c2:	0703      	.short	0x0703
 80009c4:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80009c8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	e7d1      	b.n	8000974 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80009d0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	e7cd      	b.n	8000974 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80009d8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	e7c9      	b.n	8000974 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80009e0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80009e4:	691b      	ldr	r3, [r3, #16]
 80009e6:	e7c5      	b.n	8000974 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80009e8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	e7c1      	b.n	8000974 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80009f0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	e7bd      	b.n	8000974 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80009f8:	7c03      	ldrb	r3, [r0, #16]
 80009fa:	b9c3      	cbnz	r3, 8000a2e <USBD_StdDevReq+0xfa>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80009fc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000a00:	f10d 0006 	add.w	r0, sp, #6
 8000a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a06:	4798      	blx	r3
      break;
 8000a08:	e7b8      	b.n	800097c <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8000a0a:	7c03      	ldrb	r3, [r0, #16]
 8000a0c:	b97b      	cbnz	r3, 8000a2e <USBD_StdDevReq+0xfa>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8000a0e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000a12:	f10d 0006 	add.w	r0, sp, #6
 8000a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a18:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	e7c8      	b.n	80009b0 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8000a1e:	888b      	ldrh	r3, [r1, #4]
 8000a20:	b92b      	cbnz	r3, 8000a2e <USBD_StdDevReq+0xfa>
 8000a22:	88cb      	ldrh	r3, [r1, #6]
 8000a24:	b91b      	cbnz	r3, 8000a2e <USBD_StdDevReq+0xfa>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8000a26:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d103      	bne.n	8000a36 <USBD_StdDevReq+0x102>
       USBD_CtlError(pdev , req);                     
 8000a2e:	4620      	mov	r0, r4
 8000a30:	f7ff ff74 	bl	800091c <USBD_CtlError.constprop.0>
      break;
 8000a34:	e00e      	b.n	8000a54 <USBD_StdDevReq+0x120>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8000a36:	788d      	ldrb	r5, [r1, #2]
 8000a38:	f005 057f 	and.w	r5, r5, #127	; 0x7f
      pdev->dev_address = dev_addr;
 8000a3c:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8000a40:	4629      	mov	r1, r5
 8000a42:	f7ff fda7 	bl	8000594 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8000a46:	4620      	mov	r0, r4
 8000a48:	f7ff ff4d 	bl	80008e6 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8000a4c:	b12d      	cbz	r5, 8000a5a <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8000a4e:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8000a50:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8000a54:	2000      	movs	r0, #0
 8000a56:	b003      	add	sp, #12
 8000a58:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e7f8      	b.n	8000a50 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8000a5e:	7889      	ldrb	r1, [r1, #2]
 8000a60:	4d30      	ldr	r5, [pc, #192]	; (8000b24 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8000a62:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8000a64:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8000a66:	d8e2      	bhi.n	8000a2e <USBD_StdDevReq+0xfa>
    switch (pdev->dev_state) 
 8000a68:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d00c      	beq.n	8000a8a <USBD_StdDevReq+0x156>
 8000a70:	2b03      	cmp	r3, #3
 8000a72:	d1dc      	bne.n	8000a2e <USBD_StdDevReq+0xfa>
      if (cfgidx == 0) 
 8000a74:	b9b1      	cbnz	r1, 8000aa4 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8000a76:	2302      	movs	r3, #2
 8000a78:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8000a7c:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8000a7e:	f7ff fe07 	bl	8000690 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8000a82:	4620      	mov	r0, r4
 8000a84:	f7ff ff2f 	bl	80008e6 <USBD_CtlSendStatus>
 8000a88:	e7e4      	b.n	8000a54 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8000a8a:	2900      	cmp	r1, #0
 8000a8c:	d0f9      	beq.n	8000a82 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8000a8e:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8000a90:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8000a92:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8000a94:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8000a98:	4620      	mov	r0, r4
 8000a9a:	f7ff fdee 	bl	800067a <USBD_SetClassConfig>
 8000a9e:	2802      	cmp	r0, #2
 8000aa0:	d1ef      	bne.n	8000a82 <USBD_StdDevReq+0x14e>
 8000aa2:	e7c4      	b.n	8000a2e <USBD_StdDevReq+0xfa>
      else  if (cfgidx != pdev->dev_config) 
 8000aa4:	6841      	ldr	r1, [r0, #4]
 8000aa6:	2901      	cmp	r1, #1
 8000aa8:	d0eb      	beq.n	8000a82 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8000aaa:	b2c9      	uxtb	r1, r1
 8000aac:	f7ff fdf0 	bl	8000690 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8000ab0:	7829      	ldrb	r1, [r5, #0]
 8000ab2:	6061      	str	r1, [r4, #4]
 8000ab4:	e7f0      	b.n	8000a98 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8000ab6:	88ca      	ldrh	r2, [r1, #6]
 8000ab8:	2a01      	cmp	r2, #1
 8000aba:	d1b8      	bne.n	8000a2e <USBD_StdDevReq+0xfa>
    switch (pdev->dev_state )  
 8000abc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d003      	beq.n	8000acc <USBD_StdDevReq+0x198>
 8000ac4:	2b03      	cmp	r3, #3
 8000ac6:	d1b2      	bne.n	8000a2e <USBD_StdDevReq+0xfa>
      USBD_CtlSendData (pdev, 
 8000ac8:	1d01      	adds	r1, r0, #4
 8000aca:	e764      	b.n	8000996 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8000acc:	4601      	mov	r1, r0
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 8000ad4:	e75f      	b.n	8000996 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8000ad6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8000ada:	3b02      	subs	r3, #2
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d8a6      	bhi.n	8000a2e <USBD_StdDevReq+0xfa>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8000ae4:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8000ae8:	b10b      	cbz	r3, 8000aee <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8000aea:	2303      	movs	r3, #3
 8000aec:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8000aee:	2202      	movs	r2, #2
 8000af0:	f104 010c 	add.w	r1, r4, #12
 8000af4:	e74f      	b.n	8000996 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8000af6:	884b      	ldrh	r3, [r1, #2]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d1ab      	bne.n	8000a54 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8000afc:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8000b00:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8000b04:	4629      	mov	r1, r5
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	4620      	mov	r0, r4
 8000b0a:	4798      	blx	r3
 8000b0c:	e7b9      	b.n	8000a82 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8000b0e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8000b12:	3b02      	subs	r3, #2
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d88a      	bhi.n	8000a2e <USBD_StdDevReq+0xfa>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8000b18:	884b      	ldrh	r3, [r1, #2]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d19a      	bne.n	8000a54 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e7ec      	b.n	8000afc <USBD_StdDevReq+0x1c8>
 8000b22:	bf00      	nop
 8000b24:	20000170 	.word	0x20000170

08000b28 <USBD_StdItfReq>:
{
 8000b28:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8000b2a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8000b2e:	2b03      	cmp	r3, #3
{
 8000b30:	4604      	mov	r4, r0
 8000b32:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8000b34:	d10d      	bne.n	8000b52 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8000b36:	790b      	ldrb	r3, [r1, #4]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d80a      	bhi.n	8000b52 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8000b3c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8000b44:	88eb      	ldrh	r3, [r5, #6]
 8000b46:	b913      	cbnz	r3, 8000b4e <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8000b48:	4620      	mov	r0, r4
 8000b4a:	f7ff fecc 	bl	80008e6 <USBD_CtlSendStatus>
}
 8000b4e:	2000      	movs	r0, #0
 8000b50:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8000b52:	f7ff fee3 	bl	800091c <USBD_CtlError.constprop.0>
    break;
 8000b56:	e7fa      	b.n	8000b4e <USBD_StdItfReq+0x26>

08000b58 <USBD_StdEPReq>:
{
 8000b58:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8000b5a:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8000b5c:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8000b5e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8000b62:	2a20      	cmp	r2, #32
{
 8000b64:	4604      	mov	r4, r0
 8000b66:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8000b68:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8000b6a:	d105      	bne.n	8000b78 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8000b6c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	4798      	blx	r3
}
 8000b74:	2000      	movs	r0, #0
 8000b76:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8000b78:	784a      	ldrb	r2, [r1, #1]
 8000b7a:	2a01      	cmp	r2, #1
 8000b7c:	d01d      	beq.n	8000bba <USBD_StdEPReq+0x62>
 8000b7e:	b35a      	cbz	r2, 8000bd8 <USBD_StdEPReq+0x80>
 8000b80:	2a03      	cmp	r2, #3
 8000b82:	d1f7      	bne.n	8000b74 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8000b84:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8000b88:	2a02      	cmp	r2, #2
 8000b8a:	d041      	beq.n	8000c10 <USBD_StdEPReq+0xb8>
 8000b8c:	2a03      	cmp	r2, #3
 8000b8e:	d003      	beq.n	8000b98 <USBD_StdEPReq+0x40>
      USBD_CtlError(pdev , req);
 8000b90:	4620      	mov	r0, r4
 8000b92:	f7ff fec3 	bl	800091c <USBD_CtlError.constprop.0>
      break;    
 8000b96:	e7ed      	b.n	8000b74 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8000b98:	884a      	ldrh	r2, [r1, #2]
 8000b9a:	b922      	cbnz	r2, 8000ba6 <USBD_StdEPReq+0x4e>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8000b9c:	065a      	lsls	r2, r3, #25
 8000b9e:	d002      	beq.n	8000ba6 <USBD_StdEPReq+0x4e>
          USBD_LL_StallEP(pdev , ep_addr);
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f7ff fcc7 	bl	8000534 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8000ba6:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8000baa:	4629      	mov	r1, r5
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	4620      	mov	r0, r4
 8000bb0:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	f7ff fe97 	bl	80008e6 <USBD_CtlSendStatus>
 8000bb8:	e7dc      	b.n	8000b74 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8000bba:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8000bbe:	2a02      	cmp	r2, #2
 8000bc0:	d026      	beq.n	8000c10 <USBD_StdEPReq+0xb8>
 8000bc2:	2a03      	cmp	r2, #3
 8000bc4:	d1e4      	bne.n	8000b90 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8000bc6:	884a      	ldrh	r2, [r1, #2]
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	d1d3      	bne.n	8000b74 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8000bcc:	065e      	lsls	r6, r3, #25
 8000bce:	d0f0      	beq.n	8000bb2 <USBD_StdEPReq+0x5a>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f7ff fcbd 	bl	8000550 <USBD_LL_ClearStallEP>
 8000bd6:	e7e6      	b.n	8000ba6 <USBD_StdEPReq+0x4e>
    switch (pdev->dev_state) 
 8000bd8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8000bdc:	2a02      	cmp	r2, #2
 8000bde:	d017      	beq.n	8000c10 <USBD_StdEPReq+0xb8>
 8000be0:	2a03      	cmp	r2, #3
 8000be2:	d1d5      	bne.n	8000b90 <USBD_StdEPReq+0x38>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8000be4:	f003 057f 	and.w	r5, r3, #127	; 0x7f
 8000be8:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 8000bec:	0632      	lsls	r2, r6, #24
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8000bee:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8000bf0:	bf4c      	ite	mi
 8000bf2:	3514      	addmi	r5, #20
 8000bf4:	f505 7582 	addpl.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8000bf8:	f7ff fcb8 	bl	800056c <USBD_LL_IsStallEP>
 8000bfc:	3000      	adds	r0, #0
 8000bfe:	bf18      	it	ne
 8000c00:	2001      	movne	r0, #1
 8000c02:	6028      	str	r0, [r5, #0]
      USBD_CtlSendData (pdev,
 8000c04:	2202      	movs	r2, #2
 8000c06:	4629      	mov	r1, r5
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f7ff fe42 	bl	8000892 <USBD_CtlSendData>
      break;
 8000c0e:	e7b1      	b.n	8000b74 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8000c10:	0659      	lsls	r1, r3, #25
 8000c12:	d0af      	beq.n	8000b74 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8000c14:	4619      	mov	r1, r3
 8000c16:	f7ff fc8d 	bl	8000534 <USBD_LL_StallEP>
 8000c1a:	e7ab      	b.n	8000b74 <USBD_StdEPReq+0x1c>

08000c1c <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8000c1c:	780b      	ldrb	r3, [r1, #0]
 8000c1e:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8000c20:	784b      	ldrb	r3, [r1, #1]
 8000c22:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8000c24:	78ca      	ldrb	r2, [r1, #3]
 8000c26:	788b      	ldrb	r3, [r1, #2]
 8000c28:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000c2c:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8000c2e:	794a      	ldrb	r2, [r1, #5]
 8000c30:	790b      	ldrb	r3, [r1, #4]
 8000c32:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000c36:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8000c38:	79ca      	ldrb	r2, [r1, #7]
 8000c3a:	798b      	ldrb	r3, [r1, #6]
 8000c3c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000c40:	80c3      	strh	r3, [r0, #6]
}
 8000c42:	4770      	bx	lr

08000c44 <USBD_CtlError>:
{
 8000c44:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 8000c46:	2180      	movs	r1, #128	; 0x80
{
 8000c48:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8000c4a:	f7ff fc73 	bl	8000534 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8000c4e:	4620      	mov	r0, r4
 8000c50:	2100      	movs	r1, #0
}
 8000c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8000c56:	f7ff bc6d 	b.w	8000534 <USBD_LL_StallEP>

08000c5a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8000c5a:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8000c5c:	b178      	cbz	r0, 8000c7e <USBD_GetString+0x24>
 8000c5e:	2300      	movs	r3, #0
 8000c60:	3801      	subs	r0, #1
 8000c62:	1c5d      	adds	r5, r3, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8000c64:	5d44      	ldrb	r4, [r0, r5]
 8000c66:	b95c      	cbnz	r4, 8000c80 <USBD_GetString+0x26>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8000c70:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8000c72:	2303      	movs	r3, #3
 8000c74:	704b      	strb	r3, [r1, #1]
 8000c76:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8000c78:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8000c7c:	b915      	cbnz	r5, 8000c84 <USBD_GetString+0x2a>
}
 8000c7e:	bd30      	pop	{r4, r5, pc}
    while (*buf != '\0') 
 8000c80:	462b      	mov	r3, r5
 8000c82:	e7ee      	b.n	8000c62 <USBD_GetString+0x8>
      unicode[idx++] = *desc++;
 8000c84:	1c5a      	adds	r2, r3, #1
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8000c8a:	3302      	adds	r3, #2
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	548c      	strb	r4, [r1, r2]
 8000c90:	e7f2      	b.n	8000c78 <USBD_GetString+0x1e>

08000c92 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c92:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c94:	2007      	movs	r0, #7
 8000c96:	f002 ff99 	bl	8003bcc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	f06f 000b 	mvn.w	r0, #11
 8000ca2:	f002 ffa5 	bl	8003bf0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	4611      	mov	r1, r2
 8000caa:	f06f 000a 	mvn.w	r0, #10
 8000cae:	f002 ff9f 	bl	8003bf0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	f06f 0009 	mvn.w	r0, #9
 8000cba:	f002 ff99 	bl	8003bf0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	f06f 0004 	mvn.w	r0, #4
 8000cc6:	f002 ff93 	bl	8003bf0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4611      	mov	r1, r2
 8000cce:	f06f 0003 	mvn.w	r0, #3
 8000cd2:	f002 ff8d 	bl	8003bf0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4611      	mov	r1, r2
 8000cda:	f06f 0001 	mvn.w	r0, #1
 8000cde:	f002 ff87 	bl	8003bf0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000cee:	f002 bf7f 	b.w	8003bf0 <HAL_NVIC_SetPriority>

08000cf2 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8000cf2:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8000cf6:	b11b      	cbz	r3, 8000d00 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8000cfe:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8000d00:	2002      	movs	r0, #2
  }
}
 8000d02:	4770      	bx	lr

08000d04 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8000d04:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8000d06:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8000d0a:	b16b      	cbz	r3, 8000d28 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8000d0c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8000d10:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8000d14:	28ff      	cmp	r0, #255	; 0xff
 8000d16:	d007      	beq.n	8000d28 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8000d1e:	4621      	mov	r1, r4
 8000d20:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8000d22:	23ff      	movs	r3, #255	; 0xff
 8000d24:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8000d28:	2000      	movs	r0, #0
 8000d2a:	bd10      	pop	{r4, pc}

08000d2c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8000d2c:	2343      	movs	r3, #67	; 0x43
 8000d2e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8000d30:	4800      	ldr	r0, [pc, #0]	; (8000d34 <USBD_CDC_GetFSCfgDesc+0x8>)
 8000d32:	4770      	bx	lr
 8000d34:	20000048 	.word	0x20000048

08000d38 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8000d38:	2343      	movs	r3, #67	; 0x43
 8000d3a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8000d3c:	4800      	ldr	r0, [pc, #0]	; (8000d40 <USBD_CDC_GetHSCfgDesc+0x8>)
 8000d3e:	4770      	bx	lr
 8000d40:	2000008c 	.word	0x2000008c

08000d44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8000d44:	2343      	movs	r3, #67	; 0x43
 8000d46:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8000d48:	4800      	ldr	r0, [pc, #0]	; (8000d4c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8000d4a:	4770      	bx	lr
 8000d4c:	200000dc 	.word	0x200000dc

08000d50 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8000d50:	230a      	movs	r3, #10
 8000d52:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8000d54:	4800      	ldr	r0, [pc, #0]	; (8000d58 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8000d56:	4770      	bx	lr
 8000d58:	200000d0 	.word	0x200000d0

08000d5c <USBD_CDC_DataOut>:
{      
 8000d5c:	b538      	push	{r3, r4, r5, lr}
 8000d5e:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8000d60:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8000d64:	f7ff fc40 	bl	80005e8 <USBD_LL_GetRxDataSize>
 8000d68:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8000d6c:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8000d70:	b14b      	cbz	r3, 8000d86 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8000d72:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8000d76:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8000d80:	4798      	blx	r3
    return USBD_OK;
 8000d82:	2000      	movs	r0, #0
}
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8000d86:	2002      	movs	r0, #2
 8000d88:	e7fc      	b.n	8000d84 <USBD_CDC_DataOut+0x28>
	...

08000d8c <USBD_CDC_Setup>:
{
 8000d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8000d8e:	780f      	ldrb	r7, [r1, #0]
 8000d90:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 8000d94:	4606      	mov	r6, r0
 8000d96:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8000d98:	d025      	beq.n	8000de6 <USBD_CDC_Setup+0x5a>
 8000d9a:	2b20      	cmp	r3, #32
 8000d9c:	d11b      	bne.n	8000dd6 <USBD_CDC_Setup+0x4a>
    if (req->wLength)
 8000d9e:	88ca      	ldrh	r2, [r1, #6]
 8000da0:	784b      	ldrb	r3, [r1, #1]
 8000da2:	b1d2      	cbz	r2, 8000dda <USBD_CDC_Setup+0x4e>
      if (req->bmRequest & 0x80)
 8000da4:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8000da6:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8000daa:	d50b      	bpl.n	8000dc4 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8000dac:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8000db0:	4618      	mov	r0, r3
 8000db2:	688f      	ldr	r7, [r1, #8]
 8000db4:	4629      	mov	r1, r5
 8000db6:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 8000db8:	88e2      	ldrh	r2, [r4, #6]
 8000dba:	4629      	mov	r1, r5
 8000dbc:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8000dbe:	f7ff fd68 	bl	8000892 <USBD_CtlSendData>
      break;
 8000dc2:	e008      	b.n	8000dd6 <USBD_CDC_Setup+0x4a>
        hcdc->CmdOpCode = req->bRequest;
 8000dc4:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8000dc8:	88e3      	ldrh	r3, [r4, #6]
 8000dca:	f885 3201 	strb.w	r3, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 8000dce:	88e2      	ldrh	r2, [r4, #6]
 8000dd0:	4629      	mov	r1, r5
 8000dd2:	f7ff fd73 	bl	80008bc <USBD_CtlPrepareRx>
}
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8000dda:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8000dde:	6884      	ldr	r4, [r0, #8]
 8000de0:	4618      	mov	r0, r3
 8000de2:	47a0      	blx	r4
 8000de4:	e7f7      	b.n	8000dd6 <USBD_CDC_Setup+0x4a>
    switch (req->bRequest)
 8000de6:	784b      	ldrb	r3, [r1, #1]
 8000de8:	2b0a      	cmp	r3, #10
 8000dea:	d1f4      	bne.n	8000dd6 <USBD_CDC_Setup+0x4a>
      USBD_CtlSendData (pdev,
 8000dec:	2201      	movs	r2, #1
 8000dee:	4901      	ldr	r1, [pc, #4]	; (8000df4 <USBD_CDC_Setup+0x68>)
 8000df0:	e7e5      	b.n	8000dbe <USBD_CDC_Setup+0x32>
 8000df2:	bf00      	nop
 8000df4:	20000171 	.word	0x20000171

08000df8 <USBD_CDC_DeInit>:
{
 8000df8:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8000dfa:	2181      	movs	r1, #129	; 0x81
{
 8000dfc:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8000dfe:	f7ff fb7d 	bl	80004fc <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8000e02:	2101      	movs	r1, #1
 8000e04:	4620      	mov	r0, r4
 8000e06:	f7ff fb79 	bl	80004fc <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8000e0a:	2182      	movs	r1, #130	; 0x82
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	f7ff fb75 	bl	80004fc <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8000e12:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8000e16:	b153      	cbz	r3, 8000e2e <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8000e18:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8000e20:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8000e24:	f7ff fa5a 	bl	80002dc <USBD_static_free>
    pdev->pClassData = NULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8000e2e:	2000      	movs	r0, #0
 8000e30:	bd10      	pop	{r4, pc}

08000e32 <USBD_CDC_Init>:
{
 8000e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8000e34:	7c03      	ldrb	r3, [r0, #16]
{
 8000e36:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8000e38:	bb7b      	cbnz	r3, 8000e9a <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8000e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e3e:	2202      	movs	r2, #2
 8000e40:	2181      	movs	r1, #129	; 0x81
 8000e42:	f7ff fb4b 	bl	80004dc <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8000e46:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	4620      	mov	r0, r4
 8000e50:	f7ff fb44 	bl	80004dc <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8000e54:	2308      	movs	r3, #8
 8000e56:	2203      	movs	r2, #3
 8000e58:	2182      	movs	r1, #130	; 0x82
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	f7ff fb3e 	bl	80004dc <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8000e60:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8000e64:	f7ff fa36 	bl	80002d4 <USBD_static_malloc>
 8000e68:	4605      	mov	r5, r0
 8000e6a:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8000e6e:	b320      	cbz	r0, 8000eba <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8000e70:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
    hcdc->TxState =0;
 8000e74:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4798      	blx	r3
    hcdc->TxState =0;
 8000e7a:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
    hcdc->RxState =0;
 8000e7e:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8000e82:	7c26      	ldrb	r6, [r4, #16]
 8000e84:	b986      	cbnz	r6, 8000ea8 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8000e86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e8a:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8000e8e:	2101      	movs	r1, #1
 8000e90:	4620      	mov	r0, r4
 8000e92:	f7ff fb9b 	bl	80005cc <USBD_LL_PrepareReceive>
}
 8000e96:	4630      	mov	r0, r6
 8000e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8000e9a:	2340      	movs	r3, #64	; 0x40
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	2181      	movs	r1, #129	; 0x81
 8000ea0:	f7ff fb1c 	bl	80004dc <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8000ea4:	2340      	movs	r3, #64	; 0x40
 8000ea6:	e7d0      	b.n	8000e4a <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8000ea8:	2340      	movs	r3, #64	; 0x40
 8000eaa:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8000eae:	2101      	movs	r1, #1
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	f7ff fb8b 	bl	80005cc <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8000eb6:	463e      	mov	r6, r7
 8000eb8:	e7ed      	b.n	8000e96 <USBD_CDC_Init+0x64>
    ret = 1; 
 8000eba:	2601      	movs	r6, #1
 8000ebc:	e7eb      	b.n	8000e96 <USBD_CDC_Init+0x64>

08000ebe <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8000ebe:	b119      	cbz	r1, 8000ec8 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8000ec0:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8000ec8:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8000eca:	4770      	bx	lr

08000ecc <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8000ecc:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8000ed0:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8000ed2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8000ed6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8000eda:	4770      	bx	lr

08000edc <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8000edc:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->RxBuffer = pbuff;
  
  return USBD_OK;
}
 8000ee0:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8000ee2:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8000ee6:	4770      	bx	lr

08000ee8 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8000ee8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8000eea:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8000eee:	b172      	cbz	r2, 8000f0e <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8000ef0:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	b964      	cbnz	r4, 8000f12 <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8000ef8:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8000efc:	2181      	movs	r1, #129	; 0x81
 8000efe:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8000f02:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8000f06:	f7ff fb53 	bl	80005b0 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 8000f0a:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8000f0c:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8000f0e:	2002      	movs	r0, #2
 8000f10:	e7fc      	b.n	8000f0c <USBD_CDC_TransmitPacket+0x24>
      return USBD_BUSY;
 8000f12:	4618      	mov	r0, r3
 8000f14:	e7fa      	b.n	8000f0c <USBD_CDC_TransmitPacket+0x24>

08000f16 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8000f16:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8000f18:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8000f1c:	b183      	cbz	r3, 8000f40 <USBD_CDC_ReceivePacket+0x2a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8000f1e:	7c04      	ldrb	r4, [r0, #16]
 8000f20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f24:	b934      	cbnz	r4, 8000f34 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8000f26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	f7ff fb4e 	bl	80005cc <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8000f30:	4620      	mov	r0, r4
 8000f32:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8000f34:	2340      	movs	r3, #64	; 0x40
 8000f36:	2101      	movs	r1, #1
 8000f38:	f7ff fb48 	bl	80005cc <USBD_LL_PrepareReceive>
    return USBD_OK;
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	e7f7      	b.n	8000f30 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8000f40:	2402      	movs	r4, #2
 8000f42:	e7f5      	b.n	8000f30 <USBD_CDC_ReceivePacket+0x1a>

08000f44 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000f44:	b530      	push	{r4, r5, lr}
 8000f46:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f48:	4b28      	ldr	r3, [pc, #160]	; (8000fec <SystemClock_Config+0xa8>)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	9101      	str	r1, [sp, #4]
 8000f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f54:	641a      	str	r2, [r3, #64]	; 0x40
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f58:	4a25      	ldr	r2, [pc, #148]	; (8000ff0 <SystemClock_Config+0xac>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f62:	9102      	str	r1, [sp, #8]
 8000f64:	6813      	ldr	r3, [r2, #0]
 8000f66:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	6813      	ldr	r3, [r2, #0]
 8000f72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f76:	9302      	str	r3, [sp, #8]
 8000f78:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f80:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f82:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f8a:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f8e:	2504      	movs	r5, #4
 8000f90:	2348      	movs	r3, #72	; 0x48
 8000f92:	e9cd 5310 	strd	r5, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f96:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f98:	2303      	movs	r3, #3
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f9a:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f9c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9e:	f004 fa23 	bl	80053e8 <HAL_RCC_OscConfig>
 8000fa2:	b100      	cbz	r0, 8000fa6 <SystemClock_Config+0x62>
{
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
 8000fa4:	e7fe      	b.n	8000fa4 <SystemClock_Config+0x60>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa8:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb0:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb2:	e9cd 3006 	strd	r3, r0, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fb6:	4621      	mov	r1, r4
 8000fb8:	a803      	add	r0, sp, #12
 8000fba:	f004 fc3b 	bl	8005834 <HAL_RCC_ClockConfig>
 8000fbe:	4604      	mov	r4, r0
 8000fc0:	b100      	cbz	r0, 8000fc4 <SystemClock_Config+0x80>
  }
 8000fc2:	e7fe      	b.n	8000fc2 <SystemClock_Config+0x7e>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000fc4:	f004 fcec 	bl	80059a0 <HAL_RCC_GetHCLKFreq>
 8000fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fcc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fd0:	f002 fe6e 	bl	8003cb0 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000fd4:	4628      	mov	r0, r5
 8000fd6:	f002 ff37 	bl	8003e48 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000fda:	4622      	mov	r2, r4
 8000fdc:	4621      	mov	r1, r4
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fe2:	f002 fe05 	bl	8003bf0 <HAL_NVIC_SetPriority>
}
 8000fe6:	b015      	add	sp, #84	; 0x54
 8000fe8:	bd30      	pop	{r4, r5, pc}
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40007000 	.word	0x40007000

08000ff4 <Read_Address>:
{
 8000ff4:	b510      	push	{r4, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	460c      	mov	r4, r1
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	a904      	add	r1, sp, #16
    a[i] = (address>>i)%2;
 8000ffe:	fa20 f203 	lsr.w	r2, r0, r3
 8001002:	3301      	adds	r3, #1
 8001004:	f002 0201 	and.w	r2, r2, #1
  for(uint8_t i=0; i<21; i++)
 8001008:	2b15      	cmp	r3, #21
    a[i] = (address>>i)%2;
 800100a:	f801 2b01 	strb.w	r2, [r1], #1
  for(uint8_t i=0; i<21; i++)
 800100e:	d1f6      	bne.n	8000ffe <Read_Address+0xa>
  HAL_GPIO_WritePin( ADR0_Port,ADR0_Pin,a[0] );
 8001010:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8001014:	4880      	ldr	r0, [pc, #512]	; (8001218 <Read_Address+0x224>)
 8001016:	2102      	movs	r1, #2
 8001018:	f002 fc84 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin( ADR1_Port,ADR1_Pin,a[1] );
 800101c:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8001020:	487d      	ldr	r0, [pc, #500]	; (8001218 <Read_Address+0x224>)
 8001022:	2104      	movs	r1, #4
 8001024:	f002 fc7e 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin( ADR2_Port,ADR2_Pin,a[2] );
 8001028:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800102c:	487a      	ldr	r0, [pc, #488]	; (8001218 <Read_Address+0x224>)
 800102e:	2108      	movs	r1, #8
 8001030:	f002 fc78 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin( ADR3_Port,ADR3_Pin,a[3] );
 8001034:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8001038:	4878      	ldr	r0, [pc, #480]	; (800121c <Read_Address+0x228>)
 800103a:	2110      	movs	r1, #16
 800103c:	f002 fc72 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin( ADR4_Port,ADR4_Pin,a[4] );
 8001040:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001044:	4875      	ldr	r0, [pc, #468]	; (800121c <Read_Address+0x228>)
 8001046:	2120      	movs	r1, #32
 8001048:	f002 fc6c 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin( ADR5_Port,ADR5_Pin,a[5] );
 800104c:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8001050:	4873      	ldr	r0, [pc, #460]	; (8001220 <Read_Address+0x22c>)
 8001052:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001056:	f002 fc65 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin( ADR6_Port,ADR6_Pin,a[6] );
 800105a:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800105e:	486f      	ldr	r0, [pc, #444]	; (800121c <Read_Address+0x228>)
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	f002 fc5f 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin( ADR7_Port,ADR7_Pin,a[7] );
 8001066:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800106a:	486b      	ldr	r0, [pc, #428]	; (8001218 <Read_Address+0x224>)
 800106c:	2110      	movs	r1, #16
 800106e:	f002 fc59 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin( ADR8_Port,ADR8_Pin,a[8] );
 8001072:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8001076:	4868      	ldr	r0, [pc, #416]	; (8001218 <Read_Address+0x224>)
 8001078:	2120      	movs	r1, #32
 800107a:	f002 fc53 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin( ADR9_Port,ADR9_Pin,a[9] );
 800107e:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8001082:	4868      	ldr	r0, [pc, #416]	; (8001224 <Read_Address+0x230>)
 8001084:	2101      	movs	r1, #1
 8001086:	f002 fc4d 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin( ADR10_Port,ADR10_Pin,a[10] );
 800108a:	f89d 201a 	ldrb.w	r2, [sp, #26]
 800108e:	4865      	ldr	r0, [pc, #404]	; (8001224 <Read_Address+0x230>)
 8001090:	2102      	movs	r1, #2
 8001092:	f002 fc47 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin( ADR11_Port,ADR11_Pin,a[11] );
 8001096:	f89d 201b 	ldrb.w	r2, [sp, #27]
 800109a:	4862      	ldr	r0, [pc, #392]	; (8001224 <Read_Address+0x230>)
 800109c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a0:	f002 fc40 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin( ADR12_Port,ADR12_Pin,a[12] );
 80010a4:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80010a8:	485e      	ldr	r0, [pc, #376]	; (8001224 <Read_Address+0x230>)
 80010aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ae:	f002 fc39 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin( ADR13_Port,ADR13_Pin,a[13] );
 80010b2:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80010b6:	485b      	ldr	r0, [pc, #364]	; (8001224 <Read_Address+0x230>)
 80010b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010bc:	f002 fc32 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin( ADR14_Port,ADR14_Pin,a[14] );
 80010c0:	f89d 201e 	ldrb.w	r2, [sp, #30]
 80010c4:	4856      	ldr	r0, [pc, #344]	; (8001220 <Read_Address+0x22c>)
 80010c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ca:	f002 fc2b 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin( ADR15_Port,ADR15_Pin,a[15] );
 80010ce:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80010d2:	4853      	ldr	r0, [pc, #332]	; (8001220 <Read_Address+0x22c>)
 80010d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d8:	f002 fc24 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin( ADR16_Port,ADR16_Pin,a[16] );
 80010dc:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80010e0:	484f      	ldr	r0, [pc, #316]	; (8001220 <Read_Address+0x22c>)
 80010e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e6:	f002 fc1d 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin( ADR17_Port,ADR17_Pin,a[17] );
 80010ea:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 80010ee:	484c      	ldr	r0, [pc, #304]	; (8001220 <Read_Address+0x22c>)
 80010f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f4:	f002 fc16 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin( ADR18_Port,ADR18_Pin,a[18] );
 80010f8:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
 80010fc:	4848      	ldr	r0, [pc, #288]	; (8001220 <Read_Address+0x22c>)
 80010fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001102:	f002 fc0f 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin( ADR19_Port,ADR19_Pin,a[19] );
 8001106:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
 800110a:	4845      	ldr	r0, [pc, #276]	; (8001220 <Read_Address+0x22c>)
 800110c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001110:	f002 fc08 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin( ADR20_Port,ADR20_Pin,a[20] );
 8001114:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 8001118:	4841      	ldr	r0, [pc, #260]	; (8001220 <Read_Address+0x22c>)
 800111a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800111e:	f002 fc01 	bl	8003924 <HAL_GPIO_WritePin>
  d[0] = HAL_GPIO_ReadPin( DAT0_Port,DAT0_Pin );
 8001122:	2104      	movs	r1, #4
 8001124:	483f      	ldr	r0, [pc, #252]	; (8001224 <Read_Address+0x230>)
 8001126:	f002 fbf7 	bl	8003918 <HAL_GPIO_ReadPin>
  d[1] = HAL_GPIO_ReadPin( DAT1_Port,DAT1_Pin );
 800112a:	2180      	movs	r1, #128	; 0x80
  d[0] = HAL_GPIO_ReadPin( DAT0_Port,DAT0_Pin );
 800112c:	f88d 0000 	strb.w	r0, [sp]
  d[1] = HAL_GPIO_ReadPin( DAT1_Port,DAT1_Pin );
 8001130:	483d      	ldr	r0, [pc, #244]	; (8001228 <Read_Address+0x234>)
 8001132:	f002 fbf1 	bl	8003918 <HAL_GPIO_ReadPin>
  d[2] = HAL_GPIO_ReadPin( DAT2_Port,DAT2_Pin );
 8001136:	f44f 7180 	mov.w	r1, #256	; 0x100
  d[1] = HAL_GPIO_ReadPin( DAT1_Port,DAT1_Pin );
 800113a:	f88d 0001 	strb.w	r0, [sp, #1]
  d[2] = HAL_GPIO_ReadPin( DAT2_Port,DAT2_Pin );
 800113e:	483a      	ldr	r0, [pc, #232]	; (8001228 <Read_Address+0x234>)
 8001140:	f002 fbea 	bl	8003918 <HAL_GPIO_ReadPin>
  d[3] = HAL_GPIO_ReadPin( DAT3_Port,DAT3_Pin );
 8001144:	f44f 7100 	mov.w	r1, #512	; 0x200
  d[2] = HAL_GPIO_ReadPin( DAT2_Port,DAT2_Pin );
 8001148:	f88d 0002 	strb.w	r0, [sp, #2]
  d[3] = HAL_GPIO_ReadPin( DAT3_Port,DAT3_Pin );
 800114c:	4836      	ldr	r0, [pc, #216]	; (8001228 <Read_Address+0x234>)
 800114e:	f002 fbe3 	bl	8003918 <HAL_GPIO_ReadPin>
  d[4] = HAL_GPIO_ReadPin( DAT4_Port,DAT4_Pin );
 8001152:	f44f 6180 	mov.w	r1, #1024	; 0x400
  d[3] = HAL_GPIO_ReadPin( DAT3_Port,DAT3_Pin );
 8001156:	f88d 0003 	strb.w	r0, [sp, #3]
  d[4] = HAL_GPIO_ReadPin( DAT4_Port,DAT4_Pin );
 800115a:	4833      	ldr	r0, [pc, #204]	; (8001228 <Read_Address+0x234>)
 800115c:	f002 fbdc 	bl	8003918 <HAL_GPIO_ReadPin>
  d[5] = HAL_GPIO_ReadPin( DAT5_Port,DAT5_Pin );
 8001160:	f44f 6100 	mov.w	r1, #2048	; 0x800
  d[4] = HAL_GPIO_ReadPin( DAT4_Port,DAT4_Pin );
 8001164:	f88d 0004 	strb.w	r0, [sp, #4]
  d[5] = HAL_GPIO_ReadPin( DAT5_Port,DAT5_Pin );
 8001168:	482f      	ldr	r0, [pc, #188]	; (8001228 <Read_Address+0x234>)
 800116a:	f002 fbd5 	bl	8003918 <HAL_GPIO_ReadPin>
  d[6] = HAL_GPIO_ReadPin( DAT6_Port,DAT6_Pin );
 800116e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  d[5] = HAL_GPIO_ReadPin( DAT5_Port,DAT5_Pin );
 8001172:	f88d 0005 	strb.w	r0, [sp, #5]
  d[6] = HAL_GPIO_ReadPin( DAT6_Port,DAT6_Pin );
 8001176:	482c      	ldr	r0, [pc, #176]	; (8001228 <Read_Address+0x234>)
 8001178:	f002 fbce 	bl	8003918 <HAL_GPIO_ReadPin>
  d[7] = HAL_GPIO_ReadPin( DAT7_Port,DAT7_Pin );
 800117c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  d[6] = HAL_GPIO_ReadPin( DAT6_Port,DAT6_Pin );
 8001180:	f88d 0006 	strb.w	r0, [sp, #6]
  d[7] = HAL_GPIO_ReadPin( DAT7_Port,DAT7_Pin );
 8001184:	4828      	ldr	r0, [pc, #160]	; (8001228 <Read_Address+0x234>)
 8001186:	f002 fbc7 	bl	8003918 <HAL_GPIO_ReadPin>
  d[8] = HAL_GPIO_ReadPin( DAT8_Port,DAT8_Pin );
 800118a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  d[7] = HAL_GPIO_ReadPin( DAT7_Port,DAT7_Pin );
 800118e:	f88d 0007 	strb.w	r0, [sp, #7]
  d[8] = HAL_GPIO_ReadPin( DAT8_Port,DAT8_Pin );
 8001192:	4825      	ldr	r0, [pc, #148]	; (8001228 <Read_Address+0x234>)
 8001194:	f002 fbc0 	bl	8003918 <HAL_GPIO_ReadPin>
  d[9] = HAL_GPIO_ReadPin( DAT9_Port,DAT9_Pin );
 8001198:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  d[8] = HAL_GPIO_ReadPin( DAT8_Port,DAT8_Pin );
 800119c:	f88d 0008 	strb.w	r0, [sp, #8]
  d[9] = HAL_GPIO_ReadPin( DAT9_Port,DAT9_Pin );
 80011a0:	4821      	ldr	r0, [pc, #132]	; (8001228 <Read_Address+0x234>)
 80011a2:	f002 fbb9 	bl	8003918 <HAL_GPIO_ReadPin>
  d[10] = HAL_GPIO_ReadPin( DAT10_Port,DAT10_Pin );
 80011a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
  d[9] = HAL_GPIO_ReadPin( DAT9_Port,DAT9_Pin );
 80011aa:	f88d 0009 	strb.w	r0, [sp, #9]
  d[10] = HAL_GPIO_ReadPin( DAT10_Port,DAT10_Pin );
 80011ae:	481d      	ldr	r0, [pc, #116]	; (8001224 <Read_Address+0x230>)
 80011b0:	f002 fbb2 	bl	8003918 <HAL_GPIO_ReadPin>
  d[11] = HAL_GPIO_ReadPin( DAT11_Port,DAT11_Pin );
 80011b4:	2140      	movs	r1, #64	; 0x40
  d[10] = HAL_GPIO_ReadPin( DAT10_Port,DAT10_Pin );
 80011b6:	f88d 000a 	strb.w	r0, [sp, #10]
  d[11] = HAL_GPIO_ReadPin( DAT11_Port,DAT11_Pin );
 80011ba:	4817      	ldr	r0, [pc, #92]	; (8001218 <Read_Address+0x224>)
 80011bc:	f002 fbac 	bl	8003918 <HAL_GPIO_ReadPin>
  d[12] = HAL_GPIO_ReadPin( DAT12_Port,DAT12_Pin );
 80011c0:	2180      	movs	r1, #128	; 0x80
  d[11] = HAL_GPIO_ReadPin( DAT11_Port,DAT11_Pin );
 80011c2:	f88d 000b 	strb.w	r0, [sp, #11]
  d[12] = HAL_GPIO_ReadPin( DAT12_Port,DAT12_Pin );
 80011c6:	4814      	ldr	r0, [pc, #80]	; (8001218 <Read_Address+0x224>)
 80011c8:	f002 fba6 	bl	8003918 <HAL_GPIO_ReadPin>
  d[13] = HAL_GPIO_ReadPin( DAT13_Port,DAT13_Pin );
 80011cc:	f44f 7180 	mov.w	r1, #256	; 0x100
  d[12] = HAL_GPIO_ReadPin( DAT12_Port,DAT12_Pin );
 80011d0:	f88d 000c 	strb.w	r0, [sp, #12]
  d[13] = HAL_GPIO_ReadPin( DAT13_Port,DAT13_Pin );
 80011d4:	4810      	ldr	r0, [pc, #64]	; (8001218 <Read_Address+0x224>)
 80011d6:	f002 fb9f 	bl	8003918 <HAL_GPIO_ReadPin>
  d[14] = HAL_GPIO_ReadPin( DAT14_Port,DAT14_Pin );
 80011da:	f44f 7100 	mov.w	r1, #512	; 0x200
  d[13] = HAL_GPIO_ReadPin( DAT13_Port,DAT13_Pin );
 80011de:	f88d 000d 	strb.w	r0, [sp, #13]
  d[14] = HAL_GPIO_ReadPin( DAT14_Port,DAT14_Pin );
 80011e2:	480d      	ldr	r0, [pc, #52]	; (8001218 <Read_Address+0x224>)
 80011e4:	f002 fb98 	bl	8003918 <HAL_GPIO_ReadPin>
  d[15] = HAL_GPIO_ReadPin( DAT15_Port,DAT15_Pin );
 80011e8:	f44f 7180 	mov.w	r1, #256	; 0x100
  d[14] = HAL_GPIO_ReadPin( DAT14_Port,DAT14_Pin );
 80011ec:	f88d 000e 	strb.w	r0, [sp, #14]
  d[15] = HAL_GPIO_ReadPin( DAT15_Port,DAT15_Pin );
 80011f0:	480a      	ldr	r0, [pc, #40]	; (800121c <Read_Address+0x228>)
 80011f2:	f002 fb91 	bl	8003918 <HAL_GPIO_ReadPin>
 80011f6:	2200      	movs	r2, #0
 80011f8:	f88d 000f 	strb.w	r0, [sp, #15]
 80011fc:	4613      	mov	r3, r2
 80011fe:	4668      	mov	r0, sp
    *word += d[i]<<i;
 8001200:	f810 1b01 	ldrb.w	r1, [r0], #1
 8001204:	4091      	lsls	r1, r2
 8001206:	3201      	adds	r2, #1
 8001208:	440b      	add	r3, r1
  for(uint8_t i=0; i<16; i++)
 800120a:	2a10      	cmp	r2, #16
    *word += d[i]<<i;
 800120c:	b29b      	uxth	r3, r3
  for(uint8_t i=0; i<16; i++)
 800120e:	d1f7      	bne.n	8001200 <Read_Address+0x20c>
 8001210:	8023      	strh	r3, [r4, #0]
}
 8001212:	b00a      	add	sp, #40	; 0x28
 8001214:	bd10      	pop	{r4, pc}
 8001216:	bf00      	nop
 8001218:	40020800 	.word	0x40020800
 800121c:	40020000 	.word	0x40020000
 8001220:	40020c00 	.word	0x40020c00
 8001224:	40020400 	.word	0x40020400
 8001228:	40021000 	.word	0x40021000

0800122c <main>:
{
 800122c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122e:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001230:	2400      	movs	r4, #0
  HAL_Init();
 8001232:	f002 f861 	bl	80032f8 <HAL_Init>
  SystemClock_Config();
 8001236:	f7ff fe85 	bl	8000f44 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <main+0x1a4>)
 800123c:	9401      	str	r4, [sp, #4]
 800123e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8001240:	4864      	ldr	r0, [pc, #400]	; (80013d4 <main+0x1a8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	f042 0204 	orr.w	r2, r2, #4
 8001246:	631a      	str	r2, [r3, #48]	; 0x30
 8001248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800124a:	f002 0204 	and.w	r2, r2, #4
 800124e:	9201      	str	r2, [sp, #4]
 8001250:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001252:	9402      	str	r4, [sp, #8]
 8001254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001256:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800125a:	631a      	str	r2, [r3, #48]	; 0x30
 800125c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800125e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001262:	9202      	str	r2, [sp, #8]
 8001264:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	9403      	str	r4, [sp, #12]
 8001268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800126a:	f042 0201 	orr.w	r2, r2, #1
 800126e:	631a      	str	r2, [r3, #48]	; 0x30
 8001270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001272:	f002 0201 	and.w	r2, r2, #1
 8001276:	9203      	str	r2, [sp, #12]
 8001278:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	9404      	str	r4, [sp, #16]
 800127c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800127e:	f042 0202 	orr.w	r2, r2, #2
 8001282:	631a      	str	r2, [r3, #48]	; 0x30
 8001284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001286:	f002 0202 	and.w	r2, r2, #2
 800128a:	9204      	str	r2, [sp, #16]
 800128c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800128e:	9405      	str	r4, [sp, #20]
 8001290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001292:	f042 0210 	orr.w	r2, r2, #16
 8001296:	631a      	str	r2, [r3, #48]	; 0x30
 8001298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800129a:	f002 0210 	and.w	r2, r2, #16
 800129e:	9205      	str	r2, [sp, #20]
 80012a0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a2:	9406      	str	r4, [sp, #24]
 80012a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012a6:	f042 0208 	orr.w	r2, r2, #8
 80012aa:	631a      	str	r2, [r3, #48]	; 0x30
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 80012b4:	4622      	mov	r2, r4
 80012b6:	213e      	movs	r1, #62	; 0x3e
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b8:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 80012ba:	f002 fb33 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80012be:	4622      	mov	r2, r4
 80012c0:	21f0      	movs	r1, #240	; 0xf0
 80012c2:	4845      	ldr	r0, [pc, #276]	; (80013d8 <main+0x1ac>)
 80012c4:	f002 fb2e 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14 
 80012c8:	4622      	mov	r2, r4
 80012ca:	f24e 0103 	movw	r1, #57347	; 0xe003
 80012ce:	4843      	ldr	r0, [pc, #268]	; (80013dc <main+0x1b0>)
 80012d0:	f002 fb28 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80012d4:	4622      	mov	r2, r4
 80012d6:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80012da:	4841      	ldr	r0, [pc, #260]	; (80013e0 <main+0x1b4>)
 80012dc:	f002 fb22 	bl	8003924 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012e0:	2502      	movs	r5, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2601      	movs	r6, #1
 80012e4:	233e      	movs	r3, #62	; 0x3e
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e6:	a907      	add	r1, sp, #28
 80012e8:	483a      	ldr	r0, [pc, #232]	; (80013d4 <main+0x1a8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f2:	f002 f9d3 	bl	800369c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012f6:	4b3b      	ldr	r3, [pc, #236]	; (80013e4 <main+0x1b8>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012f8:	4837      	ldr	r0, [pc, #220]	; (80013d8 <main+0x1ac>)
  GPIO_InitStruct.Pin = B1_Pin;
 80012fa:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012fc:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	e9cd 3408 	strd	r3, r4, [sp, #32]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001302:	f002 f9cb 	bl	800369c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001306:	23f0      	movs	r3, #240	; 0xf0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	a907      	add	r1, sp, #28
 800130a:	4833      	ldr	r0, [pc, #204]	; (80013d8 <main+0x1ac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f002 f9c2 	bl	800369c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14 
 8001318:	f24e 0303 	movw	r3, #57347	; 0xe003
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	a907      	add	r1, sp, #28
 800131e:	482f      	ldr	r0, [pc, #188]	; (80013dc <main+0x1b0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001328:	f002 f9b8 	bl	800369c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 800132c:	f240 4304 	movw	r3, #1028	; 0x404
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	a907      	add	r1, sp, #28
 8001332:	482a      	ldr	r0, [pc, #168]	; (80013dc <main+0x1b0>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001334:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001336:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133a:	f002 f9af 	bl	800369c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800133e:	f64f 7380 	movw	r3, #65408	; 0xff80
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001342:	a907      	add	r1, sp, #28
 8001344:	4828      	ldr	r0, [pc, #160]	; (80013e8 <main+0x1bc>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001346:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001348:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800134c:	f002 f9a6 	bl	800369c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001350:	f44f 437f 	mov.w	r3, #65280	; 0xff00
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001354:	a907      	add	r1, sp, #28
 8001356:	4822      	ldr	r0, [pc, #136]	; (80013e0 <main+0x1b4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001360:	f002 f99c 	bl	800369c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001364:	f44f 7370 	mov.w	r3, #960	; 0x3c0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001368:	a907      	add	r1, sp, #28
 800136a:	481a      	ldr	r0, [pc, #104]	; (80013d4 <main+0x1a8>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800136c:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136e:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001372:	f002 f993 	bl	800369c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001376:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	a907      	add	r1, sp, #28
 800137c:	4816      	ldr	r0, [pc, #88]	; (80013d8 <main+0x1ac>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800137e:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001380:	e9cd 3407 	strd	r3, r4, [sp, #28]
    if(circbuf_get_status(circular_buffer_1) != CIRCBUF_STATUS_EMPTY)
 8001384:	4d19      	ldr	r5, [pc, #100]	; (80013ec <main+0x1c0>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f002 f989 	bl	800369c <HAL_GPIO_Init>
  MX_USB_DEVICE_Init();
 800138a:	f000 f83f 	bl	800140c <MX_USB_DEVICE_Init>
 800138e:	462e      	mov	r6, r5
    if(circbuf_get_status(circular_buffer_1) != CIRCBUF_STATUS_EMPTY)
 8001390:	6828      	ldr	r0, [r5, #0]
 8001392:	f000 f8ec 	bl	800156e <circbuf_get_status>
 8001396:	2802      	cmp	r0, #2
 8001398:	d0fa      	beq.n	8001390 <main+0x164>
      for(uint32_t i=0; i<0xFFFF; i++)
 800139a:	2400      	movs	r4, #0
 800139c:	f64f 77ff 	movw	r7, #65535	; 0xffff
        Read_Address(i,&word.w);
 80013a0:	4620      	mov	r0, r4
 80013a2:	a907      	add	r1, sp, #28
 80013a4:	f7ff fe26 	bl	8000ff4 <Read_Address>
        CDC_Transmit_FS(word.b,2);
 80013a8:	2102      	movs	r1, #2
 80013aa:	a807      	add	r0, sp, #28
 80013ac:	f7fe ff7c 	bl	80002a8 <CDC_Transmit_FS>
      for(uint32_t i=0; i<0xFFFF; i++)
 80013b0:	3401      	adds	r4, #1
        HAL_Delay(1); // Try to give UART time to breathe
 80013b2:	2001      	movs	r0, #1
 80013b4:	f001 ffc8 	bl	8003348 <HAL_Delay>
      for(uint32_t i=0; i<0xFFFF; i++)
 80013b8:	42bc      	cmp	r4, r7
 80013ba:	d1f1      	bne.n	80013a0 <main+0x174>
      while(circbuf_get_status(circular_buffer_1) != CIRCBUF_STATUS_EMPTY)
 80013bc:	6830      	ldr	r0, [r6, #0]
 80013be:	f000 f8d6 	bl	800156e <circbuf_get_status>
 80013c2:	2802      	cmp	r0, #2
 80013c4:	d0e4      	beq.n	8001390 <main+0x164>
        circbuf_pop(circular_buffer_1,NULL);
 80013c6:	2100      	movs	r1, #0
 80013c8:	6830      	ldr	r0, [r6, #0]
 80013ca:	f000 f8b7 	bl	800153c <circbuf_pop>
 80013ce:	e7f5      	b.n	80013bc <main+0x190>
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020800 	.word	0x40020800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020400 	.word	0x40020400
 80013e0:	40020c00 	.word	0x40020c00
 80013e4:	10120000 	.word	0x10120000
 80013e8:	40021000 	.word	0x40021000
 80013ec:	20000154 	.word	0x20000154

080013f0 <Error_Handler>:
  }
 80013f0:	e7fe      	b.n	80013f0 <Error_Handler>

080013f2 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80013f2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f4:	f001 ff9a 	bl	800332c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80013fc:	f002 bd31 	b.w	8003e62 <HAL_SYSTICK_IRQHandler>

08001400 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001400:	4801      	ldr	r0, [pc, #4]	; (8001408 <OTG_FS_IRQHandler+0x8>)
 8001402:	f000 b9ef 	b.w	80017e4 <HAL_PCD_IRQHandler>
 8001406:	bf00      	nop
 8001408:	200001a8 	.word	0x200001a8

0800140c <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 800140c:	b510      	push	{r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800140e:	4c09      	ldr	r4, [pc, #36]	; (8001434 <MX_USB_DEVICE_Init+0x28>)
 8001410:	4909      	ldr	r1, [pc, #36]	; (8001438 <MX_USB_DEVICE_Init+0x2c>)
 8001412:	2200      	movs	r2, #0
 8001414:	4620      	mov	r0, r4
 8001416:	f7ff f8ef 	bl	80005f8 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 800141a:	4908      	ldr	r1, [pc, #32]	; (800143c <MX_USB_DEVICE_Init+0x30>)
 800141c:	4620      	mov	r0, r4
 800141e:	f7ff f912 	bl	8000646 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8001422:	4620      	mov	r0, r4
 8001424:	4906      	ldr	r1, [pc, #24]	; (8001440 <MX_USB_DEVICE_Init+0x34>)
 8001426:	f7ff fd4a 	bl	8000ebe <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 800142a:	4620      	mov	r0, r4

}
 800142c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8001430:	f7ff b910 	b.w	8000654 <USBD_Start>
 8001434:	20000598 	.word	0x20000598
 8001438:	20000120 	.word	0x20000120
 800143c:	20000010 	.word	0x20000010
 8001440:	20000000 	.word	0x20000000

08001444 <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8001444:	2312      	movs	r3, #18
 8001446:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8001448:	4800      	ldr	r0, [pc, #0]	; (800144c <USBD_FS_DeviceDescriptor+0x8>)
 800144a:	4770      	bx	lr
 800144c:	2000013c 	.word	0x2000013c

08001450 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8001450:	2304      	movs	r3, #4
 8001452:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8001454:	4800      	ldr	r0, [pc, #0]	; (8001458 <USBD_FS_LangIDStrDescriptor+0x8>)
 8001456:	4770      	bx	lr
 8001458:	20000150 	.word	0x20000150

0800145c <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800145c:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800145e:	4c04      	ldr	r4, [pc, #16]	; (8001470 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8001462:	460a      	mov	r2, r1
 8001464:	4621      	mov	r1, r4
 8001466:	f7ff fbf8 	bl	8000c5a <USBD_GetString>
  return USBD_StrDesc;
}
 800146a:	4620      	mov	r0, r4
 800146c:	bd10      	pop	{r4, pc}
 800146e:	bf00      	nop
 8001470:	200007bc 	.word	0x200007bc
 8001474:	080060ed 	.word	0x080060ed

08001478 <USBD_FS_ProductStrDescriptor>:
{
 8001478:	b510      	push	{r4, lr}
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800147a:	4c04      	ldr	r4, [pc, #16]	; (800148c <USBD_FS_ProductStrDescriptor+0x14>)
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <USBD_FS_ProductStrDescriptor+0x18>)
 800147e:	460a      	mov	r2, r1
 8001480:	4621      	mov	r1, r4
 8001482:	f7ff fbea 	bl	8000c5a <USBD_GetString>
}
 8001486:	4620      	mov	r0, r4
 8001488:	bd10      	pop	{r4, pc}
 800148a:	bf00      	nop
 800148c:	200007bc 	.word	0x200007bc
 8001490:	08006100 	.word	0x08006100

08001494 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8001494:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8001496:	4c04      	ldr	r4, [pc, #16]	; (80014a8 <USBD_FS_SerialStrDescriptor+0x14>)
 8001498:	4804      	ldr	r0, [pc, #16]	; (80014ac <USBD_FS_SerialStrDescriptor+0x18>)
 800149a:	460a      	mov	r2, r1
 800149c:	4621      	mov	r1, r4
 800149e:	f7ff fbdc 	bl	8000c5a <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 80014a2:	4620      	mov	r0, r4
 80014a4:	bd10      	pop	{r4, pc}
 80014a6:	bf00      	nop
 80014a8:	200007bc 	.word	0x200007bc
 80014ac:	08006116 	.word	0x08006116

080014b0 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80014b0:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80014b2:	4c04      	ldr	r4, [pc, #16]	; (80014c4 <USBD_FS_ConfigStrDescriptor+0x14>)
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <USBD_FS_ConfigStrDescriptor+0x18>)
 80014b6:	460a      	mov	r2, r1
 80014b8:	4621      	mov	r1, r4
 80014ba:	f7ff fbce 	bl	8000c5a <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 80014be:	4620      	mov	r0, r4
 80014c0:	bd10      	pop	{r4, pc}
 80014c2:	bf00      	nop
 80014c4:	200007bc 	.word	0x200007bc
 80014c8:	080060d4 	.word	0x080060d4

080014cc <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80014cc:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80014ce:	4c04      	ldr	r4, [pc, #16]	; (80014e0 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80014d2:	460a      	mov	r2, r1
 80014d4:	4621      	mov	r1, r4
 80014d6:	f7ff fbc0 	bl	8000c5a <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 80014da:	4620      	mov	r0, r4
 80014dc:	bd10      	pop	{r4, pc}
 80014de:	bf00      	nop
 80014e0:	200007bc 	.word	0x200007bc
 80014e4:	080060df 	.word	0x080060df

080014e8 <circbuf_reset>:
}

void circbuf_reset(circbuf_handler cb)
{
    uint32_t i;
    for(i=0;i<cb->capacity;i++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	461a      	mov	r2, r3
 80014ec:	6881      	ldr	r1, [r0, #8]
 80014ee:	4299      	cmp	r1, r3
 80014f0:	d802      	bhi.n	80014f8 <circbuf_reset+0x10>
        cb->data[i] = 0;
    cb->head = 0;
    cb->tail = 0;
 80014f2:	e9c0 2200 	strd	r2, r2, [r0]
}
 80014f6:	4770      	bx	lr
        cb->data[i] = 0;
 80014f8:	6901      	ldr	r1, [r0, #16]
 80014fa:	54ca      	strb	r2, [r1, r3]
    for(i=0;i<cb->capacity;i++)
 80014fc:	3301      	adds	r3, #1
 80014fe:	e7f5      	b.n	80014ec <circbuf_reset+0x4>

08001500 <init_circbuf>:
    cb->data = buf;
 8001500:	6101      	str	r1, [r0, #16]
    cb->capacity = (uint32_t)size;
 8001502:	6082      	str	r2, [r0, #8]
    circbuf_reset(cb);
 8001504:	f7ff bff0 	b.w	80014e8 <circbuf_reset>

08001508 <circbuf_push>:

circbuf_status circbuf_push(circbuf_handler cb, uint8_t wbyte)
{
 8001508:	b570      	push	{r4, r5, r6, lr}
 800150a:	4603      	mov	r3, r0
    // Need to determine whether or not the next space is available, 
    // updating if we go over the capacity
    uint32_t next_head = (cb->head+1) % cb->capacity;
    if(cb->full)
 800150c:	7b00      	ldrb	r0, [r0, #12]
 800150e:	b998      	cbnz	r0, 8001538 <circbuf_push+0x30>
    uint32_t next_head = (cb->head+1) % cb->capacity;
 8001510:	681c      	ldr	r4, [r3, #0]
 8001512:	689d      	ldr	r5, [r3, #8]
 8001514:	1c66      	adds	r6, r4, #1
 8001516:	fbb6 f2f5 	udiv	r2, r6, r5
 800151a:	fb05 6212 	mls	r2, r5, r2, r6
    {
        return CIRCBUF_STATUS_FULL;
    }
    else if(next_head == cb->tail)
 800151e:	685e      	ldr	r6, [r3, #4]
 8001520:	691d      	ldr	r5, [r3, #16]
 8001522:	4296      	cmp	r6, r2
    { // If we're going to overlap the tail next step (overflow)
        cb->full = 1;
 8001524:	bf05      	ittet	eq
 8001526:	2201      	moveq	r2, #1
 8001528:	731a      	strbeq	r2, [r3, #12]
        return CIRCBUF_STATUS_WARN;
    }
    else
    { // We aren't overlapping the tail (no overflow condition)
        cb->full = 0;
        cb->data[cb->head] = wbyte;
 800152a:	5529      	strbne	r1, [r5, r4]
        cb->data[cb->head] = wbyte;
 800152c:	5529      	strbeq	r1, [r5, r4]
        return CIRCBUF_STATUS_WARN;
 800152e:	bf06      	itte	eq
 8001530:	2003      	moveq	r0, #3
        cb->head = next_head;
 8001532:	601e      	streq	r6, [r3, #0]
        cb->head = next_head;
 8001534:	601a      	strne	r2, [r3, #0]
        return CIRCBUF_STATUS_OK;
    }
}
 8001536:	bd70      	pop	{r4, r5, r6, pc}
        return CIRCBUF_STATUS_FULL;
 8001538:	2001      	movs	r0, #1
 800153a:	e7fc      	b.n	8001536 <circbuf_push+0x2e>

0800153c <circbuf_pop>:

circbuf_status circbuf_pop(circbuf_handler cb, uint8_t* rbyte)
{
 800153c:	b530      	push	{r4, r5, lr}
 800153e:	4603      	mov	r3, r0
    uint32_t next_tail = (cb->tail+1) % cb->capacity;
 8001540:	6840      	ldr	r0, [r0, #4]
 8001542:	689c      	ldr	r4, [r3, #8]
 8001544:	1c45      	adds	r5, r0, #1
 8001546:	fbb5 f2f4 	udiv	r2, r5, r4
 800154a:	fb04 5212 	mls	r2, r4, r2, r5
    if(cb->tail == cb->head && !cb->full)
 800154e:	681c      	ldr	r4, [r3, #0]
 8001550:	42a0      	cmp	r0, r4
 8001552:	d101      	bne.n	8001558 <circbuf_pop+0x1c>
 8001554:	7b1c      	ldrb	r4, [r3, #12]
 8001556:	b144      	cbz	r4, 800156a <circbuf_pop+0x2e>
    { // Tail is caught up to head (empty condition)
        return CIRCBUF_STATUS_EMPTY;
    }
    else
    {
        *rbyte = cb->data[cb->tail];
 8001558:	691c      	ldr	r4, [r3, #16]
 800155a:	5c20      	ldrb	r0, [r4, r0]
 800155c:	7008      	strb	r0, [r1, #0]
        cb->tail = next_tail;
        if(cb->full)
 800155e:	7b18      	ldrb	r0, [r3, #12]
        cb->tail = next_tail;
 8001560:	605a      	str	r2, [r3, #4]
        if(cb->full)
 8001562:	b108      	cbz	r0, 8001568 <circbuf_pop+0x2c>
        {
            cb->full = 0;
 8001564:	2000      	movs	r0, #0
 8001566:	7318      	strb	r0, [r3, #12]
        }
        return CIRCBUF_STATUS_OK;
    }
}
 8001568:	bd30      	pop	{r4, r5, pc}
        return CIRCBUF_STATUS_EMPTY;
 800156a:	2002      	movs	r0, #2
 800156c:	e7fc      	b.n	8001568 <circbuf_pop+0x2c>

0800156e <circbuf_get_status>:

circbuf_status circbuf_get_status(circbuf_handler cb)
{
    if(cb->full)
 800156e:	7b03      	ldrb	r3, [r0, #12]
 8001570:	b933      	cbnz	r3, 8001580 <circbuf_get_status+0x12>
    {
        return CIRCBUF_STATUS_FULL; 
    }
    else if( cb->head == cb->tail )
 8001572:	e9d0 1200 	ldrd	r1, r2, [r0]
    {
        return CIRCBUF_STATUS_EMPTY;
 8001576:	4291      	cmp	r1, r2
 8001578:	bf08      	it	eq
 800157a:	2302      	moveq	r3, #2
    }
    else
    {
        return CIRCBUF_STATUS_OK;
    }
}
 800157c:	4618      	mov	r0, r3
 800157e:	4770      	bx	lr
        return CIRCBUF_STATUS_FULL; 
 8001580:	2301      	movs	r3, #1
 8001582:	e7fb      	b.n	800157c <circbuf_get_status+0xe>

08001584 <circbuf_get_capacity>:

uint32_t circbuf_get_capacity(circbuf_handler cb)
{
    return cb->capacity;
}
 8001584:	6880      	ldr	r0, [r0, #8]
 8001586:	4770      	bx	lr

08001588 <circbuf_get_free_space>:

uint32_t circbuf_get_free_space(circbuf_handler cb)
{
    // head can lead tail, tail can't lead head. If head > tail, take 
    // capacity - separation; if head < tail, take separation
    if(cb->full)
 8001588:	7b03      	ldrb	r3, [r0, #12]
 800158a:	b96b      	cbnz	r3, 80015a8 <circbuf_get_free_space+0x20>
    {
        return 0;
    }
    else if(cb->tail == cb->head)
 800158c:	e9d0 1200 	ldrd	r1, r2, [r0]
 8001590:	428a      	cmp	r2, r1
 8001592:	d101      	bne.n	8001598 <circbuf_get_free_space+0x10>
    {
        return cb->capacity;
 8001594:	6880      	ldr	r0, [r0, #8]
 8001596:	4770      	bx	lr
    }
    else if(cb->head > cb->tail)
 8001598:	d203      	bcs.n	80015a2 <circbuf_get_free_space+0x1a>
    {
        return ( cb->capacity - (cb->head - cb->tail) );
 800159a:	6880      	ldr	r0, [r0, #8]
 800159c:	4410      	add	r0, r2
 800159e:	1a40      	subs	r0, r0, r1
 80015a0:	4770      	bx	lr
    }
    else if(cb->head < cb->tail)
 80015a2:	d901      	bls.n	80015a8 <circbuf_get_free_space+0x20>
    {
        return (cb->tail - cb->head);
 80015a4:	1a50      	subs	r0, r2, r1
 80015a6:	4770      	bx	lr
        return 0;
 80015a8:	2000      	movs	r0, #0
 80015aa:	4770      	bx	lr

080015ac <circbuf_get_size>:

    return 0; // Default
}

uint32_t circbuf_get_size(circbuf_handler cb)
{
 80015ac:	b510      	push	{r4, lr}
 80015ae:	4604      	mov	r4, r0
    return cb->capacity - circbuf_get_free_space(cb);
 80015b0:	f7ff ffea 	bl	8001588 <circbuf_get_free_space>
 80015b4:	68a3      	ldr	r3, [r4, #8]
}
 80015b6:	1a18      	subs	r0, r3, r0
 80015b8:	bd10      	pop	{r4, pc}
	...

080015bc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015bc:	490f      	ldr	r1, [pc, #60]	; (80015fc <SystemInit+0x40>)
 80015be:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80015c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <SystemInit+0x44>)
 80015cc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015ce:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80015d0:	f042 0201 	orr.w	r2, r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80015d6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80015de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015e2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80015e4:	4a07      	ldr	r2, [pc, #28]	; (8001604 <SystemInit+0x48>)
 80015e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015ee:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80015f0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80015f6:	608b      	str	r3, [r1, #8]
#endif
}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00
 8001600:	40023800 	.word	0x40023800
 8001604:	24003010 	.word	0x24003010

08001608 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001608:	b510      	push	{r4, lr}
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800160a:	4a17      	ldr	r2, [pc, #92]	; (8001668 <SystemCoreClockUpdate+0x60>)
 800160c:	4917      	ldr	r1, [pc, #92]	; (800166c <SystemCoreClockUpdate+0x64>)
 800160e:	6893      	ldr	r3, [r2, #8]
 8001610:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8001614:	2b04      	cmp	r3, #4
 8001616:	d00d      	beq.n	8001634 <SystemCoreClockUpdate+0x2c>
 8001618:	2b08      	cmp	r3, #8
 800161a:	d00d      	beq.n	8001638 <SystemCoreClockUpdate+0x30>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <SystemCoreClockUpdate+0x68>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
 800161e:	600b      	str	r3, [r1, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <SystemCoreClockUpdate+0x60>)
 8001622:	4a14      	ldr	r2, [pc, #80]	; (8001674 <SystemCoreClockUpdate+0x6c>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800162a:	5cd2      	ldrb	r2, [r2, r3]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800162c:	680b      	ldr	r3, [r1, #0]
 800162e:	40d3      	lsrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
}
 8001632:	bd10      	pop	{r4, pc}
      SystemCoreClock = HSE_VALUE;
 8001634:	4b10      	ldr	r3, [pc, #64]	; (8001678 <SystemCoreClockUpdate+0x70>)
 8001636:	e7f2      	b.n	800161e <SystemCoreClockUpdate+0x16>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001638:	6854      	ldr	r4, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800163a:	6850      	ldr	r0, [r2, #4]
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800163c:	6852      	ldr	r2, [r2, #4]
      if (pllsource != 0)
 800163e:	0263      	lsls	r3, r4, #9
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001640:	f3c2 1288 	ubfx	r2, r2, #6, #9
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001644:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001648:	bf4c      	ite	mi
 800164a:	4b0b      	ldrmi	r3, [pc, #44]	; (8001678 <SystemCoreClockUpdate+0x70>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800164c:	4b08      	ldrpl	r3, [pc, #32]	; (8001670 <SystemCoreClockUpdate+0x68>)
 800164e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001652:	4353      	muls	r3, r2
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <SystemCoreClockUpdate+0x60>)
 8001656:	6852      	ldr	r2, [r2, #4]
 8001658:	f3c2 4201 	ubfx	r2, r2, #16, #2
 800165c:	3201      	adds	r2, #1
 800165e:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
 8001660:	fbb3 f3f2 	udiv	r3, r3, r2
 8001664:	e7db      	b.n	800161e <SystemCoreClockUpdate+0x16>
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	20000158 	.word	0x20000158
 8001670:	00f42400 	.word	0x00f42400
 8001674:	08006123 	.word	0x08006123
 8001678:	007a1200 	.word	0x007a1200
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_MspInit could be implemented in the user file
   */
}
 800167c:	4770      	bx	lr

0800167e <HAL_PCD_Init>:
{ 
 800167e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hpcd == NULL)
 8001680:	4606      	mov	r6, r0
{ 
 8001682:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 8001684:	2800      	cmp	r0, #0
 8001686:	d061      	beq.n	800174c <HAL_PCD_Init+0xce>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001688:	2303      	movs	r3, #3
 __HAL_PCD_DISABLE(hpcd);
 800168a:	4634      	mov	r4, r6
  hpcd->State = HAL_PCD_STATE_BUSY;
 800168c:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 8001690:	f7fe fe26 	bl	80002e0 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 8001694:	f854 0b10 	ldr.w	r0, [r4], #16
 8001698:	f000 ffe4 	bl	8002664 <USB_DisableGlobalInt>
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 800169c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800169e:	466d      	mov	r5, sp
 80016a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80016ae:	1d37      	adds	r7, r6, #4
 80016b0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80016b4:	6830      	ldr	r0, [r6, #0]
 80016b6:	f000 ff95 	bl	80025e4 <USB_CoreInit>
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 80016ba:	2100      	movs	r1, #0
 80016bc:	6830      	ldr	r0, [r6, #0]
 80016be:	f000 ffd7 	bl	8002670 <USB_SetCurrentMode>
 for (i = 0U; i < 15U; i++)
 80016c2:	2100      	movs	r1, #0
 80016c4:	4633      	mov	r3, r6
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 80016c6:	4632      	mov	r2, r6
 80016c8:	f106 0410 	add.w	r4, r6, #16
   hpcd->IN_ep[i].is_in = 1U;
 80016cc:	2501      	movs	r5, #1
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016ce:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 80016d0:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 80016d4:	87d1      	strh	r1, [r2, #62]	; 0x3e
 for (i = 0U; i < 15U; i++)
 80016d6:	3101      	adds	r1, #1
 80016d8:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].is_in = 1U;
 80016da:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016de:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].xfer_buff = 0U;
 80016e2:	e9c2 0010 	strd	r0, r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_len = 0U;
 80016e6:	64d0      	str	r0, [r2, #76]	; 0x4c
 80016e8:	f102 021c 	add.w	r2, r2, #28
 for (i = 0U; i < 15U; i++)
 80016ec:	d1f0      	bne.n	80016d0 <HAL_PCD_Init+0x52>
 for (i = 0U; i < 15U; i++)
 80016ee:	2200      	movs	r2, #0
   hpcd->OUT_ep[i].is_in = 0U;
 80016f0:	4611      	mov	r1, r2
   hpcd->OUT_ep[i].xfer_buff = 0U;
 80016f2:	e9c3 1180 	strd	r1, r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].num = i;
 80016f6:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 80016fa:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->OUT_ep[i].is_in = 0U;
 80016fc:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001700:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].xfer_len = 0U;
 8001704:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   hpcd->Instance->DIEPTXF[i] = 0U;
 8001708:	6830      	ldr	r0, [r6, #0]
 800170a:	f102 0540 	add.w	r5, r2, #64	; 0x40
 800170e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 for (i = 0U; i < 15U; i++)
 8001712:	3201      	adds	r2, #1
 8001714:	2a0f      	cmp	r2, #15
   hpcd->Instance->DIEPTXF[i] = 0U;
 8001716:	6041      	str	r1, [r0, #4]
 8001718:	f103 031c 	add.w	r3, r3, #28
 for (i = 0U; i < 15U; i++)
 800171c:	d1e9      	bne.n	80016f2 <HAL_PCD_Init+0x74>
 USB_DevInit(hpcd->Instance, hpcd->Init);
 800171e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001720:	466d      	mov	r5, sp
 8001722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001728:	e894 0003 	ldmia.w	r4, {r0, r1}
 800172c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001730:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001734:	6830      	ldr	r0, [r6, #0]
 8001736:	f000 ffdd 	bl	80026f4 <USB_DevInit>
 hpcd->State= HAL_PCD_STATE_READY;
 800173a:	2301      	movs	r3, #1
 800173c:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9
 USB_DevDisconnect (hpcd->Instance);  
 8001740:	6830      	ldr	r0, [r6, #0]
 8001742:	f001 fbdd 	bl	8002f00 <USB_DevDisconnect>
 return HAL_OK;
 8001746:	2000      	movs	r0, #0
}
 8001748:	b00b      	add	sp, #44	; 0x2c
 800174a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800174c:	2001      	movs	r0, #1
 800174e:	e7fb      	b.n	8001748 <HAL_PCD_Init+0xca>
 8001750:	4770      	bx	lr

08001752 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8001752:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 8001754:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8001758:	2b01      	cmp	r3, #1
{ 
 800175a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 800175c:	d00c      	beq.n	8001778 <HAL_PCD_Start+0x26>
 800175e:	2301      	movs	r3, #1
 8001760:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8001764:	6800      	ldr	r0, [r0, #0]
 8001766:	f001 fbbf 	bl	8002ee8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800176a:	6820      	ldr	r0, [r4, #0]
 800176c:	f000 ff74 	bl	8002658 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8001770:	2000      	movs	r0, #0
 8001772:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
}
 8001776:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8001778:	2002      	movs	r0, #2
 800177a:	e7fc      	b.n	8001776 <HAL_PCD_Start+0x24>

0800177c <HAL_PCD_Stop>:
  * @brief  Stop The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{ 
 800177c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 800177e:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8001782:	2b01      	cmp	r3, #1
{ 
 8001784:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8001786:	d00f      	beq.n	80017a8 <HAL_PCD_Stop+0x2c>
 8001788:	2301      	movs	r3, #1
 800178a:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  __HAL_PCD_DISABLE(hpcd);
 800178e:	6800      	ldr	r0, [r0, #0]
 8001790:	f000 ff68 	bl	8002664 <USB_DisableGlobalInt>
  USB_StopDevice(hpcd->Instance);
 8001794:	6820      	ldr	r0, [r4, #0]
 8001796:	f001 fb76 	bl	8002e86 <USB_StopDevice>
  USB_DevDisconnect(hpcd->Instance);
 800179a:	6820      	ldr	r0, [r4, #0]
 800179c:	f001 fbb0 	bl	8002f00 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd); 
 80017a0:	2000      	movs	r0, #0
 80017a2:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
}
 80017a6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 80017a8:	2002      	movs	r0, #2
 80017aa:	e7fc      	b.n	80017a6 <HAL_PCD_Stop+0x2a>

080017ac <HAL_PCD_DeInit>:
{
 80017ac:	b510      	push	{r4, lr}
  if(hpcd == NULL)
 80017ae:	4604      	mov	r4, r0
 80017b0:	b158      	cbz	r0, 80017ca <HAL_PCD_DeInit+0x1e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80017b2:	2303      	movs	r3, #3
 80017b4:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_Stop(hpcd);
 80017b8:	f7ff ffe0 	bl	800177c <HAL_PCD_Stop>
  HAL_PCD_MspDeInit(hpcd);
 80017bc:	4620      	mov	r0, r4
 80017be:	f7fe fdc1 	bl	8000344 <HAL_PCD_MspDeInit>
  hpcd->State = HAL_PCD_STATE_RESET; 
 80017c2:	2000      	movs	r0, #0
 80017c4:	f884 03b9 	strb.w	r0, [r4, #953]	; 0x3b9
}
 80017c8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017ca:	2001      	movs	r0, #1
 80017cc:	e7fc      	b.n	80017c8 <HAL_PCD_DeInit+0x1c>
  UNUSED(hpcd);
  UNUSED(epnum);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */ 
}
 80017ce:	4770      	bx	lr
 80017d0:	4770      	bx	lr
 80017d2:	4770      	bx	lr
 80017d4:	4770      	bx	lr
 80017d6:	4770      	bx	lr
 80017d8:	4770      	bx	lr
 80017da:	4770      	bx	lr
 80017dc:	4770      	bx	lr
 80017de:	4770      	bx	lr
 80017e0:	4770      	bx	lr
 80017e2:	4770      	bx	lr

080017e4 <HAL_PCD_IRQHandler>:
{
 80017e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017e8:	f8d0 9000 	ldr.w	r9, [r0]
{
 80017ec:	b087      	sub	sp, #28
 80017ee:	4604      	mov	r4, r0
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017f0:	4648      	mov	r0, r9
 80017f2:	f001 fbc3 	bl	8002f7c <USB_GetMode>
 80017f6:	9002      	str	r0, [sp, #8]
 80017f8:	2800      	cmp	r0, #0
 80017fa:	f040 812f 	bne.w	8001a5c <HAL_PCD_IRQHandler+0x278>
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 80017fe:	6820      	ldr	r0, [r4, #0]
 8001800:	f001 fb8a 	bl	8002f18 <USB_ReadInterrupts>
 8001804:	2800      	cmp	r0, #0
 8001806:	f000 8129 	beq.w	8001a5c <HAL_PCD_IRQHandler+0x278>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800180a:	6820      	ldr	r0, [r4, #0]
 800180c:	f001 fb84 	bl	8002f18 <USB_ReadInterrupts>
 8001810:	0782      	lsls	r2, r0, #30
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001812:	bf41      	itttt	mi
 8001814:	6822      	ldrmi	r2, [r4, #0]
 8001816:	6953      	ldrmi	r3, [r2, #20]
 8001818:	f003 0302 	andmi.w	r3, r3, #2
 800181c:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800181e:	6820      	ldr	r0, [r4, #0]
 8001820:	f001 fb7a 	bl	8002f18 <USB_ReadInterrupts>
 8001824:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8001828:	d00b      	beq.n	8001842 <HAL_PCD_IRQHandler+0x5e>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800182a:	6820      	ldr	r0, [r4, #0]
 800182c:	f001 fb78 	bl	8002f20 <USB_ReadDevAllOutEpInterrupt>
 8001830:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 8001834:	4607      	mov	r7, r0
      while ( ep_intr )
 8001836:	f504 7a00 	add.w	sl, r4, #512	; 0x200
      epnum = 0U;
 800183a:	2500      	movs	r5, #0
      while ( ep_intr )
 800183c:	2f00      	cmp	r7, #0
 800183e:	f040 8110 	bne.w	8001a62 <HAL_PCD_IRQHandler+0x27e>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001842:	6820      	ldr	r0, [r4, #0]
 8001844:	f001 fb68 	bl	8002f18 <USB_ReadInterrupts>
 8001848:	0340      	lsls	r0, r0, #13
 800184a:	d50b      	bpl.n	8001864 <HAL_PCD_IRQHandler+0x80>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800184c:	6820      	ldr	r0, [r4, #0]
 800184e:	f001 fb6f 	bl	8002f30 <USB_ReadDevAllInEpInterrupt>
 8001852:	4626      	mov	r6, r4
 8001854:	9003      	str	r0, [sp, #12]
      while ( ep_intr )
 8001856:	f509 6810 	add.w	r8, r9, #2304	; 0x900
      epnum = 0U;
 800185a:	2500      	movs	r5, #0
      while ( ep_intr )
 800185c:	9b03      	ldr	r3, [sp, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	f040 8140 	bne.w	8001ae4 <HAL_PCD_IRQHandler+0x300>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001864:	6820      	ldr	r0, [r4, #0]
 8001866:	f001 fb57 	bl	8002f18 <USB_ReadInterrupts>
 800186a:	2800      	cmp	r0, #0
 800186c:	da0d      	bge.n	800188a <HAL_PCD_IRQHandler+0xa6>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800186e:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 8001872:	f023 0301 	bic.w	r3, r3, #1
 8001876:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804
        HAL_PCD_ResumeCallback(hpcd);
 800187a:	4620      	mov	r0, r4
 800187c:	f7fe fdc0 	bl	8000400 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001880:	6822      	ldr	r2, [r4, #0]
 8001882:	6953      	ldr	r3, [r2, #20]
 8001884:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001888:	6153      	str	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800188a:	6820      	ldr	r0, [r4, #0]
 800188c:	f001 fb44 	bl	8002f18 <USB_ReadInterrupts>
 8001890:	0507      	lsls	r7, r0, #20
 8001892:	d50b      	bpl.n	80018ac <HAL_PCD_IRQHandler+0xc8>
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001894:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 8001898:	07de      	lsls	r6, r3, #31
 800189a:	d502      	bpl.n	80018a2 <HAL_PCD_IRQHandler+0xbe>
        HAL_PCD_SuspendCallback(hpcd);
 800189c:	4620      	mov	r0, r4
 800189e:	f7fe fd97 	bl	80003d0 <HAL_PCD_SuspendCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80018a2:	6822      	ldr	r2, [r4, #0]
 80018a4:	6953      	ldr	r3, [r2, #20]
 80018a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018aa:	6153      	str	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80018ac:	6820      	ldr	r0, [r4, #0]
 80018ae:	f001 fb33 	bl	8002f18 <USB_ReadInterrupts>
 80018b2:	04c0      	lsls	r0, r0, #19
 80018b4:	d537      	bpl.n	8001926 <HAL_PCD_IRQHandler+0x142>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 80018b6:	f509 6600 	add.w	r6, r9, #2048	; 0x800
 80018ba:	6873      	ldr	r3, [r6, #4]
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 80018c2:	2110      	movs	r1, #16
 80018c4:	6820      	ldr	r0, [r4, #0]
 80018c6:	f000 feeb 	bl	80026a0 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ca:	f509 6310 	add.w	r3, r9, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFFU;
 80018ce:	22ff      	movs	r2, #255	; 0xff
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d0:	6861      	ldr	r1, [r4, #4]
 80018d2:	9802      	ldr	r0, [sp, #8]
 80018d4:	4281      	cmp	r1, r0
 80018d6:	f200 8191 	bhi.w	8001bfc <HAL_PCD_IRQHandler+0x418>
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018de:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018e0:	69f3      	ldr	r3, [r6, #28]
 80018e2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80018e6:	61f3      	str	r3, [r6, #28]
      if(hpcd->Init.use_dedicated_ep1)
 80018e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 818e 	beq.w	8001c0c <HAL_PCD_IRQHandler+0x428>
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 80018f0:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 80018f4:	f043 030b 	orr.w	r3, r3, #11
 80018f8:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 80018fc:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80018fe:	f043 030b 	orr.w	r3, r3, #11
 8001902:	6473      	str	r3, [r6, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001904:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800
 8001908:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800190c:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001910:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001914:	7c21      	ldrb	r1, [r4, #16]
 8001916:	6820      	ldr	r0, [r4, #0]
 8001918:	f001 fb4f 	bl	8002fba <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800191c:	6822      	ldr	r2, [r4, #0]
 800191e:	6953      	ldr	r3, [r2, #20]
 8001920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001924:	6153      	str	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001926:	6820      	ldr	r0, [r4, #0]
 8001928:	f001 faf6 	bl	8002f18 <USB_ReadInterrupts>
 800192c:	0481      	lsls	r1, r0, #18
 800192e:	d51e      	bpl.n	800196e <HAL_PCD_IRQHandler+0x18a>
      USB_ActivateSetup(hpcd->Instance);
 8001930:	6820      	ldr	r0, [r4, #0]
 8001932:	f001 fb27 	bl	8002f84 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001936:	6822      	ldr	r2, [r4, #0]
 8001938:	68d3      	ldr	r3, [r2, #12]
 800193a:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800193e:	60d3      	str	r3, [r2, #12]
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8001940:	6820      	ldr	r0, [r4, #0]
 8001942:	f000 ff75 	bl	8002830 <USB_GetDevSpeed>
 8001946:	2800      	cmp	r0, #0
 8001948:	f040 8169 	bne.w	8001c1e <HAL_PCD_IRQHandler+0x43a>
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 800194c:	f44f 7300 	mov.w	r3, #512	; 0x200
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001950:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8001952:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8001954:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001956:	68d3      	ldr	r3, [r2, #12]
 8001958:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 800195c:	60d3      	str	r3, [r2, #12]
      HAL_PCD_ResetCallback(hpcd);
 800195e:	4620      	mov	r0, r4
 8001960:	f7fe fd25 	bl	80003ae <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001964:	6822      	ldr	r2, [r4, #0]
 8001966:	6953      	ldr	r3, [r2, #20]
 8001968:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800196c:	6153      	str	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800196e:	6820      	ldr	r0, [r4, #0]
 8001970:	f001 fad2 	bl	8002f18 <USB_ReadInterrupts>
 8001974:	06c3      	lsls	r3, r0, #27
 8001976:	d52b      	bpl.n	80019d0 <HAL_PCD_IRQHandler+0x1ec>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001978:	6822      	ldr	r2, [r4, #0]
 800197a:	6993      	ldr	r3, [r2, #24]
 800197c:	f023 0310 	bic.w	r3, r3, #16
 8001980:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8001982:	f8d9 6020 	ldr.w	r6, [r9, #32]
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8001986:	f3c6 4343 	ubfx	r3, r6, #17, #4
 800198a:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800198c:	f006 080f 	and.w	r8, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8001990:	f040 81a6 	bne.w	8001ce0 <HAL_PCD_IRQHandler+0x4fc>
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001994:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001998:	421e      	tst	r6, r3
 800199a:	d014      	beq.n	80019c6 <HAL_PCD_IRQHandler+0x1e2>
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 800199c:	271c      	movs	r7, #28
 800199e:	fb07 4708 	mla	r7, r7, r8, r4
 80019a2:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80019a6:	4632      	mov	r2, r6
 80019a8:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 80019ac:	4648      	mov	r0, r9
 80019ae:	f001 fa23 	bl	8002df8 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80019b2:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80019b6:	4433      	add	r3, r6
 80019b8:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80019bc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80019c0:	441e      	add	r6, r3
 80019c2:	f8c7 6210 	str.w	r6, [r7, #528]	; 0x210
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019c6:	6822      	ldr	r2, [r4, #0]
 80019c8:	6993      	ldr	r3, [r2, #24]
 80019ca:	f043 0310 	orr.w	r3, r3, #16
 80019ce:	6193      	str	r3, [r2, #24]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019d0:	6820      	ldr	r0, [r4, #0]
 80019d2:	f001 faa1 	bl	8002f18 <USB_ReadInterrupts>
 80019d6:	0707      	lsls	r7, r0, #28
 80019d8:	d507      	bpl.n	80019ea <HAL_PCD_IRQHandler+0x206>
      HAL_PCD_SOFCallback(hpcd);
 80019da:	4620      	mov	r0, r4
 80019dc:	f7fe fce3 	bl	80003a6 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019e0:	6822      	ldr	r2, [r4, #0]
 80019e2:	6953      	ldr	r3, [r2, #20]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	6153      	str	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019ea:	6820      	ldr	r0, [r4, #0]
 80019ec:	f001 fa94 	bl	8002f18 <USB_ReadInterrupts>
 80019f0:	02c6      	lsls	r6, r0, #11
 80019f2:	d508      	bpl.n	8001a06 <HAL_PCD_IRQHandler+0x222>
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 80019f4:	b2e9      	uxtb	r1, r5
 80019f6:	4620      	mov	r0, r4
 80019f8:	f7fe fd0a 	bl	8000410 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019fc:	6822      	ldr	r2, [r4, #0]
 80019fe:	6953      	ldr	r3, [r2, #20]
 8001a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a04:	6153      	str	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a06:	6820      	ldr	r0, [r4, #0]
 8001a08:	f001 fa86 	bl	8002f18 <USB_ReadInterrupts>
 8001a0c:	0280      	lsls	r0, r0, #10
 8001a0e:	d508      	bpl.n	8001a22 <HAL_PCD_IRQHandler+0x23e>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8001a10:	b2e9      	uxtb	r1, r5
 8001a12:	4620      	mov	r0, r4
 8001a14:	f7fe fcf8 	bl	8000408 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a18:	6822      	ldr	r2, [r4, #0]
 8001a1a:	6953      	ldr	r3, [r2, #20]
 8001a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a20:	6153      	str	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a22:	6820      	ldr	r0, [r4, #0]
 8001a24:	f001 fa78 	bl	8002f18 <USB_ReadInterrupts>
 8001a28:	0041      	lsls	r1, r0, #1
 8001a2a:	d507      	bpl.n	8001a3c <HAL_PCD_IRQHandler+0x258>
      HAL_PCD_ConnectCallback(hpcd);
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f7fe fcf3 	bl	8000418 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a32:	6822      	ldr	r2, [r4, #0]
 8001a34:	6953      	ldr	r3, [r2, #20]
 8001a36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a3a:	6153      	str	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a3c:	6820      	ldr	r0, [r4, #0]
 8001a3e:	f001 fa6b 	bl	8002f18 <USB_ReadInterrupts>
 8001a42:	0742      	lsls	r2, r0, #29
 8001a44:	d50a      	bpl.n	8001a5c <HAL_PCD_IRQHandler+0x278>
      temp = hpcd->Instance->GOTGINT;
 8001a46:	6823      	ldr	r3, [r4, #0]
 8001a48:	685d      	ldr	r5, [r3, #4]
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a4a:	076b      	lsls	r3, r5, #29
 8001a4c:	d502      	bpl.n	8001a54 <HAL_PCD_IRQHandler+0x270>
        HAL_PCD_DisconnectCallback(hpcd);
 8001a4e:	4620      	mov	r0, r4
 8001a50:	f7fe fce6 	bl	8000420 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 8001a54:	6822      	ldr	r2, [r4, #0]
 8001a56:	6853      	ldr	r3, [r2, #4]
 8001a58:	432b      	orrs	r3, r5
 8001a5a:	6053      	str	r3, [r2, #4]
}
 8001a5c:	b007      	add	sp, #28
 8001a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1U)
 8001a62:	07fb      	lsls	r3, r7, #31
 8001a64:	d538      	bpl.n	8001ad8 <HAL_PCD_IRQHandler+0x2f4>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8001a66:	fa5f fb85 	uxtb.w	fp, r5
 8001a6a:	4659      	mov	r1, fp
 8001a6c:	6820      	ldr	r0, [r4, #0]
 8001a6e:	f001 fa67 	bl	8002f40 <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001a72:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8001a76:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001a78:	d021      	beq.n	8001abe <HAL_PCD_IRQHandler+0x2da>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	60b3      	str	r3, [r6, #8]
            if(hpcd->Init.dma_enable == 1U)
 8001a7e:	6921      	ldr	r1, [r4, #16]
 8001a80:	4299      	cmp	r1, r3
 8001a82:	d10c      	bne.n	8001a9e <HAL_PCD_IRQHandler+0x2ba>
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001a84:	6931      	ldr	r1, [r6, #16]
 8001a86:	f8da 0000 	ldr.w	r0, [sl]
 8001a8a:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8001a8e:	1a41      	subs	r1, r0, r1
 8001a90:	f8ca 1010 	str.w	r1, [sl, #16]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8001a94:	f8da 1004 	ldr.w	r1, [sl, #4]
 8001a98:	4408      	add	r0, r1
 8001a9a:	f8ca 0004 	str.w	r0, [sl, #4]
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8001a9e:	4659      	mov	r1, fp
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	f7fe fc6f 	bl	8000384 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8001aa6:	6921      	ldr	r1, [r4, #16]
 8001aa8:	2901      	cmp	r1, #1
 8001aaa:	d108      	bne.n	8001abe <HAL_PCD_IRQHandler+0x2da>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001aac:	b93d      	cbnz	r5, 8001abe <HAL_PCD_IRQHandler+0x2da>
 8001aae:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8001ab2:	b922      	cbnz	r2, 8001abe <HAL_PCD_IRQHandler+0x2da>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ab4:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001ab8:	6820      	ldr	r0, [r4, #0]
 8001aba:	f001 fa7e 	bl	8002fba <USB_EP0_OutStart>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001abe:	f018 0f08 	tst.w	r8, #8
 8001ac2:	d004      	beq.n	8001ace <HAL_PCD_IRQHandler+0x2ea>
            HAL_PCD_SetupStageCallback(hpcd);
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	f7fe fc57 	bl	8000378 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001aca:	2308      	movs	r3, #8
 8001acc:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001ace:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ad2:	bf1c      	itt	ne
 8001ad4:	2310      	movne	r3, #16
 8001ad6:	60b3      	strne	r3, [r6, #8]
        epnum++;
 8001ad8:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8001ada:	087f      	lsrs	r7, r7, #1
 8001adc:	3620      	adds	r6, #32
 8001ade:	f10a 0a1c 	add.w	sl, sl, #28
 8001ae2:	e6ab      	b.n	800183c <HAL_PCD_IRQHandler+0x58>
        if (ep_intr & 0x1U) /* In ITR */
 8001ae4:	9b03      	ldr	r3, [sp, #12]
 8001ae6:	07d9      	lsls	r1, r3, #31
 8001ae8:	d568      	bpl.n	8001bbc <HAL_PCD_IRQHandler+0x3d8>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8001aea:	fa5f fb85 	uxtb.w	fp, r5
 8001aee:	4659      	mov	r1, fp
 8001af0:	6820      	ldr	r0, [r4, #0]
 8001af2:	f001 fa2f 	bl	8002f54 <USB_ReadDevInEPInterrupt>
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001af6:	07c2      	lsls	r2, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8001af8:	4607      	mov	r7, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001afa:	d520      	bpl.n	8001b3e <HAL_PCD_IRQHandler+0x35a>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001afc:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = 0x1U << epnum;
 8001b00:	2101      	movs	r1, #1
 8001b02:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001b04:	ea23 0301 	bic.w	r3, r3, r1
 8001b08:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	f8c8 3008 	str.w	r3, [r8, #8]
            if (hpcd->Init.dma_enable == 1U)
 8001b12:	6923      	ldr	r3, [r4, #16]
 8001b14:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8001b16:	bf02      	ittt	eq
 8001b18:	e9d6 2310 	ldrdeq	r2, r3, [r6, #64]	; 0x40
 8001b1c:	189b      	addeq	r3, r3, r2
 8001b1e:	6473      	streq	r3, [r6, #68]	; 0x44
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8001b20:	4659      	mov	r1, fp
 8001b22:	4620      	mov	r0, r4
 8001b24:	f7fe fc37 	bl	8000396 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8001b28:	6921      	ldr	r1, [r4, #16]
 8001b2a:	2901      	cmp	r1, #1
 8001b2c:	d107      	bne.n	8001b3e <HAL_PCD_IRQHandler+0x35a>
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b2e:	b935      	cbnz	r5, 8001b3e <HAL_PCD_IRQHandler+0x35a>
 8001b30:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001b32:	b923      	cbnz	r3, 8001b3e <HAL_PCD_IRQHandler+0x35a>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b34:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001b38:	6820      	ldr	r0, [r4, #0]
 8001b3a:	f001 fa3e 	bl	8002fba <USB_EP0_OutStart>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b3e:	073b      	lsls	r3, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001b40:	bf44      	itt	mi
 8001b42:	2308      	movmi	r3, #8
 8001b44:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001b48:	06f8      	lsls	r0, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001b4a:	bf44      	itt	mi
 8001b4c:	2310      	movmi	r3, #16
 8001b4e:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001b52:	0679      	lsls	r1, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001b54:	bf44      	itt	mi
 8001b56:	2340      	movmi	r3, #64	; 0x40
 8001b58:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001b5c:	07ba      	lsls	r2, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001b5e:	bf44      	itt	mi
 8001b60:	2302      	movmi	r3, #2
 8001b62:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b66:	063b      	lsls	r3, r7, #24
 8001b68:	d528      	bpl.n	8001bbc <HAL_PCD_IRQHandler+0x3d8>
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	9304      	str	r3, [sp, #16]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8001b6e:	e9d6 7313 	ldrd	r7, r3, [r6, #76]	; 0x4c
 8001b72:	1aff      	subs	r7, r7, r3
 8001b74:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8001b76:	429f      	cmp	r7, r3
 8001b78:	bf28      	it	cs
 8001b7a:	461f      	movcs	r7, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001b7c:	9b04      	ldr	r3, [sp, #16]
 8001b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8001b82:	f107 0a03 	add.w	sl, r7, #3
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001b86:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 8001b8a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001b8e:	9305      	str	r3, [sp, #20]
 8001b90:	9b05      	ldr	r3, [sp, #20]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	4553      	cmp	r3, sl
 8001b98:	d904      	bls.n	8001ba4 <HAL_PCD_IRQHandler+0x3c0>
          (ep->xfer_count < ep->xfer_len) &&
 8001b9a:	e9d6 3213 	ldrd	r3, r2, [r6, #76]	; 0x4c
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d900      	bls.n	8001ba4 <HAL_PCD_IRQHandler+0x3c0>
          (ep->xfer_count < ep->xfer_len) &&
 8001ba2:	b99b      	cbnz	r3, 8001bcc <HAL_PCD_IRQHandler+0x3e8>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 8001ba4:	b957      	cbnz	r7, 8001bbc <HAL_PCD_IRQHandler+0x3d8>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ba6:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = 0x1U << epnum;
 8001ba8:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001baa:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 8001bae:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1U << epnum;
 8001bb2:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001bb4:	ea23 0302 	bic.w	r3, r3, r2
 8001bb8:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
        ep_intr >>= 1U;
 8001bbc:	9b03      	ldr	r3, [sp, #12]
 8001bbe:	085b      	lsrs	r3, r3, #1
        epnum++;
 8001bc0:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8001bc2:	9303      	str	r3, [sp, #12]
 8001bc4:	361c      	adds	r6, #28
 8001bc6:	f108 0820 	add.w	r8, r8, #32
 8001bca:	e647      	b.n	800185c <HAL_PCD_IRQHandler+0x78>
    if (len > ep->maxpacket)
 8001bcc:	6c37      	ldr	r7, [r6, #64]	; 0x40
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8001bce:	9804      	ldr	r0, [sp, #16]
    len = ep->xfer_len - ep->xfer_count;
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	429f      	cmp	r7, r3
 8001bd4:	bf28      	it	cs
 8001bd6:	461f      	movcs	r7, r3
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8001bd8:	7c23      	ldrb	r3, [r4, #16]
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	465a      	mov	r2, fp
 8001bde:	b2bb      	uxth	r3, r7
 8001be0:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8001be2:	f000 ffe9 	bl	8002bb8 <USB_WritePacket>
    ep->xfer_buff  += len;
 8001be6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8001be8:	443b      	add	r3, r7
 8001bea:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 8001bec:	6d33      	ldr	r3, [r6, #80]	; 0x50
    len32b = (len + 3U) / 4U;
 8001bee:	f107 0a03 	add.w	sl, r7, #3
    ep->xfer_count += len;
 8001bf2:	443b      	add	r3, r7
    len32b = (len + 3U) / 4U;
 8001bf4:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
    ep->xfer_count += len;
 8001bf8:	6533      	str	r3, [r6, #80]	; 0x50
 8001bfa:	e7c9      	b.n	8001b90 <HAL_PCD_IRQHandler+0x3ac>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bfc:	9902      	ldr	r1, [sp, #8]
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8001bfe:	609a      	str	r2, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c00:	3101      	adds	r1, #1
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8001c02:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c06:	9102      	str	r1, [sp, #8]
 8001c08:	3320      	adds	r3, #32
 8001c0a:	e661      	b.n	80018d0 <HAL_PCD_IRQHandler+0xec>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8001c0c:	6973      	ldr	r3, [r6, #20]
 8001c0e:	f043 030b 	orr.w	r3, r3, #11
 8001c12:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8001c14:	6933      	ldr	r3, [r6, #16]
 8001c16:	f043 030b 	orr.w	r3, r3, #11
 8001c1a:	6133      	str	r3, [r6, #16]
 8001c1c:	e672      	b.n	8001904 <HAL_PCD_IRQHandler+0x120>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8001c22:	2340      	movs	r3, #64	; 0x40
 8001c24:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 8001c26:	f003 febb 	bl	80059a0 <HAL_RCC_GetHCLKFreq>
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8001c2a:	4b35      	ldr	r3, [pc, #212]	; (8001d00 <HAL_PCD_IRQHandler+0x51c>)
 8001c2c:	4a35      	ldr	r2, [pc, #212]	; (8001d04 <HAL_PCD_IRQHandler+0x520>)
 8001c2e:	4403      	add	r3, r0
 8001c30:	4293      	cmp	r3, r2
 8001c32:	6823      	ldr	r3, [r4, #0]
 8001c34:	d804      	bhi.n	8001c40 <HAL_PCD_IRQHandler+0x45c>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	e68e      	b.n	800195e <HAL_PCD_IRQHandler+0x17a>
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 8001c40:	4a31      	ldr	r2, [pc, #196]	; (8001d08 <HAL_PCD_IRQHandler+0x524>)
 8001c42:	4932      	ldr	r1, [pc, #200]	; (8001d0c <HAL_PCD_IRQHandler+0x528>)
 8001c44:	4402      	add	r2, r0
 8001c46:	428a      	cmp	r2, r1
 8001c48:	d803      	bhi.n	8001c52 <HAL_PCD_IRQHandler+0x46e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8001c50:	e7f4      	b.n	8001c3c <HAL_PCD_IRQHandler+0x458>
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8001c52:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8001c56:	492e      	ldr	r1, [pc, #184]	; (8001d10 <HAL_PCD_IRQHandler+0x52c>)
 8001c58:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8001c5c:	428a      	cmp	r2, r1
 8001c5e:	d803      	bhi.n	8001c68 <HAL_PCD_IRQHandler+0x484>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8001c66:	e7e9      	b.n	8001c3c <HAL_PCD_IRQHandler+0x458>
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8001c68:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8001c6c:	4929      	ldr	r1, [pc, #164]	; (8001d14 <HAL_PCD_IRQHandler+0x530>)
 8001c6e:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8001c72:	428a      	cmp	r2, r1
 8001c74:	d803      	bhi.n	8001c7e <HAL_PCD_IRQHandler+0x49a>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001c7c:	e7de      	b.n	8001c3c <HAL_PCD_IRQHandler+0x458>
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 8001c7e:	4a26      	ldr	r2, [pc, #152]	; (8001d18 <HAL_PCD_IRQHandler+0x534>)
 8001c80:	4926      	ldr	r1, [pc, #152]	; (8001d1c <HAL_PCD_IRQHandler+0x538>)
 8001c82:	4402      	add	r2, r0
 8001c84:	428a      	cmp	r2, r1
 8001c86:	d803      	bhi.n	8001c90 <HAL_PCD_IRQHandler+0x4ac>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8001c8e:	e7d5      	b.n	8001c3c <HAL_PCD_IRQHandler+0x458>
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 8001c90:	4a23      	ldr	r2, [pc, #140]	; (8001d20 <HAL_PCD_IRQHandler+0x53c>)
 8001c92:	4924      	ldr	r1, [pc, #144]	; (8001d24 <HAL_PCD_IRQHandler+0x540>)
 8001c94:	4402      	add	r2, r0
 8001c96:	428a      	cmp	r2, r1
 8001c98:	d803      	bhi.n	8001ca2 <HAL_PCD_IRQHandler+0x4be>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8001ca0:	e7cc      	b.n	8001c3c <HAL_PCD_IRQHandler+0x458>
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 8001ca2:	4a21      	ldr	r2, [pc, #132]	; (8001d28 <HAL_PCD_IRQHandler+0x544>)
 8001ca4:	4921      	ldr	r1, [pc, #132]	; (8001d2c <HAL_PCD_IRQHandler+0x548>)
 8001ca6:	4402      	add	r2, r0
 8001ca8:	428a      	cmp	r2, r1
 8001caa:	d803      	bhi.n	8001cb4 <HAL_PCD_IRQHandler+0x4d0>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8001cb2:	e7c3      	b.n	8001c3c <HAL_PCD_IRQHandler+0x458>
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 8001cb4:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8001cb8:	491d      	ldr	r1, [pc, #116]	; (8001d30 <HAL_PCD_IRQHandler+0x54c>)
 8001cba:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8001cbe:	428a      	cmp	r2, r1
 8001cc0:	d803      	bhi.n	8001cca <HAL_PCD_IRQHandler+0x4e6>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cc8:	e7b8      	b.n	8001c3c <HAL_PCD_IRQHandler+0x458>
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8001cca:	4a1a      	ldr	r2, [pc, #104]	; (8001d34 <HAL_PCD_IRQHandler+0x550>)
 8001ccc:	491a      	ldr	r1, [pc, #104]	; (8001d38 <HAL_PCD_IRQHandler+0x554>)
 8001cce:	4402      	add	r2, r0
 8001cd0:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	bf94      	ite	ls
 8001cd6:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001cda:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8001cde:	e7ad      	b.n	8001c3c <HAL_PCD_IRQHandler+0x458>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8001ce0:	2b06      	cmp	r3, #6
 8001ce2:	f47f ae70 	bne.w	80019c6 <HAL_PCD_IRQHandler+0x1e2>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ce6:	2208      	movs	r2, #8
 8001ce8:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 8001cec:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001cee:	271c      	movs	r7, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001cf0:	f001 f882 	bl	8002df8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001cf4:	fb07 4708 	mla	r7, r7, r8, r4
 8001cf8:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8001cfc:	e65e      	b.n	80019bc <HAL_PCD_IRQHandler+0x1d8>
 8001cfe:	bf00      	nop
 8001d00:	ff275340 	.word	0xff275340
 8001d04:	000c34ff 	.word	0x000c34ff
 8001d08:	ff1b1e40 	.word	0xff1b1e40
 8001d0c:	000f423f 	.word	0x000f423f
 8001d10:	00124f7f 	.word	0x00124f7f
 8001d14:	0013d61f 	.word	0x0013d61f
 8001d18:	fee5b660 	.word	0xfee5b660
 8001d1c:	0016e35f 	.word	0x0016e35f
 8001d20:	feced300 	.word	0xfeced300
 8001d24:	001b773f 	.word	0x001b773f
 8001d28:	feb35bc0 	.word	0xfeb35bc0
 8001d2c:	002191bf 	.word	0x002191bf
 8001d30:	0038751f 	.word	0x0038751f
 8001d34:	fe5954e0 	.word	0xfe5954e0
 8001d38:	00419cdf 	.word	0x00419cdf

08001d3c <HAL_PCD_DevConnect>:
{
 8001d3c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 8001d3e:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8001d42:	2b01      	cmp	r3, #1
{
 8001d44:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8001d46:	d009      	beq.n	8001d5c <HAL_PCD_DevConnect+0x20>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect(hpcd->Instance);
 8001d4e:	6800      	ldr	r0, [r0, #0]
 8001d50:	f001 f8ca 	bl	8002ee8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd); 
 8001d54:	2000      	movs	r0, #0
 8001d56:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
}
 8001d5a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8001d5c:	2002      	movs	r0, #2
 8001d5e:	e7fc      	b.n	8001d5a <HAL_PCD_DevConnect+0x1e>

08001d60 <HAL_PCD_DevDisconnect>:
{
 8001d60:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 8001d62:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8001d66:	2b01      	cmp	r3, #1
{
 8001d68:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8001d6a:	d009      	beq.n	8001d80 <HAL_PCD_DevDisconnect+0x20>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevDisconnect(hpcd->Instance);
 8001d72:	6800      	ldr	r0, [r0, #0]
 8001d74:	f001 f8c4 	bl	8002f00 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd); 
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
}
 8001d7e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8001d80:	2002      	movs	r0, #2
 8001d82:	e7fc      	b.n	8001d7e <HAL_PCD_DevDisconnect+0x1e>

08001d84 <HAL_PCD_SetAddress>:
{
 8001d84:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 8001d86:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8001d8a:	2b01      	cmp	r3, #1
{
 8001d8c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8001d8e:	d009      	beq.n	8001da4 <HAL_PCD_SetAddress+0x20>
 8001d90:	2301      	movs	r3, #1
 8001d92:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8001d96:	6800      	ldr	r0, [r0, #0]
 8001d98:	f001 f896 	bl	8002ec8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
}
 8001da2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8001da4:	2002      	movs	r0, #2
 8001da6:	e7fc      	b.n	8001da2 <HAL_PCD_SetAddress+0x1e>

08001da8 <HAL_PCD_EP_Open>:
{
 8001da8:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 8001daa:	b24e      	sxtb	r6, r1
 8001dac:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8001db0:	2e00      	cmp	r6, #0
{
 8001db2:	4604      	mov	r4, r0
 8001db4:	f04f 001c 	mov.w	r0, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001db8:	bfb5      	itete	lt
 8001dba:	fb00 4105 	mlalt	r1, r0, r5, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001dbe:	fb00 4101 	mlage	r1, r0, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001dc2:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001dc4:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  if (ep->is_in)
 8001dc8:	2e00      	cmp	r6, #0
    ep->tx_fifo_num = ep->num;
 8001dca:	bfb8      	it	lt
 8001dcc:	80cd      	strhlt	r5, [r1, #6]
  if (ep_type == EP_TYPE_BULK )
 8001dce:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8001dd0:	70cb      	strb	r3, [r1, #3]
  ep->is_in = (0x80 & ep_addr) != 0;
 8001dd2:	ea4f 70d6 	mov.w	r0, r6, lsr #31
    ep->data_pid_start = 0U;
 8001dd6:	bf04      	itt	eq
 8001dd8:	2300      	moveq	r3, #0
 8001dda:	710b      	strbeq	r3, [r1, #4]
  ep->num   = ep_addr & 0x7F;
 8001ddc:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8001dde:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
 8001de0:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd); 
 8001de2:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d009      	beq.n	8001dfe <HAL_PCD_EP_Open+0x56>
 8001dea:	2301      	movs	r3, #1
 8001dec:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001df0:	6820      	ldr	r0, [r4, #0]
 8001df2:	f000 fd38 	bl	8002866 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8001df6:	2000      	movs	r0, #0
 8001df8:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
}
 8001dfc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd); 
 8001dfe:	2002      	movs	r0, #2
 8001e00:	e7fc      	b.n	8001dfc <HAL_PCD_EP_Open+0x54>

08001e02 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 8001e02:	b24b      	sxtb	r3, r1
 8001e04:	2b00      	cmp	r3, #0
{  
 8001e06:	b510      	push	{r4, lr}
 8001e08:	f04f 021c 	mov.w	r2, #28
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001e12:	bfb5      	itete	lt
 8001e14:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001e18:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001e1c:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001e1e:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = (0x80 & ep_addr) != 0;
 8001e22:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8001e24:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8001e26:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001e28:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d009      	beq.n	8001e44 <HAL_PCD_EP_Close+0x42>
 8001e30:	2301      	movs	r3, #1
 8001e32:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001e36:	6820      	ldr	r0, [r4, #0]
 8001e38:	f000 fdba 	bl	80029b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
}
 8001e42:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8001e44:	2002      	movs	r0, #2
 8001e46:	e7fc      	b.n	8001e42 <HAL_PCD_EP_Close+0x40>

08001e48 <HAL_PCD_EP_Receive>:
{
 8001e48:	b538      	push	{r3, r4, r5, lr}
 8001e4a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001e4e:	241c      	movs	r4, #28
 8001e50:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8001e54:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001e58:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
  ep->xfer_len = len;
 8001e5c:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0U;
 8001e60:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;  
 8001e62:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_count = 0U;
 8001e66:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0U;
 8001e6a:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 8001e6e:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  if (hpcd->Init.dma_enable == 1U)
 8001e72:	6903      	ldr	r3, [r0, #16]
 8001e74:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8001e76:	bf08      	it	eq
 8001e78:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
  if ((ep_addr & 0x7F) == 0)
 8001e7c:	6800      	ldr	r0, [r0, #0]
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	b91d      	cbnz	r5, 8001e8a <HAL_PCD_EP_Receive+0x42>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001e82:	f000 fdff 	bl	8002a84 <USB_EP0StartXfer>
}
 8001e86:	2000      	movs	r0, #0
 8001e88:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001e8a:	f000 fea9 	bl	8002be0 <USB_EPStartXfer>
 8001e8e:	e7fa      	b.n	8001e86 <HAL_PCD_EP_Receive+0x3e>

08001e90 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8001e90:	231c      	movs	r3, #28
 8001e92:	f001 010f 	and.w	r1, r1, #15
 8001e96:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001e9a:	f8b1 0210 	ldrh.w	r0, [r1, #528]	; 0x210
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_PCD_EP_Transmit>:
{
 8001ea0:	b538      	push	{r3, r4, r5, lr}
 8001ea2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001ea6:	241c      	movs	r4, #28
 8001ea8:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8001eac:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001eb0:	3138      	adds	r1, #56	; 0x38
  ep->xfer_len = len;
 8001eb2:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1U;
 8001eb8:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;  
 8001eba:	6462      	str	r2, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8001ebc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 8001ec0:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  if (hpcd->Init.dma_enable == 1U)
 8001ec4:	6903      	ldr	r3, [r0, #16]
 8001ec6:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8001ec8:	bf08      	it	eq
 8001eca:	64a2      	streq	r2, [r4, #72]	; 0x48
  if ((ep_addr & 0x7F) == 0)
 8001ecc:	6800      	ldr	r0, [r0, #0]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	b91d      	cbnz	r5, 8001eda <HAL_PCD_EP_Transmit+0x3a>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001ed2:	f000 fdd7 	bl	8002a84 <USB_EP0StartXfer>
}
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001eda:	f000 fe81 	bl	8002be0 <USB_EPStartXfer>
 8001ede:	e7fa      	b.n	8001ed6 <HAL_PCD_EP_Transmit+0x36>

08001ee0 <HAL_PCD_EP_SetStall>:
{
 8001ee0:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8001ee2:	b24b      	sxtb	r3, r1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8001eea:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001eee:	bfb5      	itete	lt
 8001ef0:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8001ef4:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001ef8:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 8001efa:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_stall = 1U;
 8001efe:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001f00:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 1U;
 8001f02:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001f04:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001f06:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001f08:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8001f0c:	4293      	cmp	r3, r2
{
 8001f0e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8001f10:	d00f      	beq.n	8001f32 <HAL_PCD_EP_SetStall+0x52>
 8001f12:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8001f16:	6800      	ldr	r0, [r0, #0]
 8001f18:	f000 ff7c 	bl	8002e14 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8001f1c:	b92d      	cbnz	r5, 8001f2a <HAL_PCD_EP_SetStall+0x4a>
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f1e:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001f22:	7c21      	ldrb	r1, [r4, #16]
 8001f24:	6820      	ldr	r0, [r4, #0]
 8001f26:	f001 f848 	bl	8002fba <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
}
 8001f30:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001f32:	2002      	movs	r0, #2
 8001f34:	e7fc      	b.n	8001f30 <HAL_PCD_EP_SetStall+0x50>

08001f36 <HAL_PCD_EP_ClrStall>:
{
 8001f36:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8001f38:	b24b      	sxtb	r3, r1
 8001f3a:	2b00      	cmp	r3, #0
{
 8001f3c:	4605      	mov	r5, r0
 8001f3e:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001f42:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 8001f46:	bfb5      	itete	lt
 8001f48:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 8001f4c:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001f50:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 8001f52:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001f56:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8001f58:	2400      	movs	r4, #0
 8001f5a:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001f5c:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001f5e:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001f60:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d009      	beq.n	8001f7c <HAL_PCD_EP_ClrStall+0x46>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8001f6e:	6828      	ldr	r0, [r5, #0]
 8001f70:	f000 ff6e 	bl	8002e50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001f74:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
  return HAL_OK;
 8001f78:	4620      	mov	r0, r4
}
 8001f7a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001f7c:	2002      	movs	r0, #2
 8001f7e:	e7fc      	b.n	8001f7a <HAL_PCD_EP_ClrStall+0x44>

08001f80 <HAL_PCD_EP_Flush>:
{
 8001f80:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 8001f82:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8001f86:	2b01      	cmp	r3, #1
{
 8001f88:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8001f8a:	d010      	beq.n	8001fae <HAL_PCD_EP_Flush+0x2e>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  if ((ep_addr & 0x80) == 0x80)
 8001f92:	060b      	lsls	r3, r1, #24
 8001f94:	6800      	ldr	r0, [r0, #0]
 8001f96:	d507      	bpl.n	8001fa8 <HAL_PCD_EP_Flush+0x28>
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7F);
 8001f98:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001f9c:	f000 fb80 	bl	80026a0 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd); 
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
}
 8001fa6:	bd10      	pop	{r4, pc}
    USB_FlushRxFifo(hpcd->Instance);
 8001fa8:	f000 fb8c 	bl	80026c4 <USB_FlushRxFifo>
 8001fac:	e7f8      	b.n	8001fa0 <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd); 
 8001fae:	2002      	movs	r0, #2
 8001fb0:	e7f9      	b.n	8001fa6 <HAL_PCD_EP_Flush+0x26>

08001fb2 <HAL_PCD_ActivateRemoteWakeup>:
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001fb2:	6803      	ldr	r3, [r0, #0]
 8001fb4:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8001fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fbc:	07d2      	lsls	r2, r2, #31
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_RWUSIG;
 8001fbe:	bf42      	ittt	mi
 8001fc0:	685a      	ldrmi	r2, [r3, #4]
 8001fc2:	f042 0201 	orrmi.w	r2, r2, #1
 8001fc6:	605a      	strmi	r2, [r3, #4]
}
 8001fc8:	2000      	movs	r0, #0
 8001fca:	4770      	bx	lr

08001fcc <HAL_PCD_DeActivateRemoteWakeup>:
  USBx_DEVICE->DCTL &= ~(USB_OTG_DCTL_RWUSIG);
 8001fcc:	6803      	ldr	r3, [r0, #0]
 8001fce:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 8001fd2:	f022 0201 	bic.w	r2, r2, #1
 8001fd6:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 8001fda:	2000      	movs	r0, #0
 8001fdc:	4770      	bx	lr

08001fde <HAL_PCD_GetState>:
  return hpcd->State;
 8001fde:	f890 03b9 	ldrb.w	r0, [r0, #953]	; 0x3b9
}
 8001fe2:	4770      	bx	lr

08001fe4 <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	71fb      	strb	r3, [r7, #7]
  uint8_t  is_oddframe = 0; 
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	777b      	strb	r3, [r7, #29]
  uint16_t len_words = 0;   
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	837b      	strh	r3, [r7, #26]
  uint16_t num_packets = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	83fb      	strh	r3, [r7, #30]
  uint16_t max_hc_pkt_count = 256;
 8001ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002002:	833b      	strh	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
    
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800200e:	d02a      	beq.n	8002066 <USB_HC_StartXfer+0x82>
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	791b      	ldrb	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d126      	bne.n	8002066 <USB_HC_StartXfer+0x82>
  {
    if((dma == 0) && (hc->do_ping == 1U))
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10b      	bne.n	8002036 <USB_HC_StartXfer+0x52>
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	795b      	ldrb	r3, [r3, #5]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d107      	bne.n	8002036 <USB_HC_StartXfer+0x52>
    {
      USB_DoPing(USBx, hc->ch_num);
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	785b      	ldrb	r3, [r3, #1]
 800202a:	4619      	mov	r1, r3
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 fa03 	bl	8002438 <USB_DoPing>
      return HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	e109      	b.n	800224a <USB_HC_StartXfer+0x266>
    }
    else if(dma == 1)
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d114      	bne.n	8002066 <USB_HC_StartXfer+0x82>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	785b      	ldrb	r3, [r3, #1]
 8002040:	015a      	lsls	r2, r3, #5
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4413      	add	r3, r2
 8002046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	7852      	ldrb	r2, [r2, #1]
 8002050:	0151      	lsls	r1, r2, #5
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	440a      	add	r2, r1
 8002056:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800205a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800205e:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2200      	movs	r2, #0
 8002064:	715a      	strb	r2, [r3, #5]
    }
  }
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d019      	beq.n	80020a2 <USB_HC_StartXfer+0xbe>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1U) / hc->max_packet;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	8912      	ldrh	r2, [r2, #8]
 8002076:	4413      	add	r3, r2
 8002078:	3b01      	subs	r3, #1
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	8912      	ldrh	r2, [r2, #8]
 800207e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002082:	83fb      	strh	r3, [r7, #30]
    
    if (num_packets > max_hc_pkt_count)
 8002084:	8bfa      	ldrh	r2, [r7, #30]
 8002086:	8b3b      	ldrh	r3, [r7, #24]
 8002088:	429a      	cmp	r2, r3
 800208a:	d90c      	bls.n	80020a6 <USB_HC_StartXfer+0xc2>
    {
      num_packets = max_hc_pkt_count;
 800208c:	8b3b      	ldrh	r3, [r7, #24]
 800208e:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = num_packets * hc->max_packet;
 8002090:	8bfb      	ldrh	r3, [r7, #30]
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	8912      	ldrh	r2, [r2, #8]
 8002096:	fb02 f303 	mul.w	r3, r2, r3
 800209a:	461a      	mov	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	611a      	str	r2, [r3, #16]
 80020a0:	e001      	b.n	80020a6 <USB_HC_StartXfer+0xc2>
    }
  }
  else
  {
    num_packets = 1;
 80020a2:	2301      	movs	r3, #1
 80020a4:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	78db      	ldrb	r3, [r3, #3]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d007      	beq.n	80020be <USB_HC_StartXfer+0xda>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 80020ae:	8bfb      	ldrh	r3, [r7, #30]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	8912      	ldrh	r2, [r2, #8]
 80020b4:	fb02 f303 	mul.w	r3, r2, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 80020c6:	8bfb      	ldrh	r3, [r7, #30]
 80020c8:	04db      	lsls	r3, r3, #19
 80020ca:	4619      	mov	r1, r3
 80020cc:	4b61      	ldr	r3, [pc, #388]	; (8002254 <USB_HC_StartXfer+0x270>)
 80020ce:	400b      	ands	r3, r1
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 80020d0:	431a      	orrs	r2, r3
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	7a9b      	ldrb	r3, [r3, #10]
 80020d6:	075b      	lsls	r3, r3, #29
 80020d8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	7849      	ldrb	r1, [r1, #1]
 80020e0:	0148      	lsls	r0, r1, #5
 80020e2:	68f9      	ldr	r1, [r7, #12]
 80020e4:	4401      	add	r1, r0
 80020e6:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 80020ea:	4313      	orrs	r3, r2
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 80020ec:	610b      	str	r3, [r1, #16]
  
  if (dma)
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <USB_HC_StartXfer+0x126>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	68d9      	ldr	r1, [r3, #12]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	785b      	ldrb	r3, [r3, #1]
 80020fc:	015a      	lsls	r2, r3, #5
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4413      	add	r3, r2
 8002102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002106:	460a      	mov	r2, r1
 8002108:	615a      	str	r2, [r3, #20]
  }
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	bf0c      	ite	eq
 800211a:	2301      	moveq	r3, #1
 800211c:	2300      	movne	r3, #0
 800211e:	b2db      	uxtb	r3, r3
 8002120:	777b      	strb	r3, [r7, #29]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	785b      	ldrb	r3, [r3, #1]
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4413      	add	r3, r2
 800212c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	7852      	ldrb	r2, [r2, #1]
 8002136:	0151      	lsls	r1, r2, #5
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	440a      	add	r2, r1
 800213c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002140:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002144:	6013      	str	r3, [r2, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	785b      	ldrb	r3, [r3, #1]
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4413      	add	r3, r2
 8002150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	7f7a      	ldrb	r2, [r7, #29]
 8002158:	0752      	lsls	r2, r2, #29
 800215a:	4610      	mov	r0, r2
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	7852      	ldrb	r2, [r2, #1]
 8002160:	0151      	lsls	r1, r2, #5
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	440a      	add	r2, r1
 8002166:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800216a:	4303      	orrs	r3, r0
 800216c:	6013      	str	r3, [r2, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	785b      	ldrb	r3, [r3, #1]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002186:	617b      	str	r3, [r7, #20]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800218e:	617b      	str	r3, [r7, #20]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	785b      	ldrb	r3, [r3, #1]
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4413      	add	r3, r2
 800219a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219e:	461a      	mov	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	6013      	str	r3, [r2, #0]
  
  if (dma == 0) /* Slave mode */
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d14e      	bne.n	8002248 <USB_HC_StartXfer+0x264>
  {  
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	78db      	ldrb	r3, [r3, #3]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d14a      	bne.n	8002248 <USB_HC_StartXfer+0x264>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d046      	beq.n	8002248 <USB_HC_StartXfer+0x264>
    {
      switch(hc->ep_type) 
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	79db      	ldrb	r3, [r3, #7]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d830      	bhi.n	8002224 <USB_HC_StartXfer+0x240>
 80021c2:	a201      	add	r2, pc, #4	; (adr r2, 80021c8 <USB_HC_StartXfer+0x1e4>)
 80021c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c8:	080021d9 	.word	0x080021d9
 80021cc:	080021fd 	.word	0x080021fd
 80021d0:	080021d9 	.word	0x080021d9
 80021d4:	080021fd 	.word	0x080021fd
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        len_words = (hc->xfer_len + 3) / 4;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	3303      	adds	r3, #3
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	837b      	strh	r3, [r7, #26]
        
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 80021e2:	8b7a      	ldrh	r2, [r7, #26]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d91c      	bls.n	8002228 <USB_HC_StartXfer+0x244>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	f043 0220 	orr.w	r2, r3, #32
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80021fa:	e015      	b.n	8002228 <USB_HC_StartXfer+0x244>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3) / 4;
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	3303      	adds	r3, #3
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	837b      	strh	r3, [r7, #26]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 8002206:	8b7a      	ldrh	r2, [r7, #26]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	b29b      	uxth	r3, r3
 8002212:	429a      	cmp	r2, r3
 8002214:	d90a      	bls.n	800222c <USB_HC_StartXfer+0x248>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	619a      	str	r2, [r3, #24]
        }
        break;
 8002222:	e003      	b.n	800222c <USB_HC_StartXfer+0x248>
        
      default:
        break;
 8002224:	bf00      	nop
 8002226:	e002      	b.n	800222e <USB_HC_StartXfer+0x24a>
        break;
 8002228:	bf00      	nop
 800222a:	e000      	b.n	800222e <USB_HC_StartXfer+0x24a>
        break;
 800222c:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	68d9      	ldr	r1, [r3, #12]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	785a      	ldrb	r2, [r3, #1]
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	b298      	uxth	r0, r3
 800223c:	2300      	movs	r3, #0
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	4603      	mov	r3, r0
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 fcb8 	bl	8002bb8 <USB_WritePacket>
    }
  }
  
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3720      	adds	r7, #32
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	1ff80000 	.word	0x1ff80000

08002258 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx : Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	b29b      	uxth	r3, r3
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <USB_HC_Halt>:
  * @param  hc_num : Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 8002276:	b480      	push	{r7}
 8002278:	b085      	sub	sp, #20
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	460b      	mov	r3, r1
 8002280:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	0c9b      	lsrs	r3, r3, #18
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00b      	beq.n	80022b6 <USB_HC_Halt+0x40>
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 80022ac:	0c9b      	lsrs	r3, r3, #18
 80022ae:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d15c      	bne.n	8002370 <USB_HC_Halt+0xfa>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	0151      	lsls	r1, r2, #5
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	440a      	add	r2, r1
 80022cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022d4:	6013      	str	r3, [r2, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d133      	bne.n	800234a <USB_HC_Halt+0xd4>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	78fa      	ldrb	r2, [r7, #3]
 80022f2:	0151      	lsls	r1, r2, #5
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	440a      	add	r2, r1
 80022f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002300:	6013      	str	r3, [r2, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8002302:	78fb      	ldrb	r3, [r7, #3]
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	78fa      	ldrb	r2, [r7, #3]
 8002312:	0151      	lsls	r1, r2, #5
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	440a      	add	r2, r1
 8002318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800231c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002320:	6013      	str	r3, [r2, #0]
      do 
      {
        if (++count > 1000U) 
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3301      	adds	r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800232e:	d81d      	bhi.n	800236c <USB_HC_Halt+0xf6>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4413      	add	r3, r2
 8002338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002342:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002346:	d0ec      	beq.n	8002322 <USB_HC_Halt+0xac>
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8002348:	e06f      	b.n	800242a <USB_HC_Halt+0x1b4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	0151      	lsls	r1, r2, #5
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	440a      	add	r2, r1
 8002360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002364:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002368:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 800236a:	e05e      	b.n	800242a <USB_HC_Halt+0x1b4>
          break;
 800236c:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 800236e:	e05c      	b.n	800242a <USB_HC_Halt+0x1b4>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	015a      	lsls	r2, r3, #5
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4413      	add	r3, r2
 8002378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	78fa      	ldrb	r2, [r7, #3]
 8002380:	0151      	lsls	r1, r2, #5
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	440a      	add	r2, r1
 8002386:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800238a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800238e:	6013      	str	r3, [r2, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	b29b      	uxth	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d133      	bne.n	8002406 <USB_HC_Halt+0x190>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	015a      	lsls	r2, r3, #5
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	0151      	lsls	r1, r2, #5
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	440a      	add	r2, r1
 80023b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023bc:	6013      	str	r3, [r2, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	78fa      	ldrb	r2, [r7, #3]
 80023ce:	0151      	lsls	r1, r2, #5
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	440a      	add	r2, r1
 80023d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023dc:	6013      	str	r3, [r2, #0]
      do 
      {
        if (++count > 1000U) 
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	3301      	adds	r3, #1
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023ea:	d81d      	bhi.n	8002428 <USB_HC_Halt+0x1b2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002402:	d0ec      	beq.n	80023de <USB_HC_Halt+0x168>
 8002404:	e011      	b.n	800242a <USB_HC_Halt+0x1b4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	0151      	lsls	r1, r2, #5
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	440a      	add	r2, r1
 800241c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002420:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	e000      	b.n	800242a <USB_HC_Halt+0x1b4>
          break;
 8002428:	bf00      	nop
    }
  }
  
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <USB_DoPing>:
  * @param  hc_num : Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1U;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	04db      	lsls	r3, r3, #19
 8002450:	461a      	mov	r2, r3
 8002452:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <USB_DoPing+0x70>)
 8002454:	4013      	ands	r3, r2
 8002456:	78fa      	ldrb	r2, [r7, #3]
 8002458:	0151      	lsls	r1, r2, #5
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	440a      	add	r2, r1
 800245e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002462:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002466:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4413      	add	r3, r2
 8002470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800247e:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002486:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4413      	add	r3, r2
 8002490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002494:	461a      	mov	r2, r3
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;  
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	1ff80000 	.word	0x1ff80000

080024ac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx : Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f8d3 	bl	8002664 <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 80024be:	2110      	movs	r1, #16
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f8ed 	bl	80026a0 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f8fc 	bl	80026c4 <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 80024cc:	2300      	movs	r3, #0
 80024ce:	75fb      	strb	r3, [r7, #23]
 80024d0:	e01f      	b.n	8002512 <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 80024d2:	7dfb      	ldrb	r3, [r7, #23]
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80024e8:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024f0:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80024f8:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 80024fa:	7dfb      	ldrb	r3, [r7, #23]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002506:	461a      	mov	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 800250c:	7dfb      	ldrb	r3, [r7, #23]
 800250e:	3301      	adds	r3, #1
 8002510:	75fb      	strb	r3, [r7, #23]
 8002512:	7dfb      	ldrb	r3, [r7, #23]
 8002514:	2b0f      	cmp	r3, #15
 8002516:	d9dc      	bls.n	80024d2 <USB_StopHost+0x26>
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0; i <= 15; i++)
 8002518:	2300      	movs	r3, #0
 800251a:	75fb      	strb	r3, [r7, #23]
 800251c:	e034      	b.n	8002588 <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 800251e:	7dfb      	ldrb	r3, [r7, #23]
 8002520:	015a      	lsls	r2, r3, #5
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002534:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800253c:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002544:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 8002546:	7dfb      	ldrb	r3, [r7, #23]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002552:	461a      	mov	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000U) 
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	3301      	adds	r3, #1
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002564:	d80c      	bhi.n	8002580 <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002566:	7dfb      	ldrb	r3, [r7, #23]
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4413      	add	r3, r2
 800256e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002578:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800257c:	d0ec      	beq.n	8002558 <USB_StopHost+0xac>
 800257e:	e000      	b.n	8002582 <USB_StopHost+0xd6>
        break;
 8002580:	bf00      	nop
  for (i = 0; i <= 15; i++)
 8002582:	7dfb      	ldrb	r3, [r7, #23]
 8002584:	3301      	adds	r3, #1
 8002586:	75fb      	strb	r3, [r7, #23]
 8002588:	7dfb      	ldrb	r3, [r7, #23]
 800258a:	2b0f      	cmp	r3, #15
 800258c:	d9c7      	bls.n	800251e <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002594:	461a      	mov	r2, r3
 8002596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800259a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025a2:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f857 	bl	8002658 <USB_EnableGlobalInt>
  return HAL_OK;  
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <USB_CoreReset>:
{
 80025b4:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <USB_CoreReset+0x2c>)
    if (++count > 200000U)
 80025b6:	3b01      	subs	r3, #1
 80025b8:	d00f      	beq.n	80025da <USB_CoreReset+0x26>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80025ba:	6902      	ldr	r2, [r0, #16]
 80025bc:	2a00      	cmp	r2, #0
 80025be:	dafa      	bge.n	80025b6 <USB_CoreReset+0x2>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80025c0:	6903      	ldr	r3, [r0, #16]
 80025c2:	4a07      	ldr	r2, [pc, #28]	; (80025e0 <USB_CoreReset+0x2c>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80025ca:	3a01      	subs	r2, #1
 80025cc:	d005      	beq.n	80025da <USB_CoreReset+0x26>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80025ce:	6903      	ldr	r3, [r0, #16]
 80025d0:	f013 0301 	ands.w	r3, r3, #1
 80025d4:	d1f9      	bne.n	80025ca <USB_CoreReset+0x16>
  return HAL_OK;
 80025d6:	4618      	mov	r0, r3
 80025d8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80025da:	2003      	movs	r0, #3
}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	00030d41 	.word	0x00030d41

080025e4 <USB_CoreInit>:
{
 80025e4:	b084      	sub	sp, #16
 80025e6:	b538      	push	{r3, r4, r5, lr}
 80025e8:	ad05      	add	r5, sp, #20
 80025ea:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80025ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80025f0:	2b01      	cmp	r3, #1
{
 80025f2:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80025f4:	d126      	bne.n	8002644 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80025f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80025f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025fc:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80025fe:	68c3      	ldr	r3, [r0, #12]
 8002600:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002608:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800260a:	68c3      	ldr	r3, [r0, #12]
 800260c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002610:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8002612:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002614:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002616:	bf02      	ittt	eq
 8002618:	68c3      	ldreq	r3, [r0, #12]
 800261a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800261e:	60c3      	streq	r3, [r0, #12]
    USB_CoreReset(USBx); 
 8002620:	f7ff ffc8 	bl	80025b4 <USB_CoreReset>
  if(cfg.dma_enable == ENABLE)
 8002624:	9b08      	ldr	r3, [sp, #32]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d107      	bne.n	800263a <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800262a:	68a3      	ldr	r3, [r4, #8]
 800262c:	f043 0306 	orr.w	r3, r3, #6
 8002630:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002632:	68a3      	ldr	r3, [r4, #8]
 8002634:	f043 0320 	orr.w	r3, r3, #32
 8002638:	60a3      	str	r3, [r4, #8]
}
 800263a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800263e:	2000      	movs	r0, #0
 8002640:	b004      	add	sp, #16
 8002642:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002644:	68c3      	ldr	r3, [r0, #12]
 8002646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800264a:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 800264c:	f7ff ffb2 	bl	80025b4 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002654:	63a3      	str	r3, [r4, #56]	; 0x38
 8002656:	e7e5      	b.n	8002624 <USB_CoreInit+0x40>

08002658 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002658:	6883      	ldr	r3, [r0, #8]
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6083      	str	r3, [r0, #8]
}
 8002660:	2000      	movs	r0, #0
 8002662:	4770      	bx	lr

08002664 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002664:	6883      	ldr	r3, [r0, #8]
 8002666:	f023 0301 	bic.w	r3, r3, #1
 800266a:	6083      	str	r3, [r0, #8]
}
 800266c:	2000      	movs	r0, #0
 800266e:	4770      	bx	lr

08002670 <USB_SetCurrentMode>:
{
 8002670:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002672:	68c3      	ldr	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8002674:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002676:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800267a:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 800267c:	d108      	bne.n	8002690 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 800267e:	68c3      	ldr	r3, [r0, #12]
 8002680:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002684:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8002686:	2032      	movs	r0, #50	; 0x32
 8002688:	f000 fe5e 	bl	8003348 <HAL_Delay>
}
 800268c:	2000      	movs	r0, #0
 800268e:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 8002690:	2900      	cmp	r1, #0
 8002692:	d1f8      	bne.n	8002686 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8002694:	68c3      	ldr	r3, [r0, #12]
 8002696:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800269a:	60c3      	str	r3, [r0, #12]
 800269c:	e7f3      	b.n	8002686 <USB_SetCurrentMode+0x16>
	...

080026a0 <USB_FlushTxFifo>:
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80026a0:	0189      	lsls	r1, r1, #6
 80026a2:	f041 0120 	orr.w	r1, r1, #32
 80026a6:	4a06      	ldr	r2, [pc, #24]	; (80026c0 <USB_FlushTxFifo+0x20>)
 80026a8:	6101      	str	r1, [r0, #16]
    if (++count > 200000)
 80026aa:	3a01      	subs	r2, #1
 80026ac:	d005      	beq.n	80026ba <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80026ae:	6903      	ldr	r3, [r0, #16]
 80026b0:	f013 0320 	ands.w	r3, r3, #32
 80026b4:	d1f9      	bne.n	80026aa <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80026b6:	4618      	mov	r0, r3
 80026b8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80026ba:	2003      	movs	r0, #3
}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	00030d41 	.word	0x00030d41

080026c4 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80026c4:	2310      	movs	r3, #16
 80026c6:	4a06      	ldr	r2, [pc, #24]	; (80026e0 <USB_FlushRxFifo+0x1c>)
 80026c8:	6103      	str	r3, [r0, #16]
    if (++count > 200000)
 80026ca:	3a01      	subs	r2, #1
 80026cc:	d005      	beq.n	80026da <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80026ce:	6903      	ldr	r3, [r0, #16]
 80026d0:	f013 0310 	ands.w	r3, r3, #16
 80026d4:	d1f9      	bne.n	80026ca <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80026d6:	4618      	mov	r0, r3
 80026d8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80026da:	2003      	movs	r0, #3
}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	00030d41 	.word	0x00030d41

080026e4 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80026e4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80026e8:	4319      	orrs	r1, r3
 80026ea:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80026ee:	2000      	movs	r0, #0
 80026f0:	4770      	bx	lr
	...

080026f4 <USB_DevInit>:
{
 80026f4:	b084      	sub	sp, #16
 80026f6:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80026fa:	4604      	mov	r4, r0
 80026fc:	a807      	add	r0, sp, #28
 80026fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002702:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8002704:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002708:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800270a:	4689      	mov	r9, r1
  if (cfg.vbus_sensing_enable == 0U)
 800270c:	b9a6      	cbnz	r6, 8002738 <USB_DevInit+0x44>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800270e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002712:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800271a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800271e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8002722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002724:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002726:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 800272a:	d161      	bne.n	80027f0 <USB_DevInit+0xfc>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 800272c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800272e:	b939      	cbnz	r1, 8002740 <USB_DevInit+0x4c>
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8002730:	4620      	mov	r0, r4
 8002732:	f7ff ffd7 	bl	80026e4 <USB_SetDevSpeed>
 8002736:	e007      	b.n	8002748 <USB_DevInit+0x54>
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002738:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800273c:	63a3      	str	r3, [r4, #56]	; 0x38
 800273e:	e7e9      	b.n	8002714 <USB_DevInit+0x20>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8002740:	4619      	mov	r1, r3
 8002742:	4620      	mov	r0, r4
 8002744:	f7ff ffce 	bl	80026e4 <USB_SetDevSpeed>
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 8002748:	2110      	movs	r1, #16
 800274a:	4620      	mov	r0, r4
 800274c:	f7ff ffa8 	bl	80026a0 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8002750:	4620      	mov	r0, r4
 8002752:	f7ff ffb7 	bl	80026c4 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 8002756:	2300      	movs	r3, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  USBx_DEVICE->DIEPMSK = 0U;
 800275c:	612b      	str	r3, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800275e:	4619      	mov	r1, r3
 8002760:	616b      	str	r3, [r5, #20]
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002766:	61aa      	str	r2, [r5, #24]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8002768:	f04f 0cff 	mov.w	ip, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0U;
 800276c:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800276e:	f504 6210 	add.w	r2, r4, #2304	; 0x900
 8002772:	454b      	cmp	r3, r9
 8002774:	d13e      	bne.n	80027f4 <USB_DevInit+0x100>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002776:	2200      	movs	r2, #0
 8002778:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 800277c:	4611      	mov	r1, r2
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800277e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8002782:	f04f 0cff 	mov.w	ip, #255	; 0xff
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002786:	454a      	cmp	r2, r9
 8002788:	d141      	bne.n	800280e <USB_DevInit+0x11a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800278a:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 800278c:	f1b8 0f01 	cmp.w	r8, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002794:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8002796:	d108      	bne.n	80027aa <USB_DevInit+0xb6>
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8002798:	4b23      	ldr	r3, [pc, #140]	; (8002828 <USB_DevInit+0x134>)
 800279a:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 800279c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800279e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a2:	f043 0303 	orr.w	r3, r3, #3
 80027a6:	632b      	str	r3, [r5, #48]	; 0x30
    i= USBx_DEVICE->DTHRCTL;
 80027a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80027ae:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80027b2:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == DISABLE)
 80027b4:	f1b8 0f00 	cmp.w	r8, #0
 80027b8:	d103      	bne.n	80027c2 <USB_DevInit+0xce>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 80027ba:	69a3      	ldr	r3, [r4, #24]
 80027bc:	f043 0310 	orr.w	r3, r3, #16
 80027c0:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80027c2:	69a2      	ldr	r2, [r4, #24]
 80027c4:	4b19      	ldr	r3, [pc, #100]	; (800282c <USB_DevInit+0x138>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61a3      	str	r3, [r4, #24]
  if(cfg.Sof_enable)
 80027ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80027cc:	b11b      	cbz	r3, 80027d6 <USB_DevInit+0xe2>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80027ce:	69a3      	ldr	r3, [r4, #24]
 80027d0:	f043 0308 	orr.w	r3, r3, #8
 80027d4:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == ENABLE)
 80027d6:	2e01      	cmp	r6, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 80027d8:	bf01      	itttt	eq
 80027da:	69a3      	ldreq	r3, [r4, #24]
 80027dc:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80027e0:	f043 0304 	orreq.w	r3, r3, #4
 80027e4:	61a3      	streq	r3, [r4, #24]
}
 80027e6:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 80027ea:	2000      	movs	r0, #0
 80027ec:	b004      	add	sp, #16
 80027ee:	4770      	bx	lr
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80027f0:	2103      	movs	r1, #3
 80027f2:	e79d      	b.n	8002730 <USB_DevInit+0x3c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80027f4:	f8d2 e000 	ldr.w	lr, [r2]
 80027f8:	f1be 0f00 	cmp.w	lr, #0
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80027fc:	bfb4      	ite	lt
 80027fe:	6010      	strlt	r0, [r2, #0]
      USBx_INEP(i)->DIEPCTL = 0U;
 8002800:	6011      	strge	r1, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002802:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002804:	6111      	str	r1, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8002806:	f8c2 c008 	str.w	ip, [r2, #8]
 800280a:	3220      	adds	r2, #32
 800280c:	e7b1      	b.n	8002772 <USB_DevInit+0x7e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800280e:	f8d3 e000 	ldr.w	lr, [r3]
 8002812:	f1be 0f00 	cmp.w	lr, #0
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002816:	bfb4      	ite	lt
 8002818:	6018      	strlt	r0, [r3, #0]
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800281a:	6019      	strge	r1, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800281c:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800281e:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8002820:	f8c3 c008 	str.w	ip, [r3, #8]
 8002824:	3320      	adds	r3, #32
 8002826:	e7ae      	b.n	8002786 <USB_DevInit+0x92>
 8002828:	00800100 	.word	0x00800100
 800282c:	803c3800 	.word	0x803c3800

08002830 <USB_GetDevSpeed>:
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002830:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8002834:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 8002838:	f010 0006 	ands.w	r0, r0, #6
 800283c:	d012      	beq.n	8002864 <USB_GetDevSpeed+0x34>
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800283e:	6893      	ldr	r3, [r2, #8]
 8002840:	f003 0306 	and.w	r3, r3, #6
 8002844:	2b02      	cmp	r3, #2
 8002846:	d00c      	beq.n	8002862 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8002848:	6893      	ldr	r3, [r2, #8]
 800284a:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800284e:	2b06      	cmp	r3, #6
 8002850:	d007      	beq.n	8002862 <USB_GetDevSpeed+0x32>
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002852:	6893      	ldr	r3, [r2, #8]
 8002854:	f003 0306 	and.w	r3, r3, #6
 8002858:	2b04      	cmp	r3, #4
    speed = USB_OTG_SPEED_LOW;
 800285a:	bf14      	ite	ne
 800285c:	2000      	movne	r0, #0
 800285e:	2002      	moveq	r0, #2
 8002860:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 8002862:	2003      	movs	r0, #3
}
 8002864:	4770      	bx	lr

08002866 <USB_ActivateEndpoint>:
{
 8002866:	b510      	push	{r4, lr}
 8002868:	780c      	ldrb	r4, [r1, #0]
 800286a:	2301      	movs	r3, #1
 800286c:	40a3      	lsls	r3, r4
  if (ep->is_in == 1U)
 800286e:	784c      	ldrb	r4, [r1, #1]
 8002870:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8002874:	2c01      	cmp	r4, #1
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8002876:	69d4      	ldr	r4, [r2, #28]
  if (ep->is_in == 1U)
 8002878:	d11b      	bne.n	80028b2 <USB_ActivateEndpoint+0x4c>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 800287a:	b29b      	uxth	r3, r3
 800287c:	4323      	orrs	r3, r4
 800287e:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002880:	780c      	ldrb	r4, [r1, #0]
 8002882:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8002886:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800288a:	6803      	ldr	r3, [r0, #0]
 800288c:	041a      	lsls	r2, r3, #16
 800288e:	d40e      	bmi.n	80028ae <USB_ActivateEndpoint+0x48>
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002890:	688a      	ldr	r2, [r1, #8]
 8002892:	6803      	ldr	r3, [r0, #0]
 8002894:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002898:	431a      	orrs	r2, r3
 800289a:	78cb      	ldrb	r3, [r1, #3]
 800289c:	ea42 4383 	orr.w	r3, r2, r3, lsl #18
 80028a0:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 80028a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ac:	6003      	str	r3, [r0, #0]
}
 80028ae:	2000      	movs	r0, #0
 80028b0:	bd10      	pop	{r4, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80028b2:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80028b6:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80028b8:	780b      	ldrb	r3, [r1, #0]
 80028ba:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 80028be:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80028c2:	6803      	ldr	r3, [r0, #0]
 80028c4:	041b      	lsls	r3, r3, #16
 80028c6:	d4f2      	bmi.n	80028ae <USB_ActivateEndpoint+0x48>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80028c8:	688b      	ldr	r3, [r1, #8]
 80028ca:	6802      	ldr	r2, [r0, #0]
 80028cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028d0:	4313      	orrs	r3, r2
 80028d2:	78ca      	ldrb	r2, [r1, #3]
 80028d4:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 80028d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028e0:	6003      	str	r3, [r0, #0]
 80028e2:	e7e4      	b.n	80028ae <USB_ActivateEndpoint+0x48>

080028e4 <USB_ActivateDedicatedEndpoint>:
{
 80028e4:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 80028e6:	784b      	ldrb	r3, [r1, #1]
 80028e8:	780e      	ldrb	r6, [r1, #0]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	ea4f 1446 	mov.w	r4, r6, lsl #5
 80028f0:	f500 6500 	add.w	r5, r0, #2048	; 0x800
 80028f4:	d12c      	bne.n	8002950 <USB_ActivateDedicatedEndpoint+0x6c>
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80028f6:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 80028fa:	5903      	ldr	r3, [r0, r4]
 80028fc:	041a      	lsls	r2, r3, #16
 80028fe:	d40e      	bmi.n	800291e <USB_ActivateDedicatedEndpoint+0x3a>
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002900:	688b      	ldr	r3, [r1, #8]
 8002902:	5902      	ldr	r2, [r0, r4]
 8002904:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002908:	4313      	orrs	r3, r2
 800290a:	78ca      	ldrb	r2, [r1, #3]
 800290c:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8002910:	ea43 5386 	orr.w	r3, r3, r6, lsl #22
 8002914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800291c:	5103      	str	r3, [r0, r4]
    debug  |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 800291e:	4c23      	ldr	r4, [pc, #140]	; (80029ac <USB_ActivateDedicatedEndpoint+0xc8>)
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 8002920:	7808      	ldrb	r0, [r1, #0]
    debug  |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002922:	6822      	ldr	r2, [r4, #0]
 8002924:	688b      	ldr	r3, [r1, #8]
 8002926:	ea42 5280 	orr.w	r2, r2, r0, lsl #22
 800292a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800292e:	4313      	orrs	r3, r2
 8002930:	78ca      	ldrb	r2, [r1, #3]
 8002932:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8002936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800293e:	6023      	str	r3, [r4, #0]
   USBx_DEVICE->DEACHMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8002940:	2301      	movs	r3, #1
 8002942:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002944:	4083      	lsls	r3, r0
 8002946:	b29b      	uxth	r3, r3
 8002948:	4313      	orrs	r3, r2
 800294a:	63eb      	str	r3, [r5, #60]	; 0x3c
}
 800294c:	2000      	movs	r0, #0
 800294e:	bd70      	pop	{r4, r5, r6, pc}
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002950:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8002954:	5903      	ldr	r3, [r0, r4]
 8002956:	041b      	lsls	r3, r3, #16
 8002958:	d41f      	bmi.n	800299a <USB_ActivateDedicatedEndpoint+0xb6>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 800295a:	688a      	ldr	r2, [r1, #8]
 800295c:	5903      	ldr	r3, [r0, r4]
 800295e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002962:	4313      	orrs	r3, r2
 8002964:	78ca      	ldrb	r2, [r1, #3]
 8002966:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800296a:	ea43 5386 	orr.w	r3, r3, r6, lsl #22
 800296e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002972:	5103      	str	r3, [r0, r4]
      debug = (uint32_t)(((uint32_t )USBx) + USB_OTG_OUT_ENDPOINT_BASE + (0U)*USB_OTG_EP_REG_SIZE);
 8002974:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <USB_ActivateDedicatedEndpoint+0xc8>)
      debug = (uint32_t )&USBx_OUTEP(ep->num)->DOEPCTL;
 8002976:	780c      	ldrb	r4, [r1, #0]
      debug = (uint32_t)(((uint32_t )USBx) + USB_OTG_OUT_ENDPOINT_BASE + (0U)*USB_OTG_EP_REG_SIZE);
 8002978:	6010      	str	r0, [r2, #0]
      debug = (uint32_t )&USBx_OUTEP(ep->num)->DOEPCTL;
 800297a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800297e:	6010      	str	r0, [r2, #0]
      debug |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002980:	6810      	ldr	r0, [r2, #0]
 8002982:	688b      	ldr	r3, [r1, #8]
 8002984:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8002988:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800298c:	4303      	orrs	r3, r0
 800298e:	78c8      	ldrb	r0, [r1, #3]
 8002990:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 8002994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002998:	6013      	str	r3, [r2, #0]
     USBx_DEVICE->DEACHMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 800299a:	7809      	ldrb	r1, [r1, #0]
 800299c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800299e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029a2:	408b      	lsls	r3, r1
 80029a4:	4313      	orrs	r3, r2
 80029a6:	63eb      	str	r3, [r5, #60]	; 0x3c
 80029a8:	e7d0      	b.n	800294c <USB_ActivateDedicatedEndpoint+0x68>
 80029aa:	bf00      	nop
 80029ac:	20000174 	.word	0x20000174

080029b0 <USB_DeactivateEndpoint>:
{
 80029b0:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 80029b2:	784a      	ldrb	r2, [r1, #1]
 80029b4:	780b      	ldrb	r3, [r1, #0]
 80029b6:	2a01      	cmp	r2, #1
{
 80029b8:	4605      	mov	r5, r0
 80029ba:	460e      	mov	r6, r1
 80029bc:	ea4f 1343 	mov.w	r3, r3, lsl #5
  if (ep->is_in == 1U)
 80029c0:	d12e      	bne.n	8002a20 <USB_DeactivateEndpoint+0x70>
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 80029c2:	f500 6210 	add.w	r2, r0, #2304	; 0x900
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80029c6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 80029ca:	5899      	ldr	r1, [r3, r2]
 80029cc:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80029d0:	5099      	str	r1, [r3, r2]
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80029d2:	7831      	ldrb	r1, [r6, #0]
 80029d4:	2320      	movs	r3, #32
 80029d6:	fb13 2101 	smlabb	r1, r3, r1, r2
 80029da:	6008      	str	r0, [r1, #0]
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 80029dc:	7831      	ldrb	r1, [r6, #0]
 80029de:	fb13 2101 	smlabb	r1, r3, r1, r2
 80029e2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80029e6:	6008      	str	r0, [r1, #0]
 80029e8:	4824      	ldr	r0, [pc, #144]	; (8002a7c <USB_DeactivateEndpoint+0xcc>)
      if (++count > 200000U)
 80029ea:	3801      	subs	r0, #1
 80029ec:	d101      	bne.n	80029f2 <USB_DeactivateEndpoint+0x42>
        return HAL_TIMEOUT;
 80029ee:	2003      	movs	r0, #3
}
 80029f0:	bd70      	pop	{r4, r5, r6, pc}
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 80029f2:	7831      	ldrb	r1, [r6, #0]
 80029f4:	fb13 2101 	smlabb	r1, r3, r1, r2
 80029f8:	688c      	ldr	r4, [r1, #8]
 80029fa:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 80029fe:	d1f4      	bne.n	80029ea <USB_DeactivateEndpoint+0x3a>
    USB_FlushTxFifo(USBx , 0x10U);
 8002a00:	2110      	movs	r1, #16
 8002a02:	4628      	mov	r0, r5
 8002a04:	f7ff fe4c 	bl	80026a0 <USB_FlushTxFifo>
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8002a08:	7830      	ldrb	r0, [r6, #0]
 8002a0a:	f8d5 181c 	ldr.w	r1, [r5, #2076]	; 0x81c
 8002a0e:	2201      	movs	r2, #1
 8002a10:	4082      	lsls	r2, r0
 8002a12:	b292      	uxth	r2, r2
 8002a14:	ea21 0202 	bic.w	r2, r1, r2
 8002a18:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
  return HAL_OK;
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	e7e7      	b.n	80029f0 <USB_DeactivateEndpoint+0x40>
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8002a20:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002a24:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8002a28:	5899      	ldr	r1, [r3, r2]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8002a2a:	4c14      	ldr	r4, [pc, #80]	; (8002a7c <USB_DeactivateEndpoint+0xcc>)
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8002a2c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8002a30:	5099      	str	r1, [r3, r2]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002a32:	7831      	ldrb	r1, [r6, #0]
 8002a34:	2320      	movs	r3, #32
 8002a36:	fb13 2101 	smlabb	r1, r3, r1, r2
 8002a3a:	6008      	str	r0, [r1, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8002a3c:	7831      	ldrb	r1, [r6, #0]
 8002a3e:	fb13 2101 	smlabb	r1, r3, r1, r2
 8002a42:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a46:	6008      	str	r0, [r1, #0]
      if (++count > 200000U)
 8002a48:	3c01      	subs	r4, #1
 8002a4a:	d0d0      	beq.n	80029ee <USB_DeactivateEndpoint+0x3e>
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 8002a4c:	7831      	ldrb	r1, [r6, #0]
 8002a4e:	fb13 2101 	smlabb	r1, r3, r1, r2
 8002a52:	6888      	ldr	r0, [r1, #8]
 8002a54:	f010 0010 	ands.w	r0, r0, #16
 8002a58:	d1f6      	bne.n	8002a48 <USB_DeactivateEndpoint+0x98>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a5a:	f8d5 2804 	ldr.w	r2, [r5, #2052]	; 0x804
 8002a5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a62:	f8c5 2804 	str.w	r2, [r5, #2052]	; 0x804
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 8002a66:	7834      	ldrb	r4, [r6, #0]
 8002a68:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 8002a6c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002a70:	40a1      	lsls	r1, r4
 8002a72:	ea22 0201 	bic.w	r2, r2, r1
 8002a76:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
 8002a7a:	e7b9      	b.n	80029f0 <USB_DeactivateEndpoint+0x40>
 8002a7c:	00030d41 	.word	0x00030d41

08002a80 <USB_DeactivateDedicatedEndpoint>:
 8002a80:	f7ff bf96 	b.w	80029b0 <USB_DeactivateEndpoint>

08002a84 <USB_EP0StartXfer>:
{
 8002a84:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8002a86:	784c      	ldrb	r4, [r1, #1]
 8002a88:	780b      	ldrb	r3, [r1, #0]
 8002a8a:	4e4a      	ldr	r6, [pc, #296]	; (8002bb4 <USB_EP0StartXfer+0x130>)
 8002a8c:	2c01      	cmp	r4, #1
 8002a8e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8002a92:	d15a      	bne.n	8002b4a <USB_EP0StartXfer+0xc6>
    if (ep->xfer_len == 0U)
 8002a94:	694d      	ldr	r5, [r1, #20]
 8002a96:	f500 6410 	add.w	r4, r0, #2304	; 0x900
 8002a9a:	4423      	add	r3, r4
 8002a9c:	bb35      	cbnz	r5, 8002aec <USB_EP0StartXfer+0x68>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002a9e:	691d      	ldr	r5, [r3, #16]
 8002aa0:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002aa4:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002aa8:	611d      	str	r5, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8002aaa:	780d      	ldrb	r5, [r1, #0]
 8002aac:	2320      	movs	r3, #32
 8002aae:	fb13 4505 	smlabb	r5, r3, r5, r4
 8002ab2:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8002ab6:	f44c 2c00 	orr.w	ip, ip, #524288	; 0x80000
 8002aba:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8002abe:	780d      	ldrb	r5, [r1, #0]
 8002ac0:	fb13 4305 	smlabb	r3, r3, r5, r4
 8002ac4:	691d      	ldr	r5, [r3, #16]
 8002ac6:	402e      	ands	r6, r5
 8002ac8:	611e      	str	r6, [r3, #16]
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8002aca:	780d      	ldrb	r5, [r1, #0]
 8002acc:	2320      	movs	r3, #32
 8002ace:	fb13 4505 	smlabb	r5, r3, r5, r4
    if (dma == 1)
 8002ad2:	2a01      	cmp	r2, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8002ad4:	682e      	ldr	r6, [r5, #0]
 8002ad6:	f046 4604 	orr.w	r6, r6, #2214592512	; 0x84000000
 8002ada:	602e      	str	r6, [r5, #0]
    if (dma == 1)
 8002adc:	d129      	bne.n	8002b32 <USB_EP0StartXfer+0xae>
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002ade:	780a      	ldrb	r2, [r1, #0]
 8002ae0:	fb13 4402 	smlabb	r4, r3, r2, r4
 8002ae4:	690b      	ldr	r3, [r1, #16]
 8002ae6:	6163      	str	r3, [r4, #20]
}
 8002ae8:	2000      	movs	r0, #0
 8002aea:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002aec:	691d      	ldr	r5, [r3, #16]
 8002aee:	402e      	ands	r6, r5
 8002af0:	611e      	str	r6, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002af2:	780e      	ldrb	r6, [r1, #0]
 8002af4:	2320      	movs	r3, #32
 8002af6:	fb13 4606 	smlabb	r6, r3, r6, r4
 8002afa:	6935      	ldr	r5, [r6, #16]
 8002afc:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002b00:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002b04:	6135      	str	r5, [r6, #16]
      if(ep->xfer_len > ep->maxpacket)
 8002b06:	688d      	ldr	r5, [r1, #8]
 8002b08:	694e      	ldr	r6, [r1, #20]
 8002b0a:	42ae      	cmp	r6, r5
        ep->xfer_len = ep->maxpacket;
 8002b0c:	bf88      	it	hi
 8002b0e:	614d      	strhi	r5, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8002b10:	780d      	ldrb	r5, [r1, #0]
 8002b12:	fb13 4505 	smlabb	r5, r3, r5, r4
 8002b16:	692e      	ldr	r6, [r5, #16]
 8002b18:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8002b1c:	612e      	str	r6, [r5, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8002b1e:	780d      	ldrb	r5, [r1, #0]
 8002b20:	fb13 4305 	smlabb	r3, r3, r5, r4
 8002b24:	694d      	ldr	r5, [r1, #20]
 8002b26:	691e      	ldr	r6, [r3, #16]
 8002b28:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002b2c:	4335      	orrs	r5, r6
 8002b2e:	611d      	str	r5, [r3, #16]
 8002b30:	e7cb      	b.n	8002aca <USB_EP0StartXfer+0x46>
      if (ep->xfer_len > 0U)
 8002b32:	694b      	ldr	r3, [r1, #20]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0d7      	beq.n	8002ae8 <USB_EP0StartXfer+0x64>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8002b38:	7809      	ldrb	r1, [r1, #0]
 8002b3a:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8002b3e:	2301      	movs	r3, #1
 8002b40:	408b      	lsls	r3, r1
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8002b48:	e7ce      	b.n	8002ae8 <USB_EP0StartXfer+0x64>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8002b4a:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8002b4e:	4403      	add	r3, r0
 8002b50:	691c      	ldr	r4, [r3, #16]
 8002b52:	4026      	ands	r6, r4
 8002b54:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8002b56:	780d      	ldrb	r5, [r1, #0]
 8002b58:	2320      	movs	r3, #32
 8002b5a:	fb13 0505 	smlabb	r5, r3, r5, r0
 8002b5e:	692c      	ldr	r4, [r5, #16]
 8002b60:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8002b64:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002b68:	612c      	str	r4, [r5, #16]
    if (ep->xfer_len > 0U)
 8002b6a:	694c      	ldr	r4, [r1, #20]
 8002b6c:	b10c      	cbz	r4, 8002b72 <USB_EP0StartXfer+0xee>
      ep->xfer_len = ep->maxpacket;
 8002b6e:	688c      	ldr	r4, [r1, #8]
 8002b70:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8002b72:	780c      	ldrb	r4, [r1, #0]
 8002b74:	fb13 0404 	smlabb	r4, r3, r4, r0
    if (dma == 1U)
 8002b78:	2a01      	cmp	r2, #1
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8002b7a:	6925      	ldr	r5, [r4, #16]
 8002b7c:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002b80:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8002b82:	780d      	ldrb	r5, [r1, #0]
 8002b84:	688c      	ldr	r4, [r1, #8]
 8002b86:	fb13 0505 	smlabb	r5, r3, r5, r0
 8002b8a:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002b8e:	692e      	ldr	r6, [r5, #16]
 8002b90:	ea44 0406 	orr.w	r4, r4, r6
 8002b94:	612c      	str	r4, [r5, #16]
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002b96:	bf01      	itttt	eq
 8002b98:	780a      	ldrbeq	r2, [r1, #0]
 8002b9a:	fb13 0302 	smlabbeq	r3, r3, r2, r0
 8002b9e:	68ca      	ldreq	r2, [r1, #12]
 8002ba0:	615a      	streq	r2, [r3, #20]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8002ba2:	780b      	ldrb	r3, [r1, #0]
 8002ba4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002ba8:	6803      	ldr	r3, [r0, #0]
 8002baa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002bae:	6003      	str	r3, [r0, #0]
 8002bb0:	e79a      	b.n	8002ae8 <USB_EP0StartXfer+0x64>
 8002bb2:	bf00      	nop
 8002bb4:	fff80000 	.word	0xfff80000

08002bb8 <USB_WritePacket>:
{
 8002bb8:	b510      	push	{r4, lr}
 8002bba:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8002bbe:	b94c      	cbnz	r4, 8002bd4 <USB_WritePacket+0x1c>
    count32b =  (len + 3U) / 4U;
 8002bc0:	3303      	adds	r3, #3
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002bc2:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
    count32b =  (len + 3U) / 4U;
 8002bc6:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002bc8:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8002bcc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++, src += 4U)
 8002bd0:	4299      	cmp	r1, r3
 8002bd2:	d101      	bne.n	8002bd8 <USB_WritePacket+0x20>
}
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002bd8:	f851 2b04 	ldr.w	r2, [r1], #4
 8002bdc:	6002      	str	r2, [r0, #0]
 8002bde:	e7f7      	b.n	8002bd0 <USB_WritePacket+0x18>

08002be0 <USB_EPStartXfer>:
{
 8002be0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8002be2:	784b      	ldrb	r3, [r1, #1]
 8002be4:	780c      	ldrb	r4, [r1, #0]
 8002be6:	4e82      	ldr	r6, [pc, #520]	; (8002df0 <USB_EPStartXfer+0x210>)
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	ea4f 1444 	mov.w	r4, r4, lsl #5
 8002bee:	f040 808b 	bne.w	8002d08 <USB_EPStartXfer+0x128>
    if (ep->xfer_len == 0U)
 8002bf2:	f500 6510 	add.w	r5, r0, #2304	; 0x900
 8002bf6:	1963      	adds	r3, r4, r5
 8002bf8:	694c      	ldr	r4, [r1, #20]
 8002bfa:	2c00      	cmp	r4, #0
 8002bfc:	d132      	bne.n	8002c64 <USB_EPStartXfer+0x84>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002bfe:	691c      	ldr	r4, [r3, #16]
 8002c00:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8002c04:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002c08:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8002c0a:	780c      	ldrb	r4, [r1, #0]
 8002c0c:	2320      	movs	r3, #32
 8002c0e:	fb13 5404 	smlabb	r4, r3, r4, r5
 8002c12:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8002c16:	f44c 2c00 	orr.w	ip, ip, #524288	; 0x80000
 8002c1a:	f8c4 c010 	str.w	ip, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8002c1e:	780c      	ldrb	r4, [r1, #0]
 8002c20:	fb13 5304 	smlabb	r3, r3, r4, r5
 8002c24:	691c      	ldr	r4, [r3, #16]
 8002c26:	4026      	ands	r6, r4
 8002c28:	611e      	str	r6, [r3, #16]
    if (dma == 1U)
 8002c2a:	2a01      	cmp	r2, #1
 8002c2c:	d158      	bne.n	8002ce0 <USB_EPStartXfer+0x100>
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002c2e:	780b      	ldrb	r3, [r1, #0]
 8002c30:	690c      	ldr	r4, [r1, #16]
 8002c32:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 8002c36:	615c      	str	r4, [r3, #20]
    if (ep->type == EP_TYPE_ISOC)
 8002c38:	78cb      	ldrb	r3, [r1, #3]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d053      	beq.n	8002ce6 <USB_EPStartXfer+0x106>
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002c3e:	780b      	ldrb	r3, [r1, #0]
 8002c40:	eb05 1543 	add.w	r5, r5, r3, lsl #5
 8002c44:	682b      	ldr	r3, [r5, #0]
 8002c46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002c4a:	602b      	str	r3, [r5, #0]
    if (ep->type == EP_TYPE_ISOC)
 8002c4c:	78cb      	ldrb	r3, [r1, #3]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d105      	bne.n	8002c5e <USB_EPStartXfer+0x7e>
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8002c52:	9200      	str	r2, [sp, #0]
 8002c54:	8a8b      	ldrh	r3, [r1, #20]
 8002c56:	780a      	ldrb	r2, [r1, #0]
 8002c58:	68c9      	ldr	r1, [r1, #12]
 8002c5a:	f7ff ffad 	bl	8002bb8 <USB_WritePacket>
}
 8002c5e:	2000      	movs	r0, #0
 8002c60:	b002      	add	sp, #8
 8002c62:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002c64:	691c      	ldr	r4, [r3, #16]
 8002c66:	4026      	ands	r6, r4
 8002c68:	611e      	str	r6, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002c6a:	780e      	ldrb	r6, [r1, #0]
 8002c6c:	2320      	movs	r3, #32
 8002c6e:	fb13 5606 	smlabb	r6, r3, r6, r5
 8002c72:	6934      	ldr	r4, [r6, #16]
 8002c74:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8002c78:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002c7c:	6134      	str	r4, [r6, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8002c7e:	688e      	ldr	r6, [r1, #8]
 8002c80:	f891 c000 	ldrb.w	ip, [r1]
 8002c84:	694c      	ldr	r4, [r1, #20]
 8002c86:	fb13 5c0c 	smlabb	ip, r3, ip, r5
 8002c8a:	4434      	add	r4, r6
 8002c8c:	3c01      	subs	r4, #1
 8002c8e:	fbb4 f4f6 	udiv	r4, r4, r6
 8002c92:	4e58      	ldr	r6, [pc, #352]	; (8002df4 <USB_EPStartXfer+0x214>)
 8002c94:	f8dc e010 	ldr.w	lr, [ip, #16]
 8002c98:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 8002c9c:	ea44 040e 	orr.w	r4, r4, lr
 8002ca0:	f8cc 4010 	str.w	r4, [ip, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8002ca4:	780e      	ldrb	r6, [r1, #0]
 8002ca6:	694c      	ldr	r4, [r1, #20]
 8002ca8:	fb13 5606 	smlabb	r6, r3, r6, r5
 8002cac:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002cb0:	f8d6 c010 	ldr.w	ip, [r6, #16]
 8002cb4:	ea44 040c 	orr.w	r4, r4, ip
 8002cb8:	6134      	str	r4, [r6, #16]
      if (ep->type == EP_TYPE_ISOC)
 8002cba:	78cc      	ldrb	r4, [r1, #3]
 8002cbc:	2c01      	cmp	r4, #1
 8002cbe:	f040 8084 	bne.w	8002dca <USB_EPStartXfer+0x1ea>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8002cc2:	780c      	ldrb	r4, [r1, #0]
 8002cc4:	fb13 5404 	smlabb	r4, r3, r4, r5
 8002cc8:	6926      	ldr	r6, [r4, #16]
 8002cca:	f026 46c0 	bic.w	r6, r6, #1610612736	; 0x60000000
 8002cce:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8002cd0:	780c      	ldrb	r4, [r1, #0]
 8002cd2:	fb13 5304 	smlabb	r3, r3, r4, r5
 8002cd6:	691c      	ldr	r4, [r3, #16]
 8002cd8:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8002cdc:	611c      	str	r4, [r3, #16]
 8002cde:	e7a4      	b.n	8002c2a <USB_EPStartXfer+0x4a>
      if (ep->type != EP_TYPE_ISOC)
 8002ce0:	78cb      	ldrb	r3, [r1, #3]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d174      	bne.n	8002dd0 <USB_EPStartXfer+0x1f0>
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8002ce6:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8002cea:	780b      	ldrb	r3, [r1, #0]
 8002cec:	05e4      	lsls	r4, r4, #23
 8002cee:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 8002cf2:	d504      	bpl.n	8002cfe <USB_EPStartXfer+0x11e>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002cf4:	681c      	ldr	r4, [r3, #0]
 8002cf6:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8002cfa:	601c      	str	r4, [r3, #0]
 8002cfc:	e79f      	b.n	8002c3e <USB_EPStartXfer+0x5e>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002cfe:	681c      	ldr	r4, [r3, #0]
 8002d00:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8002d04:	601c      	str	r4, [r3, #0]
 8002d06:	e79a      	b.n	8002c3e <USB_EPStartXfer+0x5e>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8002d08:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8002d0c:	441c      	add	r4, r3
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8002d0e:	f04f 0c20 	mov.w	ip, #32
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8002d12:	6925      	ldr	r5, [r4, #16]
 8002d14:	402e      	ands	r6, r5
 8002d16:	6126      	str	r6, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8002d18:	780d      	ldrb	r5, [r1, #0]
 8002d1a:	fb1c 3505 	smlabb	r5, ip, r5, r3
 8002d1e:	692c      	ldr	r4, [r5, #16]
 8002d20:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8002d24:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002d28:	612c      	str	r4, [r5, #16]
    if (ep->xfer_len == 0U)
 8002d2a:	694d      	ldr	r5, [r1, #20]
 8002d2c:	780e      	ldrb	r6, [r1, #0]
 8002d2e:	688c      	ldr	r4, [r1, #8]
 8002d30:	2d00      	cmp	r5, #0
 8002d32:	d12e      	bne.n	8002d92 <USB_EPStartXfer+0x1b2>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8002d34:	fb1c 3606 	smlabb	r6, ip, r6, r3
 8002d38:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002d3c:	6935      	ldr	r5, [r6, #16]
 8002d3e:	432c      	orrs	r4, r5
 8002d40:	6134      	str	r4, [r6, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8002d42:	780d      	ldrb	r5, [r1, #0]
 8002d44:	fb1c 3505 	smlabb	r5, ip, r5, r3
 8002d48:	692c      	ldr	r4, [r5, #16]
 8002d4a:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002d4e:	612c      	str	r4, [r5, #16]
    if (dma == 1U)
 8002d50:	2a01      	cmp	r2, #1
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8002d52:	bf01      	itttt	eq
 8002d54:	780a      	ldrbeq	r2, [r1, #0]
 8002d56:	68cc      	ldreq	r4, [r1, #12]
 8002d58:	eb03 1242 	addeq.w	r2, r3, r2, lsl #5
 8002d5c:	6154      	streq	r4, [r2, #20]
    if (ep->type == EP_TYPE_ISOC)
 8002d5e:	78ca      	ldrb	r2, [r1, #3]
 8002d60:	2a01      	cmp	r2, #1
 8002d62:	d10e      	bne.n	8002d82 <USB_EPStartXfer+0x1a2>
 8002d64:	780a      	ldrb	r2, [r1, #0]
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8002d66:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8002d6a:	eb03 1242 	add.w	r2, r3, r2, lsl #5
 8002d6e:	6880      	ldr	r0, [r0, #8]
 8002d70:	f410 7f80 	tst.w	r0, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8002d74:	6810      	ldr	r0, [r2, #0]
 8002d76:	bf0c      	ite	eq
 8002d78:	f040 5000 	orreq.w	r0, r0, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002d7c:	f040 5080 	orrne.w	r0, r0, #268435456	; 0x10000000
 8002d80:	6010      	str	r0, [r2, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002d82:	780a      	ldrb	r2, [r1, #0]
 8002d84:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002d8e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002d90:	e765      	b.n	8002c5e <USB_EPStartXfer+0x7e>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8002d92:	fb1c 3606 	smlabb	r6, ip, r6, r3
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8002d96:	4425      	add	r5, r4
 8002d98:	3d01      	subs	r5, #1
 8002d9a:	fbb5 f4f4 	udiv	r4, r5, r4
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8002d9e:	4d15      	ldr	r5, [pc, #84]	; (8002df4 <USB_EPStartXfer+0x214>)
 8002da0:	f8d6 e010 	ldr.w	lr, [r6, #16]
 8002da4:	ea05 45c4 	and.w	r5, r5, r4, lsl #19
 8002da8:	ea45 050e 	orr.w	r5, r5, lr
 8002dac:	6135      	str	r5, [r6, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8002dae:	780d      	ldrb	r5, [r1, #0]
 8002db0:	688e      	ldr	r6, [r1, #8]
 8002db2:	fb1c 3505 	smlabb	r5, ip, r5, r3
 8002db6:	b2a4      	uxth	r4, r4
 8002db8:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8002dbc:	4374      	muls	r4, r6
 8002dbe:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002dc2:	ea44 040c 	orr.w	r4, r4, ip
 8002dc6:	612c      	str	r4, [r5, #16]
 8002dc8:	e7c2      	b.n	8002d50 <USB_EPStartXfer+0x170>
    if (dma == 1U)
 8002dca:	2a01      	cmp	r2, #1
 8002dcc:	f43f af2f 	beq.w	8002c2e <USB_EPStartXfer+0x4e>
        if (ep->xfer_len > 0U)
 8002dd0:	694b      	ldr	r3, [r1, #20]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f43f af33 	beq.w	8002c3e <USB_EPStartXfer+0x5e>
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8002dd8:	f891 c000 	ldrb.w	ip, [r1]
 8002ddc:	f8d0 6834 	ldr.w	r6, [r0, #2100]	; 0x834
 8002de0:	2301      	movs	r3, #1
 8002de2:	fa03 f30c 	lsl.w	r3, r3, ip
 8002de6:	4333      	orrs	r3, r6
 8002de8:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8002dec:	e724      	b.n	8002c38 <USB_EPStartXfer+0x58>
 8002dee:	bf00      	nop
 8002df0:	fff80000 	.word	0xfff80000
 8002df4:	1ff80000 	.word	0x1ff80000

08002df8 <USB_ReadPacket>:
  uint32_t count32b = (len + 3U) / 4U;
 8002df8:	3203      	adds	r2, #3
 8002dfa:	0892      	lsrs	r2, r2, #2
 8002dfc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8002e00:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8002e04:	4291      	cmp	r1, r2
 8002e06:	d101      	bne.n	8002e0c <USB_ReadPacket+0x14>
}
 8002e08:	4608      	mov	r0, r1
 8002e0a:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8002e0c:	6803      	ldr	r3, [r0, #0]
 8002e0e:	f841 3b04 	str.w	r3, [r1], #4
 8002e12:	e7f7      	b.n	8002e04 <USB_ReadPacket+0xc>

08002e14 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8002e14:	784a      	ldrb	r2, [r1, #1]
 8002e16:	780b      	ldrb	r3, [r1, #0]
 8002e18:	2a01      	cmp	r2, #1
 8002e1a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8002e1e:	d109      	bne.n	8002e34 <USB_EPSetStall+0x20>
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8002e20:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8002e24:	58c2      	ldr	r2, [r0, r3]
 8002e26:	2a00      	cmp	r2, #0
 8002e28:	db09      	blt.n	8002e3e <USB_EPSetStall+0x2a>
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8002e2a:	58c2      	ldr	r2, [r0, r3]
 8002e2c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002e30:	50c2      	str	r2, [r0, r3]
 8002e32:	e004      	b.n	8002e3e <USB_EPSetStall+0x2a>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8002e34:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8002e38:	58c2      	ldr	r2, [r0, r3]
 8002e3a:	2a00      	cmp	r2, #0
 8002e3c:	daf5      	bge.n	8002e2a <USB_EPSetStall+0x16>
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002e3e:	780b      	ldrb	r3, [r1, #0]
 8002e40:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002e44:	6803      	ldr	r3, [r0, #0]
 8002e46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e4a:	6003      	str	r3, [r0, #0]
}
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	4770      	bx	lr

08002e50 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8002e50:	784a      	ldrb	r2, [r1, #1]
 8002e52:	780b      	ldrb	r3, [r1, #0]
 8002e54:	2a01      	cmp	r2, #1
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e56:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8002e5a:	bf0c      	ite	eq
 8002e5c:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e60:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8002e64:	581a      	ldr	r2, [r3, r0]
 8002e66:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002e6a:	501a      	str	r2, [r3, r0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8002e6c:	78cb      	ldrb	r3, [r1, #3]
 8002e6e:	3b02      	subs	r3, #2
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d806      	bhi.n	8002e82 <USB_EPClearStall+0x32>
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002e74:	780b      	ldrb	r3, [r1, #0]
 8002e76:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002e7a:	6803      	ldr	r3, [r0, #0]
 8002e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e80:	6003      	str	r3, [r0, #0]
}
 8002e82:	2000      	movs	r0, #0
 8002e84:	4770      	bx	lr

08002e86 <USB_StopDevice>:
{
 8002e86:	b538      	push	{r3, r4, r5, lr}
 8002e88:	f500 612e 	add.w	r1, r0, #2784	; 0xae0
 8002e8c:	4604      	mov	r4, r0
 8002e8e:	f500 6310 	add.w	r3, r0, #2304	; 0x900
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8002e92:	22ff      	movs	r2, #255	; 0xff
 8002e94:	609a      	str	r2, [r3, #8]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8002e96:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8002e9a:	3320      	adds	r3, #32
  for (i = 0U; i < 15U ; i++)
 8002e9c:	428b      	cmp	r3, r1
 8002e9e:	d1f9      	bne.n	8002e94 <USB_StopDevice+0xe>
  USBx_DEVICE->DIEPMSK  = 0U;
 8002ea0:	2500      	movs	r5, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002ea2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ea6:	f8c4 2818 	str.w	r2, [r4, #2072]	; 0x818
  USB_FlushRxFifo(USBx);
 8002eaa:	4620      	mov	r0, r4
  USBx_DEVICE->DIEPMSK  = 0U;
 8002eac:	f8c4 5810 	str.w	r5, [r4, #2064]	; 0x810
  USBx_DEVICE->DOEPMSK  = 0U;
 8002eb0:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
  USBx_DEVICE->DAINTMSK = 0U;
 8002eb4:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
  USB_FlushRxFifo(USBx);
 8002eb8:	f7ff fc04 	bl	80026c4 <USB_FlushRxFifo>
  USB_FlushTxFifo(USBx ,  0x10U);  
 8002ebc:	2110      	movs	r1, #16
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	f7ff fbee 	bl	80026a0 <USB_FlushTxFifo>
}
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	bd38      	pop	{r3, r4, r5, pc}

08002ec8 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8002ec8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002ecc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ed0:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8002ed4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002ed8:	0109      	lsls	r1, r1, #4
 8002eda:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8002ede:	4319      	orrs	r1, r3
 8002ee0:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	4770      	bx	lr

08002ee8 <USB_DevConnect>:
{
 8002ee8:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8002eea:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002eee:	f023 0302 	bic.w	r3, r3, #2
 8002ef2:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002ef6:	2003      	movs	r0, #3
 8002ef8:	f000 fa26 	bl	8003348 <HAL_Delay>
}
 8002efc:	2000      	movs	r0, #0
 8002efe:	bd08      	pop	{r3, pc}

08002f00 <USB_DevDisconnect>:
{
 8002f00:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8002f02:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002f06:	f043 0302 	orr.w	r3, r3, #2
 8002f0a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002f0e:	2003      	movs	r0, #3
 8002f10:	f000 fa1a 	bl	8003348 <HAL_Delay>
}
 8002f14:	2000      	movs	r0, #0
 8002f16:	bd08      	pop	{r3, pc}

08002f18 <USB_ReadInterrupts>:
  v = USBx->GINTSTS;
 8002f18:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8002f1a:	6980      	ldr	r0, [r0, #24]
}
 8002f1c:	4010      	ands	r0, r2
 8002f1e:	4770      	bx	lr

08002f20 <USB_ReadDevAllOutEpInterrupt>:
  v  = USBx_DEVICE->DAINT;
 8002f20:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002f24:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8002f28:	69c0      	ldr	r0, [r0, #28]
 8002f2a:	4018      	ands	r0, r3
}
 8002f2c:	0c00      	lsrs	r0, r0, #16
 8002f2e:	4770      	bx	lr

08002f30 <USB_ReadDevAllInEpInterrupt>:
  v  = USBx_DEVICE->DAINT;
 8002f30:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002f34:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8002f38:	69c0      	ldr	r0, [r0, #28]
 8002f3a:	4018      	ands	r0, r3
}
 8002f3c:	b280      	uxth	r0, r0
 8002f3e:	4770      	bx	lr

08002f40 <USB_ReadDevOutEPInterrupt>:
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8002f40:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8002f44:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 8002f48:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8002f4c:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8002f4e:	6940      	ldr	r0, [r0, #20]
}
 8002f50:	4010      	ands	r0, r2
 8002f52:	4770      	bx	lr

08002f54 <USB_ReadDevInEPInterrupt>:
{
 8002f54:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8002f56:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8002f5a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8002f5e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8002f62:	40cb      	lsrs	r3, r1
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8002f64:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8002f68:	01db      	lsls	r3, r3, #7
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8002f6a:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	4323      	orrs	r3, r4
}
 8002f70:	4018      	ands	r0, r3
 8002f72:	bd10      	pop	{r4, pc}

08002f74 <USB_ClearInterrupts>:
  USBx->GINTSTS |= interrupt; 
 8002f74:	6943      	ldr	r3, [r0, #20]
 8002f76:	4319      	orrs	r1, r3
 8002f78:	6141      	str	r1, [r0, #20]
}
 8002f7a:	4770      	bx	lr

08002f7c <USB_GetMode>:
  return ((USBx->GINTSTS ) & 0x1U);
 8002f7c:	6940      	ldr	r0, [r0, #20]
}
 8002f7e:	f000 0001 	and.w	r0, r0, #1
 8002f82:	4770      	bx	lr

08002f84 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8002f84:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002f88:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002f8c:	f023 0307 	bic.w	r3, r3, #7
 8002f90:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002f94:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	f002 0206 	and.w	r2, r2, #6
 8002f9e:	2a04      	cmp	r2, #4
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8002fa0:	bf02      	ittt	eq
 8002fa2:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8002fa6:	f042 0203 	orreq.w	r2, r2, #3
 8002faa:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fb4:	605a      	str	r2, [r3, #4]
}
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	4770      	bx	lr

08002fba <USB_EP0_OutStart>:
{
 8002fba:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002fbc:	2400      	movs	r4, #0
 8002fbe:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8002fc2:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002fc6:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002fca:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8002fce:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002fd2:	f044 0418 	orr.w	r4, r4, #24
 8002fd6:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8002fda:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 8002fde:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002fe0:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8002fe4:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8002fe8:	bf08      	it	eq
 8002fea:	f04f 2380 	moveq.w	r3, #2147516416	; 0x80008000
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8002fee:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8002ff2:	bf04      	itt	eq
 8002ff4:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8002ff8:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
}
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	bd10      	pop	{r4, pc}

08003000 <USB_InitFSLSPClkSel>:
{
 8003000:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003002:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8003006:	f023 0303 	bic.w	r3, r3, #3
 800300a:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 800300e:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8003012:	f001 0303 	and.w	r3, r1, #3
 8003016:	4323      	orrs	r3, r4
  if (freq ==  HCFG_48_MHZ)
 8003018:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800301a:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 800301e:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq ==  HCFG_48_MHZ)
 8003022:	d104      	bne.n	800302e <USB_InitFSLSPClkSel+0x2e>
    USBx_HOST->HFIR = 48000U;
 8003024:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003028:	6053      	str	r3, [r2, #4]
}
 800302a:	2000      	movs	r0, #0
 800302c:	bd10      	pop	{r4, pc}
  else if (freq ==  HCFG_6_MHZ)
 800302e:	2902      	cmp	r1, #2
    USBx_HOST->HFIR = 6000U;
 8003030:	bf04      	itt	eq
 8003032:	f241 7370 	movweq	r3, #6000	; 0x1770
 8003036:	6053      	streq	r3, [r2, #4]
 8003038:	e7f7      	b.n	800302a <USB_InitFSLSPClkSel+0x2a>

0800303a <USB_ResetPort>:
{
 800303a:	b513      	push	{r0, r1, r4, lr}
  hprt0 = USBx_HPRT0;
 800303c:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003040:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8003042:	9b01      	ldr	r3, [sp, #4]
 8003044:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003048:	9301      	str	r3, [sp, #4]
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 800304a:	9b01      	ldr	r3, [sp, #4]
 800304c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8003050:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 8003052:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay (10U);                                /* See Note #1 */
 8003056:	200a      	movs	r0, #10
 8003058:	f000 f976 	bl	8003348 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 800305c:	9b01      	ldr	r3, [sp, #4]
}
 800305e:	2000      	movs	r0, #0
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 8003060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003064:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
}
 8003068:	b002      	add	sp, #8
 800306a:	bd10      	pop	{r4, pc}

0800306c <USB_DriveVbus>:
{
 800306c:	b082      	sub	sp, #8
  hprt0 = USBx_HPRT0;
 800306e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003072:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8003074:	9b01      	ldr	r3, [sp, #4]
 8003076:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800307a:	9301      	str	r3, [sp, #4]
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800307c:	9b01      	ldr	r3, [sp, #4]
 800307e:	04da      	lsls	r2, r3, #19
 8003080:	d406      	bmi.n	8003090 <USB_DriveVbus+0x24>
 8003082:	2901      	cmp	r1, #1
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 8003084:	bf02      	ittt	eq
 8003086:	9b01      	ldreq	r3, [sp, #4]
 8003088:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800308c:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003090:	9b01      	ldr	r3, [sp, #4]
 8003092:	04db      	lsls	r3, r3, #19
 8003094:	d505      	bpl.n	80030a2 <USB_DriveVbus+0x36>
 8003096:	b921      	cbnz	r1, 80030a2 <USB_DriveVbus+0x36>
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 8003098:	9b01      	ldr	r3, [sp, #4]
 800309a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800309e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
}
 80030a2:	2000      	movs	r0, #0
 80030a4:	b002      	add	sp, #8
 80030a6:	4770      	bx	lr

080030a8 <USB_HostInit>:
{
 80030a8:	b084      	sub	sp, #16
 80030aa:	b538      	push	{r3, r4, r5, lr}
 80030ac:	4604      	mov	r4, r0
 80030ae:	a805      	add	r0, sp, #20
 80030b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSASEN);
 80030ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80030bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c0:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
 80030c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80030c4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80030c8:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80030ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80030cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030d0:	63a3      	str	r3, [r4, #56]	; 0x38
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 80030d2:	9b07      	ldr	r3, [sp, #28]
 80030d4:	2b03      	cmp	r3, #3
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 80030d6:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 80030da:	d13c      	bne.n	8003156 <USB_HostInit+0xae>
 80030dc:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80030e0:	d039      	beq.n	8003156 <USB_HostInit+0xae>
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 80030e2:	f043 0304 	orr.w	r3, r3, #4
 80030e6:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80030ea:	2110      	movs	r1, #16
 80030ec:	4620      	mov	r0, r4
 80030ee:	f7ff fad7 	bl	80026a0 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80030f2:	4620      	mov	r0, r4
 80030f4:	f7ff fae6 	bl	80026c4 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 80030f8:	2300      	movs	r3, #0
 80030fa:	9906      	ldr	r1, [sp, #24]
 80030fc:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    USBx_HC(i)->HCINTMSK = 0U;
 8003104:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8003106:	4299      	cmp	r1, r3
 8003108:	d12a      	bne.n	8003160 <USB_HostInit+0xb8>
  USB_DriveVbus(USBx, 1U);
 800310a:	2101      	movs	r1, #1
 800310c:	4620      	mov	r0, r4
 800310e:	f7ff ffad 	bl	800306c <USB_DriveVbus>
  HAL_Delay(200U);
 8003112:	20c8      	movs	r0, #200	; 0xc8
 8003114:	f000 f918 	bl	8003348 <HAL_Delay>
  USBx->GINTMSK = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	61a3      	str	r3, [r4, #24]
  if(USBx == USB_OTG_FS)
 800311c:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003124:	6163      	str	r3, [r4, #20]
  if(USBx == USB_OTG_FS)
 8003126:	d120      	bne.n	800316a <USB_HostInit+0xc2>
    USBx->GRXFSIZ  = 0x80U; 
 8003128:	2380      	movs	r3, #128	; 0x80
 800312a:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 800312c:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8003130:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003132:	4b13      	ldr	r3, [pc, #76]	; (8003180 <USB_HostInit+0xd8>)
 8003134:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == DISABLE)
 8003138:	9b08      	ldr	r3, [sp, #32]
 800313a:	b91b      	cbnz	r3, 8003144 <USB_HostInit+0x9c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 800313c:	69a3      	ldr	r3, [r4, #24]
 800313e:	f043 0310 	orr.w	r3, r3, #16
 8003142:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 8003144:	69a2      	ldr	r2, [r4, #24]
 8003146:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <USB_HostInit+0xdc>)
 8003148:	4313      	orrs	r3, r2
 800314a:	61a3      	str	r3, [r4, #24]
}
 800314c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003150:	2000      	movs	r0, #0
 8003152:	b004      	add	sp, #16
 8003154:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 8003156:	f023 0304 	bic.w	r3, r3, #4
 800315a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 800315e:	e7c4      	b.n	80030ea <USB_HostInit+0x42>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003160:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003162:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8003164:	60d5      	str	r5, [r2, #12]
 8003166:	3220      	adds	r2, #32
 8003168:	e7cd      	b.n	8003106 <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x200U; 
 800316a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800316e:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 8003170:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8003174:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003176:	4b04      	ldr	r3, [pc, #16]	; (8003188 <USB_HostInit+0xe0>)
 8003178:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800317c:	e7dc      	b.n	8003138 <USB_HostInit+0x90>
 800317e:	bf00      	nop
 8003180:	004000e0 	.word	0x004000e0
 8003184:	a3200008 	.word	0xa3200008
 8003188:	00e00300 	.word	0x00e00300

0800318c <USB_GetHostSpeed>:
{
 800318c:	b082      	sub	sp, #8
  hprt0 = USBx_HPRT0;
 800318e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003192:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17U);
 8003194:	9801      	ldr	r0, [sp, #4]
}
 8003196:	f3c0 4041 	ubfx	r0, r0, #17, #2
 800319a:	b002      	add	sp, #8
 800319c:	4770      	bx	lr

0800319e <USB_GetCurrentFrame>:
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800319e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80031a2:	6880      	ldr	r0, [r0, #8]
}
 80031a4:	b280      	uxth	r0, r0
 80031a6:	4770      	bx	lr

080031a8 <USB_HC_Init>:
{
 80031a8:	e92d 4170 	stmdb	sp!, {r4, r5, r6, r8, lr}
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 80031ac:	f500 64a0 	add.w	r4, r0, #1280	; 0x500
 80031b0:	eb04 1441 	add.w	r4, r4, r1, lsl #5
{
 80031b4:	f89d 6018 	ldrb.w	r6, [sp, #24]
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 80031b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80031bc:	60a5      	str	r5, [r4, #8]
  switch (ep_type) 
 80031be:	b255      	sxtb	r5, r2
 80031c0:	2e03      	cmp	r6, #3
 80031c2:	d80f      	bhi.n	80031e4 <USB_HC_Init+0x3c>
 80031c4:	e8df f006 	tbb	[pc, r6]
 80031c8:	51025e02 	.word	0x51025e02
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80031cc:	f240 4c9d 	movw	ip, #1181	; 0x49d
    if (epnum & 0x80U) 
 80031d0:	2d00      	cmp	r5, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80031d2:	f8c4 c00c 	str.w	ip, [r4, #12]
    if (epnum & 0x80U) 
 80031d6:	da3e      	bge.n	8003256 <USB_HC_Init+0xae>
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80031d8:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80031dc:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 80031e0:	f8c4 c00c 	str.w	ip, [r4, #12]
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80031e4:	059b      	lsls	r3, r3, #22
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 80031e6:	02d2      	lsls	r2, r2, #11
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80031e8:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 80031ec:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 80031f0:	f8d0 8418 	ldr.w	r8, [r0, #1048]	; 0x418
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80031f4:	431a      	orrs	r2, r3
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 80031f6:	f04f 0c01 	mov.w	ip, #1
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80031fa:	f89d 3014 	ldrb.w	r3, [sp, #20]
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 80031fe:	fa0c f101 	lsl.w	r1, ip, r1
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8003202:	2b02      	cmp	r3, #2
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8003204:	ea41 0108 	orr.w	r1, r1, r8
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 8003208:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 800320c:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003210:	6981      	ldr	r1, [r0, #24]
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 8003212:	f3c3 030a 	ubfx	r3, r3, #0, #11
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 8003216:	f405 4500 	and.w	r5, r5, #32768	; 0x8000
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 800321a:	ea43 0302 	orr.w	r3, r3, r2
 800321e:	ea4f 4286 	mov.w	r2, r6, lsl #18
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003222:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8003226:	ea43 0305 	orr.w	r3, r3, r5
 800322a:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800322e:	6181      	str	r1, [r0, #24]
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8003230:	ea43 0302 	orr.w	r3, r3, r2
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8003234:	bf0c      	ite	eq
 8003236:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 800323a:	2100      	movne	r1, #0
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 800323c:	430b      	orrs	r3, r1
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 800323e:	6023      	str	r3, [r4, #0]
  if (ep_type == EP_TYPE_INTR)
 8003240:	2e03      	cmp	r6, #3
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8003242:	bf02      	ittt	eq
 8003244:	6823      	ldreq	r3, [r4, #0]
 8003246:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 800324a:	6023      	streq	r3, [r4, #0]
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 800324c:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
}
 8003250:	2000      	movs	r0, #0
 8003252:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
      if(USBx != USB_OTG_FS)
 8003256:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 800325a:	d0c3      	beq.n	80031e4 <USB_HC_Init+0x3c>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800325c:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8003260:	f04c 0c60 	orr.w	ip, ip, #96	; 0x60
 8003264:	f8c4 c00c 	str.w	ip, [r4, #12]
 8003268:	e7bc      	b.n	80031e4 <USB_HC_Init+0x3c>
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 800326a:	f240 6c9d 	movw	ip, #1693	; 0x69d
    if (epnum & 0x80U) 
 800326e:	2d00      	cmp	r5, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8003270:	f8c4 c00c 	str.w	ip, [r4, #12]
    if (epnum & 0x80U) 
 8003274:	dab6      	bge.n	80031e4 <USB_HC_Init+0x3c>
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003276:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800327a:	f44e 7e80 	orr.w	lr, lr, #256	; 0x100
 800327e:	f8c4 e00c 	str.w	lr, [r4, #12]
 8003282:	e7af      	b.n	80031e4 <USB_HC_Init+0x3c>
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8003284:	f240 2c25 	movw	ip, #549	; 0x225
    if (epnum & 0x80U) 
 8003288:	2d00      	cmp	r5, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 800328a:	f8c4 c00c 	str.w	ip, [r4, #12]
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);      
 800328e:	bfbe      	ittt	lt
 8003290:	f8d4 e00c 	ldrlt.w	lr, [r4, #12]
 8003294:	f44e 7ec0 	orrlt.w	lr, lr, #384	; 0x180
 8003298:	f8c4 e00c 	strlt.w	lr, [r4, #12]
 800329c:	e7a2      	b.n	80031e4 <USB_HC_Init+0x3c>
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800329e:	4770      	bx	lr

080032a0 <HAL_MspDeInit>:
 80032a0:	4770      	bx	lr
	...

080032a4 <HAL_DeInit>:
{
 80032a4:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <HAL_DeInit+0x28>)
 80032a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  __HAL_RCC_APB1_RELEASE_RESET();
 80032ac:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 80032ae:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80032b0:	621c      	str	r4, [r3, #32]
  __HAL_RCC_APB2_FORCE_RESET();
 80032b2:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80032b4:	625c      	str	r4, [r3, #36]	; 0x24
  __HAL_RCC_AHB1_FORCE_RESET();
 80032b6:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80032b8:	611c      	str	r4, [r3, #16]
  __HAL_RCC_AHB2_FORCE_RESET();
 80032ba:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80032bc:	615c      	str	r4, [r3, #20]
  __HAL_RCC_AHB3_FORCE_RESET();
 80032be:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80032c0:	619c      	str	r4, [r3, #24]
  HAL_MspDeInit();
 80032c2:	f7ff ffed 	bl	80032a0 <HAL_MspDeInit>
}
 80032c6:	4620      	mov	r0, r4
 80032c8:	bd10      	pop	{r4, pc}
 80032ca:	bf00      	nop
 80032cc:	40023800 	.word	0x40023800

080032d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032d0:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80032d2:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <HAL_InitTick+0x24>)
{
 80032d4:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80032e0:	f000 fce6 	bl	8003cb0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032e4:	2200      	movs	r2, #0
 80032e6:	4621      	mov	r1, r4
 80032e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032ec:	f000 fc80 	bl	8003bf0 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80032f0:	2000      	movs	r0, #0
 80032f2:	bd10      	pop	{r4, pc}
 80032f4:	20000158 	.word	0x20000158

080032f8 <HAL_Init>:
{
 80032f8:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032fa:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_Init+0x30>)
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003302:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800330a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003312:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003314:	2003      	movs	r0, #3
 8003316:	f000 fc59 	bl	8003bcc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800331a:	2000      	movs	r0, #0
 800331c:	f7ff ffd8 	bl	80032d0 <HAL_InitTick>
  HAL_MspInit();
 8003320:	f7fd fcb7 	bl	8000c92 <HAL_MspInit>
}
 8003324:	2000      	movs	r0, #0
 8003326:	bd08      	pop	{r3, pc}
 8003328:	40023c00 	.word	0x40023c00

0800332c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800332c:	4a02      	ldr	r2, [pc, #8]	; (8003338 <HAL_IncTick+0xc>)
 800332e:	6813      	ldr	r3, [r2, #0]
 8003330:	3301      	adds	r3, #1
 8003332:	6013      	str	r3, [r2, #0]
}
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	200009d0 	.word	0x200009d0

0800333c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800333c:	4b01      	ldr	r3, [pc, #4]	; (8003344 <HAL_GetTick+0x8>)
 800333e:	6818      	ldr	r0, [r3, #0]
}
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	200009d0 	.word	0x200009d0

08003348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8003348:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800334a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800334c:	f7ff fff6 	bl	800333c <HAL_GetTick>
  uint32_t wait = Delay;
 8003350:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003352:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003354:	4605      	mov	r5, r0
  {
     wait++;
 8003356:	bf18      	it	ne
 8003358:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800335a:	f7ff ffef 	bl	800333c <HAL_GetTick>
 800335e:	1b40      	subs	r0, r0, r5
 8003360:	42a0      	cmp	r0, r4
 8003362:	d3fa      	bcc.n	800335a <HAL_Delay+0x12>
  {
  }
}
 8003364:	b003      	add	sp, #12
 8003366:	bd30      	pop	{r4, r5, pc}

08003368 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003368:	4a02      	ldr	r2, [pc, #8]	; (8003374 <HAL_SuspendTick+0xc>)
 800336a:	6813      	ldr	r3, [r2, #0]
 800336c:	f023 0302 	bic.w	r3, r3, #2
 8003370:	6013      	str	r3, [r2, #0]
}
 8003372:	4770      	bx	lr
 8003374:	e000e010 	.word	0xe000e010

08003378 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003378:	4a02      	ldr	r2, [pc, #8]	; (8003384 <HAL_ResumeTick+0xc>)
 800337a:	6813      	ldr	r3, [r2, #0]
 800337c:	f043 0302 	orr.w	r3, r3, #2
 8003380:	6013      	str	r3, [r2, #0]
}
 8003382:	4770      	bx	lr
 8003384:	e000e010 	.word	0xe000e010

08003388 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32F4xx_HAL_VERSION;
}
 8003388:	4800      	ldr	r0, [pc, #0]	; (800338c <HAL_GetHalVersion+0x4>)
 800338a:	4770      	bx	lr
 800338c:	01070100 	.word	0x01070100

08003390 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 8003390:	4b01      	ldr	r3, [pc, #4]	; (8003398 <HAL_GetREVID+0x8>)
 8003392:	6818      	ldr	r0, [r3, #0]
}
 8003394:	0c00      	lsrs	r0, r0, #16
 8003396:	4770      	bx	lr
 8003398:	e0042000 	.word	0xe0042000

0800339c <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800339c:	4b02      	ldr	r3, [pc, #8]	; (80033a8 <HAL_GetDEVID+0xc>)
 800339e:	6818      	ldr	r0, [r3, #0]
}
 80033a0:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	e0042000 	.word	0xe0042000

080033ac <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80033ac:	4a02      	ldr	r2, [pc, #8]	; (80033b8 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 80033ae:	6853      	ldr	r3, [r2, #4]
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	6053      	str	r3, [r2, #4]
}
 80033b6:	4770      	bx	lr
 80033b8:	e0042000 	.word	0xe0042000

080033bc <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80033bc:	4a02      	ldr	r2, [pc, #8]	; (80033c8 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 80033be:	6853      	ldr	r3, [r2, #4]
 80033c0:	f023 0301 	bic.w	r3, r3, #1
 80033c4:	6053      	str	r3, [r2, #4]
}
 80033c6:	4770      	bx	lr
 80033c8:	e0042000 	.word	0xe0042000

080033cc <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80033cc:	4a02      	ldr	r2, [pc, #8]	; (80033d8 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80033ce:	6853      	ldr	r3, [r2, #4]
 80033d0:	f043 0302 	orr.w	r3, r3, #2
 80033d4:	6053      	str	r3, [r2, #4]
}
 80033d6:	4770      	bx	lr
 80033d8:	e0042000 	.word	0xe0042000

080033dc <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80033dc:	4a02      	ldr	r2, [pc, #8]	; (80033e8 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80033de:	6853      	ldr	r3, [r2, #4]
 80033e0:	f023 0302 	bic.w	r3, r3, #2
 80033e4:	6053      	str	r3, [r2, #4]
}
 80033e6:	4770      	bx	lr
 80033e8:	e0042000 	.word	0xe0042000

080033ec <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80033ec:	4a02      	ldr	r2, [pc, #8]	; (80033f8 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80033ee:	6853      	ldr	r3, [r2, #4]
 80033f0:	f043 0304 	orr.w	r3, r3, #4
 80033f4:	6053      	str	r3, [r2, #4]
}
 80033f6:	4770      	bx	lr
 80033f8:	e0042000 	.word	0xe0042000

080033fc <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80033fc:	4a02      	ldr	r2, [pc, #8]	; (8003408 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80033fe:	6853      	ldr	r3, [r2, #4]
 8003400:	f023 0304 	bic.w	r3, r3, #4
 8003404:	6053      	str	r3, [r2, #4]
}
 8003406:	4770      	bx	lr
 8003408:	e0042000 	.word	0xe0042000

0800340c <HAL_EnableCompensationCell>:
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340c:	2101      	movs	r1, #1
 800340e:	fa91 f2a1 	rbit	r2, r1
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 8003412:	4b03      	ldr	r3, [pc, #12]	; (8003420 <HAL_EnableCompensationCell+0x14>)
 8003414:	fab2 f282 	clz	r2, r2
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	6019      	str	r1, [r3, #0]
}
 800341e:	4770      	bx	lr
 8003420:	1089c100 	.word	0x1089c100

08003424 <HAL_DisableCompensationCell>:
 8003424:	2201      	movs	r2, #1
 8003426:	fa92 f2a2 	rbit	r2, r2
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 800342a:	4b04      	ldr	r3, [pc, #16]	; (800343c <HAL_DisableCompensationCell+0x18>)
 800342c:	fab2 f282 	clz	r2, r2
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
}
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	1089c100 	.word	0x1089c100

08003440 <HAL_GetUID>:
  * @param UID: pointer to 3 words array.
  * @retval Device identifier
  */
void HAL_GetUID(uint32_t *UID)
{
  UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
 8003440:	4b04      	ldr	r3, [pc, #16]	; (8003454 <HAL_GetUID+0x14>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6003      	str	r3, [r0, #0]
  UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003446:	4b04      	ldr	r3, [pc, #16]	; (8003458 <HAL_GetUID+0x18>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6043      	str	r3, [r0, #4]
  UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <HAL_GetUID+0x1c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6083      	str	r3, [r0, #8]
}
 8003452:	4770      	bx	lr
 8003454:	1fff7a10 	.word	0x1fff7a10
 8003458:	1fff7a14 	.word	0x1fff7a14
 800345c:	1fff7a18 	.word	0x1fff7a18

08003460 <HAL_PWR_DeInit>:
  * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
  __HAL_RCC_PWR_FORCE_RESET();
 8003460:	4b04      	ldr	r3, [pc, #16]	; (8003474 <HAL_PWR_DeInit+0x14>)
 8003462:	6a1a      	ldr	r2, [r3, #32]
 8003464:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003468:	621a      	str	r2, [r3, #32]
  __HAL_RCC_PWR_RELEASE_RESET();
 800346a:	6a1a      	ldr	r2, [r3, #32]
 800346c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003470:	621a      	str	r2, [r3, #32]
}
 8003472:	4770      	bx	lr
 8003474:	40023800 	.word	0x40023800

08003478 <HAL_PWR_EnableBkUpAccess>:
 8003478:	f44f 7380 	mov.w	r3, #256	; 0x100
 800347c:	fa93 f3a3 	rbit	r3, r3
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003480:	fab3 f383 	clz	r3, r3
 8003484:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003488:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	2201      	movs	r2, #1
 8003490:	601a      	str	r2, [r3, #0]
}
 8003492:	4770      	bx	lr

08003494 <HAL_PWR_DisableBkUpAccess>:
 8003494:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003498:	fa93 f3a3 	rbit	r3, r3
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800349c:	fab3 f383 	clz	r3, r3
 80034a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034a4:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
}
 80034ae:	4770      	bx	lr

080034b0 <HAL_PWR_ConfigPVD>:
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
  
  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 80034b0:	4a1b      	ldr	r2, [pc, #108]	; (8003520 <HAL_PWR_ConfigPVD+0x70>)
 80034b2:	6801      	ldr	r1, [r0, #0]
 80034b4:	6813      	ldr	r3, [r2, #0]
 80034b6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80034ba:	430b      	orrs	r3, r1
 80034bc:	6013      	str	r3, [r2, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80034be:	4b19      	ldr	r3, [pc, #100]	; (8003524 <HAL_PWR_ConfigPVD+0x74>)
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034c6:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034ce:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034d6:	609a      	str	r2, [r3, #8]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034de:	60da      	str	r2, [r3, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80034e0:	6842      	ldr	r2, [r0, #4]
 80034e2:	03d2      	lsls	r2, r2, #15
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80034e4:	bf42      	ittt	mi
 80034e6:	681a      	ldrmi	r2, [r3, #0]
 80034e8:	f442 3280 	orrmi.w	r2, r2, #65536	; 0x10000
 80034ec:	601a      	strmi	r2, [r3, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80034ee:	6842      	ldr	r2, [r0, #4]
 80034f0:	0391      	lsls	r1, r2, #14
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80034f2:	bf42      	ittt	mi
 80034f4:	685a      	ldrmi	r2, [r3, #4]
 80034f6:	f442 3280 	orrmi.w	r2, r2, #65536	; 0x10000
 80034fa:	605a      	strmi	r2, [r3, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80034fc:	6843      	ldr	r3, [r0, #4]
 80034fe:	07da      	lsls	r2, r3, #31
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8003500:	bf41      	itttt	mi
 8003502:	4a08      	ldrmi	r2, [pc, #32]	; (8003524 <HAL_PWR_ConfigPVD+0x74>)
 8003504:	6893      	ldrmi	r3, [r2, #8]
 8003506:	f443 3380 	orrmi.w	r3, r3, #65536	; 0x10000
 800350a:	6093      	strmi	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800350c:	6843      	ldr	r3, [r0, #4]
 800350e:	079b      	lsls	r3, r3, #30
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8003510:	bf41      	itttt	mi
 8003512:	4a04      	ldrmi	r2, [pc, #16]	; (8003524 <HAL_PWR_ConfigPVD+0x74>)
 8003514:	68d3      	ldrmi	r3, [r2, #12]
 8003516:	f443 3380 	orrmi.w	r3, r3, #65536	; 0x10000
 800351a:	60d3      	strmi	r3, [r2, #12]
  }
}
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40007000 	.word	0x40007000
 8003524:	40013c00 	.word	0x40013c00

08003528 <HAL_PWR_EnablePVD>:
 8003528:	2310      	movs	r3, #16
 800352a:	fa93 f3a3 	rbit	r3, r3
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 800352e:	fab3 f383 	clz	r3, r3
 8003532:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003536:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	2201      	movs	r2, #1
 800353e:	601a      	str	r2, [r3, #0]
}
 8003540:	4770      	bx	lr

08003542 <HAL_PWR_DisablePVD>:
 8003542:	2310      	movs	r3, #16
 8003544:	fa93 f3a3 	rbit	r3, r3
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 8003548:	fab3 f383 	clz	r3, r3
 800354c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003550:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]
}
 800355a:	4770      	bx	lr

0800355c <HAL_PWR_EnableWakeUpPin>:
{
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800355c:	4a02      	ldr	r2, [pc, #8]	; (8003568 <HAL_PWR_EnableWakeUpPin+0xc>)
 800355e:	6853      	ldr	r3, [r2, #4]
 8003560:	4318      	orrs	r0, r3
 8003562:	6050      	str	r0, [r2, #4]
}
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40007000 	.word	0x40007000

0800356c <HAL_PWR_DisableWakeUpPin>:
{
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800356c:	4a02      	ldr	r2, [pc, #8]	; (8003578 <HAL_PWR_DisableWakeUpPin+0xc>)
 800356e:	6853      	ldr	r3, [r2, #4]
 8003570:	ea23 0000 	bic.w	r0, r3, r0
 8003574:	6050      	str	r0, [r2, #4]
}
 8003576:	4770      	bx	lr
 8003578:	40007000 	.word	0x40007000

0800357c <HAL_PWR_EnterSLEEPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800357c:	4a06      	ldr	r2, [pc, #24]	; (8003598 <HAL_PWR_EnterSLEEPMode+0x1c>)
 800357e:	6913      	ldr	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003580:	2901      	cmp	r1, #1
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003582:	f023 0304 	bic.w	r3, r3, #4
 8003586:	6113      	str	r3, [r2, #16]
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003588:	d101      	bne.n	800358e <HAL_PWR_EnterSLEEPMode+0x12>
  __ASM volatile ("wfi");
 800358a:	bf30      	wfi
 800358c:	4770      	bx	lr
  __ASM volatile ("sev");
 800358e:	bf40      	sev
  __ASM volatile ("wfe");
 8003590:	bf20      	wfe
 8003592:	bf20      	wfe
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <HAL_PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 800359c:	4a0b      	ldr	r2, [pc, #44]	; (80035cc <HAL_PWR_EnterSTOPMode+0x30>)
 800359e:	6813      	ldr	r3, [r2, #0]
 80035a0:	f023 0303 	bic.w	r3, r3, #3
 80035a4:	4318      	orrs	r0, r3
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80035a6:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <HAL_PWR_EnterSTOPMode+0x34>)
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 80035a8:	6010      	str	r0, [r2, #0]
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80035aa:	691a      	ldr	r2, [r3, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80035ac:	2901      	cmp	r1, #1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80035ae:	f042 0204 	orr.w	r2, r2, #4
 80035b2:	611a      	str	r2, [r3, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80035b4:	d105      	bne.n	80035c2 <HAL_PWR_EnterSTOPMode+0x26>
  __ASM volatile ("wfi");
 80035b6:	bf30      	wfi
    __SEV();
    __WFE();
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 80035b8:	691a      	ldr	r2, [r3, #16]
 80035ba:	f022 0204 	bic.w	r2, r2, #4
 80035be:	611a      	str	r2, [r3, #16]
}
 80035c0:	4770      	bx	lr
  __ASM volatile ("sev");
 80035c2:	bf40      	sev
  __ASM volatile ("wfe");
 80035c4:	bf20      	wfe
 80035c6:	bf20      	wfe
 80035c8:	e7f6      	b.n	80035b8 <HAL_PWR_EnterSTOPMode+0x1c>
 80035ca:	bf00      	nop
 80035cc:	40007000 	.word	0x40007000
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <HAL_PWR_EnterSTANDBYMode>:
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80035d4:	4a05      	ldr	r2, [pc, #20]	; (80035ec <HAL_PWR_EnterSTANDBYMode+0x18>)
 80035d6:	6813      	ldr	r3, [r2, #0]
 80035d8:	f043 0302 	orr.w	r3, r3, #2
 80035dc:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80035de:	4a04      	ldr	r2, [pc, #16]	; (80035f0 <HAL_PWR_EnterSTANDBYMode+0x1c>)
 80035e0:	6913      	ldr	r3, [r2, #16]
 80035e2:	f043 0304 	orr.w	r3, r3, #4
 80035e6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 80035e8:	bf30      	wfi
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 80035ea:	4770      	bx	lr
 80035ec:	40007000 	.word	0x40007000
 80035f0:	e000ed00 	.word	0xe000ed00

080035f4 <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80035f4:	4770      	bx	lr
	...

080035f8 <HAL_PWR_PVD_IRQHandler>:
{
 80035f8:	b510      	push	{r4, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80035fa:	4c05      	ldr	r4, [pc, #20]	; (8003610 <HAL_PWR_PVD_IRQHandler+0x18>)
 80035fc:	6963      	ldr	r3, [r4, #20]
 80035fe:	03db      	lsls	r3, r3, #15
 8003600:	d504      	bpl.n	800360c <HAL_PWR_PVD_IRQHandler+0x14>
    HAL_PWR_PVDCallback();
 8003602:	f7ff fff7 	bl	80035f4 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003606:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800360a:	6163      	str	r3, [r4, #20]
}
 800360c:	bd10      	pop	{r4, pc}
 800360e:	bf00      	nop
 8003610:	40013c00 	.word	0x40013c00

08003614 <HAL_PWR_EnableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8003614:	4a02      	ldr	r2, [pc, #8]	; (8003620 <HAL_PWR_EnableSleepOnExit+0xc>)
 8003616:	6913      	ldr	r3, [r2, #16]
 8003618:	f043 0302 	orr.w	r3, r3, #2
 800361c:	6113      	str	r3, [r2, #16]
}
 800361e:	4770      	bx	lr
 8003620:	e000ed00 	.word	0xe000ed00

08003624 <HAL_PWR_DisableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8003624:	4a02      	ldr	r2, [pc, #8]	; (8003630 <HAL_PWR_DisableSleepOnExit+0xc>)
 8003626:	6913      	ldr	r3, [r2, #16]
 8003628:	f023 0302 	bic.w	r3, r3, #2
 800362c:	6113      	str	r3, [r2, #16]
}
 800362e:	4770      	bx	lr
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <HAL_PWR_EnableSEVOnPend>:
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8003634:	4a02      	ldr	r2, [pc, #8]	; (8003640 <HAL_PWR_EnableSEVOnPend+0xc>)
 8003636:	6913      	ldr	r3, [r2, #16]
 8003638:	f043 0310 	orr.w	r3, r3, #16
 800363c:	6113      	str	r3, [r2, #16]
}
 800363e:	4770      	bx	lr
 8003640:	e000ed00 	.word	0xe000ed00

08003644 <HAL_PWR_DisableSEVOnPend>:
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8003644:	4a02      	ldr	r2, [pc, #8]	; (8003650 <HAL_PWR_DisableSEVOnPend+0xc>)
 8003646:	6913      	ldr	r3, [r2, #16]
 8003648:	f023 0310 	bic.w	r3, r3, #16
 800364c:	6113      	str	r3, [r2, #16]
}
 800364e:	4770      	bx	lr
 8003650:	e000ed00 	.word	0xe000ed00

08003654 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo: The number of Tx fifo
  * @param  size: Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003654:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003656:	6803      	ldr	r3, [r0, #0]
 8003658:	0412      	lsls	r2, r2, #16
 800365a:	6a58      	ldr	r0, [r3, #36]	; 0x24
  
  if(fifo == 0)
 800365c:	b919      	cbnz	r1, 8003666 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 800365e:	4302      	orrs	r2, r0
 8003660:	629a      	str	r2, [r3, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
  }
  
  return HAL_OK;
}
 8003662:	2000      	movs	r0, #0
 8003664:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8003666:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 8003668:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 800366a:	eb00 4014 	add.w	r0, r0, r4, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 800366e:	1e4e      	subs	r6, r1, #1
 8003670:	b2ec      	uxtb	r4, r5
 8003672:	42b4      	cmp	r4, r6
 8003674:	f105 0501 	add.w	r5, r5, #1
 8003678:	db05      	blt.n	8003686 <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 800367a:	313f      	adds	r1, #63	; 0x3f
 800367c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003680:	4302      	orrs	r2, r0
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	e7ed      	b.n	8003662 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8003686:	3440      	adds	r4, #64	; 0x40
 8003688:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800368c:	6864      	ldr	r4, [r4, #4]
 800368e:	eb00 4014 	add.w	r0, r0, r4, lsr #16
 8003692:	e7ed      	b.n	8003670 <HAL_PCDEx_SetTxFiFo+0x1c>

08003694 <HAL_PCDEx_SetRxFiFo>:
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8003694:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 8003696:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8003698:	6259      	str	r1, [r3, #36]	; 0x24
}
 800369a:	4770      	bx	lr

0800369c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800369c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a0:	f8df c17c 	ldr.w	ip, [pc, #380]	; 8003820 <HAL_GPIO_Init+0x184>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036a4:	4a5c      	ldr	r2, [pc, #368]	; (8003818 <HAL_GPIO_Init+0x17c>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036a6:	f8df b17c 	ldr.w	fp, [pc, #380]	; 8003824 <HAL_GPIO_Init+0x188>
 80036aa:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8003828 <HAL_GPIO_Init+0x18c>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ae:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80036b0:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036b4:	680c      	ldr	r4, [r1, #0]
    ioposition = 0x01U << position;
 80036b6:	fa0e f803 	lsl.w	r8, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ba:	ea08 0404 	and.w	r4, r8, r4
    if(iocurrent == ioposition)
 80036be:	45a0      	cmp	r8, r4
 80036c0:	f040 809a 	bne.w	80037f8 <HAL_GPIO_Init+0x15c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036c4:	684d      	ldr	r5, [r1, #4]
 80036c6:	f025 0510 	bic.w	r5, r5, #16
 80036ca:	2d02      	cmp	r5, #2
 80036cc:	d111      	bne.n	80036f2 <HAL_GPIO_Init+0x56>
        temp = GPIOx->AFR[position >> 3U];
 80036ce:	08df      	lsrs	r7, r3, #3
 80036d0:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036d4:	f003 0907 	and.w	r9, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80036d8:	6a3d      	ldr	r5, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036da:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80036de:	260f      	movs	r6, #15
 80036e0:	fa06 f609 	lsl.w	r6, r6, r9
 80036e4:	ea25 0606 	bic.w	r6, r5, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036e8:	690d      	ldr	r5, [r1, #16]
 80036ea:	fa05 f509 	lsl.w	r5, r5, r9
 80036ee:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3U] = temp;
 80036f0:	623d      	str	r5, [r7, #32]
      temp = GPIOx->MODER;
 80036f2:	005f      	lsls	r7, r3, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036f4:	684d      	ldr	r5, [r1, #4]
      temp = GPIOx->MODER;
 80036f6:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036f8:	f04f 0903 	mov.w	r9, #3
 80036fc:	fa09 f907 	lsl.w	r9, r9, r7
 8003700:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003704:	f005 0503 	and.w	r5, r5, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003708:	ea09 0606 	and.w	r6, r9, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800370c:	40bd      	lsls	r5, r7
 800370e:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 8003710:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003712:	684e      	ldr	r6, [r1, #4]
 8003714:	f026 0610 	bic.w	r6, r6, #16
 8003718:	3e01      	subs	r6, #1
 800371a:	2e01      	cmp	r6, #1
 800371c:	d810      	bhi.n	8003740 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR; 
 800371e:	6885      	ldr	r5, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003720:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003722:	ea09 0505 	and.w	r5, r9, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003726:	40be      	lsls	r6, r7
 8003728:	432e      	orrs	r6, r5
        GPIOx->OSPEEDR = temp;
 800372a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800372c:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800372e:	ea25 0808 	bic.w	r8, r5, r8
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003732:	684d      	ldr	r5, [r1, #4]
 8003734:	f3c5 1500 	ubfx	r5, r5, #4, #1
 8003738:	409d      	lsls	r5, r3
 800373a:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->OTYPER = temp;
 800373e:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8003740:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003742:	ea09 0905 	and.w	r9, r9, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003746:	688d      	ldr	r5, [r1, #8]
 8003748:	40bd      	lsls	r5, r7
 800374a:	ea45 0509 	orr.w	r5, r5, r9
      GPIOx->PUPDR = temp;
 800374e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003750:	684d      	ldr	r5, [r1, #4]
 8003752:	00ee      	lsls	r6, r5, #3
 8003754:	d550      	bpl.n	80037f8 <HAL_GPIO_Init+0x15c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003756:	2500      	movs	r5, #0
 8003758:	9501      	str	r5, [sp, #4]
 800375a:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800375e:	4d2f      	ldr	r5, [pc, #188]	; (800381c <HAL_GPIO_Init+0x180>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003760:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8003764:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8003768:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 800376c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8003770:	9601      	str	r6, [sp, #4]
 8003772:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003774:	f023 0603 	bic.w	r6, r3, #3
 8003778:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800377c:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003780:	f003 0803 	and.w	r8, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003784:	f8d6 9008 	ldr.w	r9, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003788:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800378c:	270f      	movs	r7, #15
 800378e:	fa07 f708 	lsl.w	r7, r7, r8
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003792:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003794:	ea29 0707 	bic.w	r7, r9, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003798:	d035      	beq.n	8003806 <HAL_GPIO_Init+0x16a>
 800379a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800379e:	42a8      	cmp	r0, r5
 80037a0:	d033      	beq.n	800380a <HAL_GPIO_Init+0x16e>
 80037a2:	4558      	cmp	r0, fp
 80037a4:	d033      	beq.n	800380e <HAL_GPIO_Init+0x172>
 80037a6:	4550      	cmp	r0, sl
 80037a8:	d033      	beq.n	8003812 <HAL_GPIO_Init+0x176>
 80037aa:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80037ae:	42a8      	cmp	r0, r5
 80037b0:	bf0c      	ite	eq
 80037b2:	2504      	moveq	r5, #4
 80037b4:	2507      	movne	r5, #7
 80037b6:	fa05 f508 	lsl.w	r5, r5, r8
 80037ba:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037bc:	60b5      	str	r5, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037be:	684d      	ldr	r5, [r1, #4]
        temp = EXTI->IMR;
 80037c0:	6817      	ldr	r7, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80037c2:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037c4:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80037c6:	bf54      	ite	pl
 80037c8:	4037      	andpl	r7, r6
        {
          temp |= iocurrent;
 80037ca:	4327      	orrmi	r7, r4
        }
        EXTI->IMR = temp;
 80037cc:	6017      	str	r7, [r2, #0]

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037ce:	684d      	ldr	r5, [r1, #4]
        temp = EXTI->EMR;
 80037d0:	6857      	ldr	r7, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037d2:	03ad      	lsls	r5, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80037d4:	bf54      	ite	pl
 80037d6:	4037      	andpl	r7, r6
        {
          temp |= iocurrent;
 80037d8:	4327      	orrmi	r7, r4
        }
        EXTI->EMR = temp;
 80037da:	6057      	str	r7, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037dc:	684d      	ldr	r5, [r1, #4]
        temp = EXTI->RTSR;
 80037de:	6897      	ldr	r7, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037e0:	02ed      	lsls	r5, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80037e2:	bf54      	ite	pl
 80037e4:	4037      	andpl	r7, r6
        {
          temp |= iocurrent;
 80037e6:	4327      	orrmi	r7, r4
        }
        EXTI->RTSR = temp;
 80037e8:	6097      	str	r7, [r2, #8]

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037ea:	684d      	ldr	r5, [r1, #4]
        temp = EXTI->FTSR;
 80037ec:	68d7      	ldr	r7, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037ee:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80037f0:	bf54      	ite	pl
 80037f2:	4037      	andpl	r7, r6
        {
          temp |= iocurrent;
 80037f4:	4327      	orrmi	r7, r4
        }
        EXTI->FTSR = temp;
 80037f6:	60d7      	str	r7, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037f8:	3301      	adds	r3, #1
 80037fa:	2b10      	cmp	r3, #16
 80037fc:	f47f af5a 	bne.w	80036b4 <HAL_GPIO_Init+0x18>
      }
    }
  }
}
 8003800:	b003      	add	sp, #12
 8003802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003806:	2500      	movs	r5, #0
 8003808:	e7d5      	b.n	80037b6 <HAL_GPIO_Init+0x11a>
 800380a:	2501      	movs	r5, #1
 800380c:	e7d3      	b.n	80037b6 <HAL_GPIO_Init+0x11a>
 800380e:	2502      	movs	r5, #2
 8003810:	e7d1      	b.n	80037b6 <HAL_GPIO_Init+0x11a>
 8003812:	2503      	movs	r5, #3
 8003814:	e7cf      	b.n	80037b6 <HAL_GPIO_Init+0x11a>
 8003816:	bf00      	nop
 8003818:	40013c00 	.word	0x40013c00
 800381c:	40020000 	.word	0x40020000
 8003820:	40023800 	.word	0x40023800
 8003824:	40020800 	.word	0x40020800
 8003828:	40020c00 	.word	0x40020c00

0800382c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800382c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003830:	4c36      	ldr	r4, [pc, #216]	; (800390c <HAL_GPIO_DeInit+0xe0>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003832:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 8003914 <HAL_GPIO_DeInit+0xe8>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003836:	2200      	movs	r2, #0
    ioposition = 0x01U << position;
 8003838:	f04f 0901 	mov.w	r9, #1
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800383c:	f04f 0a03 	mov.w	sl, #3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003840:	f04f 0e0f 	mov.w	lr, #15
    ioposition = 0x01U << position;
 8003844:	fa09 fc02 	lsl.w	ip, r9, r2
    if(iocurrent == ioposition)
 8003848:	ea3c 0301 	bics.w	r3, ip, r1
 800384c:	d151      	bne.n	80038f2 <HAL_GPIO_DeInit+0xc6>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800384e:	0055      	lsls	r5, r2, #1
 8003850:	6803      	ldr	r3, [r0, #0]
 8003852:	fa0a f505 	lsl.w	r5, sl, r5
 8003856:	43ed      	mvns	r5, r5
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003858:	08d7      	lsrs	r7, r2, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800385a:	402b      	ands	r3, r5
 800385c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8003860:	6003      	str	r3, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003862:	f002 0607 	and.w	r6, r2, #7
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	00b6      	lsls	r6, r6, #2
 800386a:	fa0e f606 	lsl.w	r6, lr, r6
 800386e:	ea23 0606 	bic.w	r6, r3, r6
 8003872:	623e      	str	r6, [r7, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003874:	6883      	ldr	r3, [r0, #8]
 8003876:	402b      	ands	r3, r5
 8003878:	6083      	str	r3, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800387a:	6846      	ldr	r6, [r0, #4]
 800387c:	ea6f 030c 	mvn.w	r3, ip
 8003880:	401e      	ands	r6, r3
 8003882:	6046      	str	r6, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003884:	68c6      	ldr	r6, [r0, #12]
 8003886:	4035      	ands	r5, r6
 8003888:	60c5      	str	r5, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2U];
 800388a:	f022 0503 	bic.w	r5, r2, #3
 800388e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8003892:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003896:	f002 0703 	and.w	r7, r2, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 800389a:	68ae      	ldr	r6, [r5, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800389c:	00bf      	lsls	r7, r7, #2
 800389e:	fa0e f807 	lsl.w	r8, lr, r7
 80038a2:	ea08 0c06 	and.w	ip, r8, r6
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80038a6:	4e1a      	ldr	r6, [pc, #104]	; (8003910 <HAL_GPIO_DeInit+0xe4>)
 80038a8:	42b0      	cmp	r0, r6
 80038aa:	d027      	beq.n	80038fc <HAL_GPIO_DeInit+0xd0>
 80038ac:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80038b0:	42b0      	cmp	r0, r6
 80038b2:	d025      	beq.n	8003900 <HAL_GPIO_DeInit+0xd4>
 80038b4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80038b8:	42b0      	cmp	r0, r6
 80038ba:	d023      	beq.n	8003904 <HAL_GPIO_DeInit+0xd8>
 80038bc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80038c0:	42b0      	cmp	r0, r6
 80038c2:	d021      	beq.n	8003908 <HAL_GPIO_DeInit+0xdc>
 80038c4:	4558      	cmp	r0, fp
 80038c6:	bf0c      	ite	eq
 80038c8:	2604      	moveq	r6, #4
 80038ca:	2607      	movne	r6, #7
 80038cc:	40be      	lsls	r6, r7
 80038ce:	4566      	cmp	r6, ip
 80038d0:	d10f      	bne.n	80038f2 <HAL_GPIO_DeInit+0xc6>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80038d2:	68ae      	ldr	r6, [r5, #8]
 80038d4:	ea26 0608 	bic.w	r6, r6, r8
 80038d8:	60ae      	str	r6, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80038da:	6825      	ldr	r5, [r4, #0]
 80038dc:	401d      	ands	r5, r3
 80038de:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80038e0:	6865      	ldr	r5, [r4, #4]
 80038e2:	401d      	ands	r5, r3
 80038e4:	6065      	str	r5, [r4, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80038e6:	68a5      	ldr	r5, [r4, #8]
 80038e8:	401d      	ands	r5, r3
 80038ea:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80038ec:	68e5      	ldr	r5, [r4, #12]
 80038ee:	402b      	ands	r3, r5
 80038f0:	60e3      	str	r3, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038f2:	3201      	adds	r2, #1
 80038f4:	2a10      	cmp	r2, #16
 80038f6:	d1a5      	bne.n	8003844 <HAL_GPIO_DeInit+0x18>
      }
    }
  }
}
 80038f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80038fc:	2600      	movs	r6, #0
 80038fe:	e7e5      	b.n	80038cc <HAL_GPIO_DeInit+0xa0>
 8003900:	2601      	movs	r6, #1
 8003902:	e7e3      	b.n	80038cc <HAL_GPIO_DeInit+0xa0>
 8003904:	2602      	movs	r6, #2
 8003906:	e7e1      	b.n	80038cc <HAL_GPIO_DeInit+0xa0>
 8003908:	2603      	movs	r6, #3
 800390a:	e7df      	b.n	80038cc <HAL_GPIO_DeInit+0xa0>
 800390c:	40013c00 	.word	0x40013c00
 8003910:	40020000 	.word	0x40020000
 8003914:	40021000 	.word	0x40021000

08003918 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003918:	6903      	ldr	r3, [r0, #16]
 800391a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800391c:	bf14      	ite	ne
 800391e:	2001      	movne	r0, #1
 8003920:	2000      	moveq	r0, #0
 8003922:	4770      	bx	lr

08003924 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003924:	b10a      	cbz	r2, 800392a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003926:	6181      	str	r1, [r0, #24]
  }
}
 8003928:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800392a:	0409      	lsls	r1, r1, #16
 800392c:	e7fb      	b.n	8003926 <HAL_GPIO_WritePin+0x2>

0800392e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800392e:	6943      	ldr	r3, [r0, #20]
 8003930:	4059      	eors	r1, r3
 8003932:	6141      	str	r1, [r0, #20]
}
 8003934:	4770      	bx	lr

08003936 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003936:	b082      	sub	sp, #8
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8003938:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800393c:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 800393e:	9b01      	ldr	r3, [sp, #4]
 8003940:	430b      	orrs	r3, r1
 8003942:	9301      	str	r3, [sp, #4]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8003944:	9b01      	ldr	r3, [sp, #4]
 8003946:	61c3      	str	r3, [r0, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8003948:	61c1      	str	r1, [r0, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800394a:	9b01      	ldr	r3, [sp, #4]
 800394c:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800394e:	69c3      	ldr	r3, [r0, #28]
 8003950:	9301      	str	r3, [sp, #4]

 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 8003952:	69c0      	ldr	r0, [r0, #28]
 8003954:	f480 3080 	eor.w	r0, r0, #65536	; 0x10000
  }
  else
  {
    return HAL_ERROR;
  }
}
 8003958:	f3c0 4000 	ubfx	r0, r0, #16, #1
 800395c:	b002      	add	sp, #8
 800395e:	4770      	bx	lr

08003960 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003960:	4770      	bx	lr
	...

08003964 <HAL_GPIO_EXTI_IRQHandler>:
{
 8003964:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003966:	4b04      	ldr	r3, [pc, #16]	; (8003978 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8003968:	6959      	ldr	r1, [r3, #20]
 800396a:	4201      	tst	r1, r0
 800396c:	d002      	beq.n	8003974 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800396e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003970:	f7ff fff6 	bl	8003960 <HAL_GPIO_EXTI_Callback>
}
 8003974:	bd08      	pop	{r3, pc}
 8003976:	bf00      	nop
 8003978:	40013c00 	.word	0x40013c00

0800397c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800397c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800397e:	6803      	ldr	r3, [r0, #0]
 8003980:	f013 0f05 	tst.w	r3, #5
{
 8003984:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003986:	d13d      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x88>
      }
    }
  }
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	079a      	lsls	r2, r3, #30
 800398c:	d531      	bpl.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	9301      	str	r3, [sp, #4]
 8003992:	4b4b      	ldr	r3, [pc, #300]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x144>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003994:	4d4b      	ldr	r5, [pc, #300]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x148>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003996:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003998:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800399c:	641a      	str	r2, [r3, #64]	; 0x40
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80039a8:	682b      	ldr	r3, [r5, #0]
 80039aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ae:	602b      	str	r3, [r5, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80039b0:	f7ff fcc4 	bl	800333c <HAL_GetTick>
 80039b4:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039b6:	682b      	ldr	r3, [r5, #0]
 80039b8:	05d9      	lsls	r1, r3, #23
 80039ba:	d558      	bpl.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0xf2>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039bc:	4d40      	ldr	r5, [pc, #256]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80039be:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039c0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80039c4:	d159      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039c6:	68e2      	ldr	r2, [r4, #12]
 80039c8:	f402 7340 	and.w	r3, r2, #768	; 0x300
 80039cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039d0:	4b3b      	ldr	r3, [pc, #236]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80039d2:	d171      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80039d4:	6899      	ldr	r1, [r3, #8]
 80039d6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80039da:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80039de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80039e2:	430a      	orrs	r2, r1
 80039e4:	609a      	str	r2, [r3, #8]
 80039e6:	68e2      	ldr	r2, [r4, #12]
 80039e8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80039ea:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80039ee:	430a      	orrs	r2, r1
 80039f0:	671a      	str	r2, [r3, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039f2:	6820      	ldr	r0, [r4, #0]
 80039f4:	f010 0008 	ands.w	r0, r0, #8
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039f8:	bf1f      	itttt	ne
 80039fa:	4b33      	ldrne	r3, [pc, #204]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039fc:	7c22      	ldrbne	r2, [r4, #16]
 80039fe:	601a      	strne	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003a00:	2000      	movne	r0, #0
 8003a02:	e032      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xee>
    __HAL_RCC_PLLI2S_DISABLE();
 8003a04:	4d31      	ldr	r5, [pc, #196]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x150>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a06:	4e2e      	ldr	r6, [pc, #184]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x144>)
    __HAL_RCC_PLLI2S_DISABLE();
 8003a08:	2300      	movs	r3, #0
 8003a0a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003a0c:	f7ff fc96 	bl	800333c <HAL_GetTick>
 8003a10:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a12:	6833      	ldr	r3, [r6, #0]
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	d422      	bmi.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a1c:	fa93 f3a3 	rbit	r3, r3
 8003a20:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003a24:	fab3 f183 	clz	r1, r3
 8003a28:	fa92 f2a2 	rbit	r2, r2
 8003a2c:	6863      	ldr	r3, [r4, #4]
 8003a2e:	408b      	lsls	r3, r1
 8003a30:	68a1      	ldr	r1, [r4, #8]
 8003a32:	fab2 f282 	clz	r2, r2
 8003a36:	fa01 f202 	lsl.w	r2, r1, r2
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003a40:	2301      	movs	r3, #1
 8003a42:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003a44:	f7ff fc7a 	bl	800333c <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a48:	4d1d      	ldr	r5, [pc, #116]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x144>)
    tickstart = HAL_GetTick();
 8003a4a:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a4c:	682b      	ldr	r3, [r5, #0]
 8003a4e:	0118      	lsls	r0, r3, #4
 8003a50:	d49a      	bmi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a52:	f7ff fc73 	bl	800333c <HAL_GetTick>
 8003a56:	1b80      	subs	r0, r0, r6
 8003a58:	2802      	cmp	r0, #2
 8003a5a:	d9f7      	bls.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8003a5c:	e004      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xec>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a5e:	f7ff fc6d 	bl	800333c <HAL_GetTick>
 8003a62:	1bc0      	subs	r0, r0, r7
 8003a64:	2802      	cmp	r0, #2
 8003a66:	d9d4      	bls.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x96>
        return HAL_TIMEOUT;
 8003a68:	2003      	movs	r0, #3
}
 8003a6a:	b003      	add	sp, #12
 8003a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a6e:	f7ff fc65 	bl	800333c <HAL_GetTick>
 8003a72:	1b80      	subs	r0, r0, r6
 8003a74:	2802      	cmp	r0, #2
 8003a76:	d99e      	bls.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8003a78:	e7f6      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xec>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a7a:	68e2      	ldr	r2, [r4, #12]
 8003a7c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d0a0      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a84:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a86:	4a12      	ldr	r2, [pc, #72]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003a88:	2101      	movs	r1, #1
 8003a8a:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a90:	2100      	movs	r1, #0
 8003a92:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8003a94:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a96:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003a98:	07da      	lsls	r2, r3, #31
 8003a9a:	d594      	bpl.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 8003a9c:	f7ff fc4e 	bl	800333c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa0:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003aa4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003aa8:	079b      	lsls	r3, r3, #30
 8003aaa:	d48c      	bmi.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aac:	f7ff fc46 	bl	800333c <HAL_GetTick>
 8003ab0:	1b80      	subs	r0, r0, r6
 8003ab2:	42b8      	cmp	r0, r7
 8003ab4:	d9f7      	bls.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8003ab6:	e7d7      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xec>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003abe:	e791      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	40007000 	.word	0x40007000
 8003ac8:	424711e0 	.word	0x424711e0
 8003acc:	42470068 	.word	0x42470068
 8003ad0:	42470e40 	.word	0x42470e40

08003ad4 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit: pointer to an RCC_PeriphCLKInitTypeDef structure that 
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad4:	b510      	push	{r4, lr}
  uint32_t tempreg;
  
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	6003      	str	r3, [r0, #0]
  
  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 8003ada:	4b13      	ldr	r3, [pc, #76]	; (8003b28 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8003adc:	f647 74c0 	movw	r4, #32704	; 0x7fc0
 8003ae0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003ae4:	fa94 f1a4 	rbit	r1, r4
 8003ae8:	fab1 f181 	clz	r1, r1
 8003aec:	4022      	ands	r2, r4
 8003aee:	40ca      	lsrs	r2, r1
 8003af0:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8003af2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003af6:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8003afa:	fa91 f1a1 	rbit	r1, r1
 8003afe:	fab1 f181 	clz	r1, r1
 8003b02:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8003b06:	40ca      	lsrs	r2, r1
 8003b08:	6082      	str	r2, [r0, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8003b0a:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8003b0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8003b0e:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8003b12:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003b16:	430a      	orrs	r2, r1
 8003b18:	60c2      	str	r2, [r0, #12]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 8003b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b1e:	f3c3 6300 	ubfx	r3, r3, #24, #1
 8003b22:	7403      	strb	r3, [r0, #16]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */  
}
 8003b24:	bd10      	pop	{r4, pc}
 8003b26:	bf00      	nop
 8003b28:	40023800 	.word	0x40023800

08003b2c <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8003b2c:	2801      	cmp	r0, #1
 8003b2e:	d11a      	bne.n	8003b66 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003b30:	4b0e      	ldr	r3, [pc, #56]	; (8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8003b32:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8003b34:	0212      	lsls	r2, r2, #8
 8003b36:	d416      	bmi.n	8003b66 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b38:	685a      	ldr	r2, [r3, #4]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */          
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003b3a:	490c      	ldr	r1, [pc, #48]	; (8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b3c:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b3e:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003b40:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b44:	bf4c      	ite	mi
 8003b46:	4b0a      	ldrmi	r3, [pc, #40]	; (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x44>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b48:	4b0a      	ldrpl	r3, [pc, #40]	; (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x48>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b4a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b4e:	fbb3 f3f0 	udiv	r3, r3, r0
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003b52:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003b56:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8003b5a:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003b5c:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8003b60:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8003b64:	4770      	bx	lr
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003b66:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency; 
}
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	007a1200 	.word	0x007a1200
 8003b74:	00f42400 	.word	0x00f42400

08003b78 <HAL_RCC_DeInit>:
  * @retval None
  */
void HAL_RCC_DeInit(void)
{
  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
 8003b78:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <HAL_RCC_DeInit+0x44>)
 8003b7a:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003b7c:	2100      	movs	r1, #0
  SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
 8003b7e:	f042 0281 	orr.w	r2, r2, #129	; 0x81
 8003b82:	601a      	str	r2, [r3, #0]
  CLEAR_REG(RCC->CFGR);
 8003b84:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON | RCC_CR_PLLON | RCC_CR_PLLI2SON);
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	f022 62a1 	bic.w	r2, r2, #84410368	; 0x5080000
 8003b8c:	f422 22a0 	bic.w	r2, r2, #327680	; 0x50000
 8003b90:	601a      	str	r2, [r3, #0]
  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 8003b92:	6059      	str	r1, [r3, #4]
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1);
#else
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2);
 8003b94:	6858      	ldr	r0, [r3, #4]
 8003b96:	4a0a      	ldr	r2, [pc, #40]	; (8003bc0 <HAL_RCC_DeInit+0x48>)
 8003b98:	4302      	orrs	r2, r0
 8003b9a:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register */
  CLEAR_REG(RCC->PLLI2SCFGR);
 8003b9c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  SET_BIT(RCC->PLLI2SCFGR, RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1);
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  SET_BIT(RCC->PLLI2SCFGR,  RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1);
 8003ba0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003ba4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003ba8:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8003bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  CLEAR_REG(RCC->PLLSAICFGR);
  SET_BIT(RCC->PLLSAICFGR,  RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2);
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8003bb0:	60d9      	str	r1, [r3, #12]

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003bb2:	4b04      	ldr	r3, [pc, #16]	; (8003bc4 <HAL_RCC_DeInit+0x4c>)
 8003bb4:	4a04      	ldr	r2, [pc, #16]	; (8003bc8 <HAL_RCC_DeInit+0x50>)
 8003bb6:	601a      	str	r2, [r3, #0]
}
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	04003010 	.word	0x04003010
 8003bc4:	20000158 	.word	0x20000158
 8003bc8:	00f42400 	.word	0x00f42400

08003bcc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bcc:	4a07      	ldr	r2, [pc, #28]	; (8003bec <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003bce:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003bd4:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bd6:	041b      	lsls	r3, r3, #16
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003bd8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bdc:	0c1b      	lsrs	r3, r3, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bde:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8003be0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8003be4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003be8:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003bea:	4770      	bx	lr
 8003bec:	e000ed00 	.word	0xe000ed00

08003bf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bf0:	b570      	push	{r4, r5, r6, lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bf2:	4b17      	ldr	r3, [pc, #92]	; (8003c50 <HAL_NVIC_SetPriority+0x60>)
 8003bf4:	68dc      	ldr	r4, [r3, #12]
 8003bf6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bfa:	f1c4 0507 	rsb	r5, r4, #7
 8003bfe:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c00:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c04:	bf28      	it	cs
 8003c06:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c08:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c0c:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c0e:	fa06 f505 	lsl.w	r5, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c12:	bf8c      	ite	hi
 8003c14:	3c03      	subhi	r4, #3
 8003c16:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c18:	ea21 0105 	bic.w	r1, r1, r5
 8003c1c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c1e:	fa06 f404 	lsl.w	r4, r6, r4
 8003c22:	ea22 0304 	bic.w	r3, r2, r4
  if ((int32_t)(IRQn) < 0)
 8003c26:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c28:	ea43 0301 	orr.w	r3, r3, r1
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c2c:	bfa8      	it	ge
 8003c2e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8003c32:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c36:	bfbc      	itt	lt
 8003c38:	f000 000f 	andlt.w	r0, r0, #15
 8003c3c:	4a05      	ldrlt	r2, [pc, #20]	; (8003c54 <HAL_NVIC_SetPriority+0x64>)
 8003c3e:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c40:	bfaa      	itet	ge
 8003c42:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c46:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c48:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003c4c:	bd70      	pop	{r4, r5, r6, pc}
 8003c4e:	bf00      	nop
 8003c50:	e000ed00 	.word	0xe000ed00
 8003c54:	e000ed14 	.word	0xe000ed14

08003c58 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003c58:	0942      	lsrs	r2, r0, #5
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	f000 001f 	and.w	r0, r0, #31
 8003c60:	fa03 f000 	lsl.w	r0, r3, r0
 8003c64:	4b01      	ldr	r3, [pc, #4]	; (8003c6c <HAL_NVIC_EnableIRQ+0x14>)
 8003c66:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003c6a:	4770      	bx	lr
 8003c6c:	e000e100 	.word	0xe000e100

08003c70 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003c70:	0943      	lsrs	r3, r0, #5
 8003c72:	2201      	movs	r2, #1
 8003c74:	f000 001f 	and.w	r0, r0, #31
 8003c78:	fa02 f000 	lsl.w	r0, r2, r0
 8003c7c:	3320      	adds	r3, #32
 8003c7e:	4a02      	ldr	r2, [pc, #8]	; (8003c88 <HAL_NVIC_DisableIRQ+0x18>)
 8003c80:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	e000e100 	.word	0xe000e100

08003c8c <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8003c8c:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003c90:	4905      	ldr	r1, [pc, #20]	; (8003ca8 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003c92:	4b06      	ldr	r3, [pc, #24]	; (8003cac <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003c94:	68ca      	ldr	r2, [r1, #12]
 8003c96:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60cb      	str	r3, [r1, #12]
 8003c9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8003ca2:	bf00      	nop
 8003ca4:	e7fd      	b.n	8003ca2 <HAL_NVIC_SystemReset+0x16>
 8003ca6:	bf00      	nop
 8003ca8:	e000ed00 	.word	0xe000ed00
 8003cac:	05fa0004 	.word	0x05fa0004

08003cb0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cb0:	3801      	subs	r0, #1
 8003cb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003cb6:	d20a      	bcs.n	8003cce <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cb8:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cba:	4a07      	ldr	r2, [pc, #28]	; (8003cd8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cbc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cbe:	21f0      	movs	r1, #240	; 0xf0
 8003cc0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cc4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cc6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cc8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ccc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003cce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	e000e010 	.word	0xe000e010
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8003cdc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003ce0:	4a04      	ldr	r2, [pc, #16]	; (8003cf4 <HAL_MPU_Disable+0x18>)
 8003ce2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce8:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8003cea:	4b03      	ldr	r3, [pc, #12]	; (8003cf8 <HAL_MPU_Disable+0x1c>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	605a      	str	r2, [r3, #4]
}
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	e000ed00 	.word	0xe000ed00
 8003cf8:	e000ed90 	.word	0xe000ed90

08003cfc <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003cfc:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <HAL_MPU_Enable+0x1c>)
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003cfe:	4a07      	ldr	r2, [pc, #28]	; (8003d1c <HAL_MPU_Enable+0x20>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003d00:	f040 0001 	orr.w	r0, r0, #1
 8003d04:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003d06:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d0c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003d0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003d12:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003d16:	4770      	bx	lr
 8003d18:	e000ed90 	.word	0xe000ed90
 8003d1c:	e000ed00 	.word	0xe000ed00

08003d20 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003d20:	4a11      	ldr	r2, [pc, #68]	; (8003d68 <HAL_MPU_ConfigRegion+0x48>)
 8003d22:	7843      	ldrb	r3, [r0, #1]
 8003d24:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 8003d26:	7803      	ldrb	r3, [r0, #0]
 8003d28:	b1e3      	cbz	r3, 8003d64 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8003d2a:	6843      	ldr	r3, [r0, #4]
 8003d2c:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003d2e:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d30:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003d32:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d34:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003d38:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003d3a:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003d3c:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003d3e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003d42:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003d44:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003d48:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003d4a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003d4e:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003d54:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003d56:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003d5a:	7a01      	ldrb	r1, [r0, #8]
 8003d5c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  }
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
 8003d60:	6113      	str	r3, [r2, #16]
  }
}
 8003d62:	4770      	bx	lr
    MPU->RBAR = 0x00U;
 8003d64:	60d3      	str	r3, [r2, #12]
 8003d66:	e7fb      	b.n	8003d60 <HAL_MPU_ConfigRegion+0x40>
 8003d68:	e000ed90 	.word	0xe000ed90

08003d6c <HAL_NVIC_GetPriorityGrouping>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d6c:	4b02      	ldr	r3, [pc, #8]	; (8003d78 <HAL_NVIC_GetPriorityGrouping+0xc>)
 8003d6e:	68d8      	ldr	r0, [r3, #12]
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
}
 8003d70:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8003d7c:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) < 0)
 8003d7e:	2800      	cmp	r0, #0
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8003d80:	bfae      	itee	ge
 8003d82:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8003d86:	f000 000f 	andlt.w	r0, r0, #15
 8003d8a:	4c12      	ldrlt	r4, [pc, #72]	; (8003dd4 <HAL_NVIC_GetPriority+0x58>)
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d8c:	f001 0107 	and.w	r1, r1, #7
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8003d90:	bfaa      	itet	ge
 8003d92:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8003d96:	5c20      	ldrblt	r0, [r4, r0]
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8003d98:	f890 0300 	ldrbge.w	r0, [r0, #768]	; 0x300
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d9c:	f1c1 0407 	rsb	r4, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003da0:	1d0d      	adds	r5, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003da2:	2c04      	cmp	r4, #4
 8003da4:	bf28      	it	cs
 8003da6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003da8:	2d06      	cmp	r5, #6
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8003daa:	ea4f 1010 	mov.w	r0, r0, lsr #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dae:	bf8c      	ite	hi
 8003db0:	3903      	subhi	r1, #3
 8003db2:	2100      	movls	r1, #0
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8003db4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003db8:	fa20 f601 	lsr.w	r6, r0, r1
 8003dbc:	fa05 f404 	lsl.w	r4, r5, r4
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8003dc0:	fa05 f101 	lsl.w	r1, r5, r1
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8003dc4:	ea26 0404 	bic.w	r4, r6, r4
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8003dc8:	ea20 0001 	bic.w	r0, r0, r1
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8003dcc:	6014      	str	r4, [r2, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8003dce:	6018      	str	r0, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
}
 8003dd0:	bd70      	pop	{r4, r5, r6, pc}
 8003dd2:	bf00      	nop
 8003dd4:	e000ed14 	.word	0xe000ed14

08003dd8 <HAL_NVIC_SetPendingIRQ>:
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003dd8:	0943      	lsrs	r3, r0, #5
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f000 001f 	and.w	r0, r0, #31
 8003de0:	fa02 f000 	lsl.w	r0, r2, r0
 8003de4:	3340      	adds	r3, #64	; 0x40
 8003de6:	4a02      	ldr	r2, [pc, #8]	; (8003df0 <HAL_NVIC_SetPendingIRQ+0x18>)
 8003de8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	e000e100 	.word	0xe000e100

08003df4 <HAL_NVIC_GetPendingIRQ>:
  return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8003df4:	0943      	lsrs	r3, r0, #5
 8003df6:	4a05      	ldr	r2, [pc, #20]	; (8003e0c <HAL_NVIC_GetPendingIRQ+0x18>)
 8003df8:	3340      	adds	r3, #64	; 0x40
 8003dfa:	f000 001f 	and.w	r0, r0, #31
 8003dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e02:	fa23 f000 	lsr.w	r0, r3, r0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
}
 8003e06:	f000 0001 	and.w	r0, r0, #1
 8003e0a:	4770      	bx	lr
 8003e0c:	e000e100 	.word	0xe000e100

08003e10 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003e10:	0943      	lsrs	r3, r0, #5
 8003e12:	2201      	movs	r2, #1
 8003e14:	f000 001f 	and.w	r0, r0, #31
 8003e18:	fa02 f000 	lsl.w	r0, r2, r0
 8003e1c:	3360      	adds	r3, #96	; 0x60
 8003e1e:	4a02      	ldr	r2, [pc, #8]	; (8003e28 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8003e20:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	e000e100 	.word	0xe000e100

08003e2c <HAL_NVIC_GetActive>:
  return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8003e2c:	0943      	lsrs	r3, r0, #5
 8003e2e:	4a05      	ldr	r2, [pc, #20]	; (8003e44 <HAL_NVIC_GetActive+0x18>)
 8003e30:	3380      	adds	r3, #128	; 0x80
 8003e32:	f000 001f 	and.w	r0, r0, #31
 8003e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3a:	fa23 f000 	lsr.w	r0, r3, r0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
}
 8003e3e:	f000 0001 	and.w	r0, r0, #1
 8003e42:	4770      	bx	lr
 8003e44:	e000e100 	.word	0xe000e100

08003e48 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003e48:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003e4a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003e4c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003e4e:	bf0c      	ite	eq
 8003e50:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003e54:	f022 0204 	bicne.w	r2, r2, #4
 8003e58:	601a      	str	r2, [r3, #0]
  }
}
 8003e5a:	4770      	bx	lr
 8003e5c:	e000e010 	.word	0xe000e010

08003e60 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003e60:	4770      	bx	lr

08003e62 <HAL_SYSTICK_IRQHandler>:
{
 8003e62:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8003e64:	f7ff fffc 	bl	8003e60 <HAL_SYSTICK_Callback>
}
 8003e68:	bd08      	pop	{r3, pc}
	...

08003e6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b510      	push	{r4, lr}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e6e:	6803      	ldr	r3, [r0, #0]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e70:	4c08      	ldr	r4, [pc, #32]	; (8003e94 <DMA_CalcBaseAndBitshift+0x28>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	3a10      	subs	r2, #16
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e7a:	f023 0303 	bic.w	r3, r3, #3
  
  if (stream_number > 3U)
 8003e7e:	2a5f      	cmp	r2, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e80:	bf88      	it	hi
 8003e82:	3304      	addhi	r3, #4
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e84:	2118      	movs	r1, #24
 8003e86:	fbb2 f1f1 	udiv	r1, r2, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e8a:	5c61      	ldrb	r1, [r4, r1]
 8003e8c:	65c1      	str	r1, [r0, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e8e:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	bd10      	pop	{r4, pc}
 8003e94:	0800613b 	.word	0x0800613b

08003e98 <HAL_DMA_Init>:
{
 8003e98:	b538      	push	{r3, r4, r5, lr}
 8003e9a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003e9c:	f7ff fa4e 	bl	800333c <HAL_GetTick>
 8003ea0:	4605      	mov	r5, r0
  if(hdma == NULL)
 8003ea2:	2c00      	cmp	r4, #0
 8003ea4:	d075      	beq.n	8003f92 <HAL_DMA_Init+0xfa>
  __HAL_UNLOCK(hdma);
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8003eac:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8003eae:	2302      	movs	r3, #2
 8003eb0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8003eb4:	6813      	ldr	r3, [r2, #0]
 8003eb6:	f023 0301 	bic.w	r3, r3, #1
 8003eba:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ebc:	6821      	ldr	r1, [r4, #0]
 8003ebe:	680b      	ldr	r3, [r1, #0]
 8003ec0:	07da      	lsls	r2, r3, #31
 8003ec2:	d43f      	bmi.n	8003f44 <HAL_DMA_Init+0xac>
  tmp = hdma->Instance->CR;
 8003ec4:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ec6:	4834      	ldr	r0, [pc, #208]	; (8003f98 <HAL_DMA_Init+0x100>)
 8003ec8:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eca:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	68e2      	ldr	r2, [r4, #12]
 8003ed2:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ed4:	6922      	ldr	r2, [r4, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	6962      	ldr	r2, [r4, #20]
 8003eda:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003edc:	69a2      	ldr	r2, [r4, #24]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	69e2      	ldr	r2, [r4, #28]
 8003ee2:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ee4:	6a22      	ldr	r2, [r4, #32]
 8003ee6:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ee8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003eea:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eec:	ea43 0300 	orr.w	r3, r3, r0
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ef0:	bf02      	ittt	eq
 8003ef2:	e9d4 200b 	ldrdeq	r2, r0, [r4, #44]	; 0x2c
 8003ef6:	4302      	orreq	r2, r0
 8003ef8:	4313      	orreq	r3, r2
  hdma->Instance->CR = tmp;  
 8003efa:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8003efc:	6820      	ldr	r0, [r4, #0]
  tmp |= hdma->Init.FIFOMode;
 8003efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tmp = hdma->Instance->FCR;
 8003f00:	6942      	ldr	r2, [r0, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f02:	2b04      	cmp	r3, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f04:	f022 0207 	bic.w	r2, r2, #7
  tmp |= hdma->Init.FIFOMode;
 8003f08:	ea42 0203 	orr.w	r2, r2, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f0c:	d10c      	bne.n	8003f28 <HAL_DMA_Init+0x90>
    tmp |= hdma->Init.FIFOThreshold;
 8003f0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f10:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8003f12:	431a      	orrs	r2, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f14:	b141      	cbz	r1, 8003f28 <HAL_DMA_Init+0x90>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f16:	69a5      	ldr	r5, [r4, #24]
 8003f18:	b9fd      	cbnz	r5, 8003f5a <HAL_DMA_Init+0xc2>
  {
    switch (tmp)
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d02e      	beq.n	8003f7c <HAL_DMA_Init+0xe4>
 8003f1e:	b10b      	cbz	r3, 8003f24 <HAL_DMA_Init+0x8c>
 8003f20:	2b02      	cmp	r3, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f22:	d101      	bne.n	8003f28 <HAL_DMA_Init+0x90>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f24:	01cb      	lsls	r3, r1, #7
 8003f26:	d42c      	bmi.n	8003f82 <HAL_DMA_Init+0xea>
  hdma->Instance->FCR = tmp;
 8003f28:	6142      	str	r2, [r0, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f7ff ff9e 	bl	8003e6c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f30:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003f32:	233f      	movs	r3, #63	; 0x3f
 8003f34:	4093      	lsls	r3, r2
 8003f36:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f38:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003f3a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f3c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003f3e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8003f42:	e009      	b.n	8003f58 <HAL_DMA_Init+0xc0>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f44:	f7ff f9fa 	bl	800333c <HAL_GetTick>
 8003f48:	1b40      	subs	r0, r0, r5
 8003f4a:	2805      	cmp	r0, #5
 8003f4c:	d9b6      	bls.n	8003ebc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f4e:	2320      	movs	r3, #32
 8003f50:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f52:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8003f54:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8003f58:	bd38      	pop	{r3, r4, r5, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f5a:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8003f5e:	d114      	bne.n	8003f8a <HAL_DMA_Init+0xf2>
    switch (tmp)
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d8e1      	bhi.n	8003f28 <HAL_DMA_Init+0x90>
 8003f64:	a501      	add	r5, pc, #4	; (adr r5, 8003f6c <HAL_DMA_Init+0xd4>)
 8003f66:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8003f6a:	bf00      	nop
 8003f6c:	08003f83 	.word	0x08003f83
 8003f70:	08003f25 	.word	0x08003f25
 8003f74:	08003f83 	.word	0x08003f83
 8003f78:	08003f7d 	.word	0x08003f7d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f7c:	f1b1 7fc0 	cmp.w	r1, #25165824	; 0x1800000
 8003f80:	d1d2      	bne.n	8003f28 <HAL_DMA_Init+0x90>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f82:	2340      	movs	r3, #64	; 0x40
 8003f84:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003f86:	2001      	movs	r0, #1
 8003f88:	e7e4      	b.n	8003f54 <HAL_DMA_Init+0xbc>
    switch (tmp)
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d9f9      	bls.n	8003f82 <HAL_DMA_Init+0xea>
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	e7c7      	b.n	8003f22 <HAL_DMA_Init+0x8a>
    return HAL_ERROR;
 8003f92:	2001      	movs	r0, #1
 8003f94:	e7e0      	b.n	8003f58 <HAL_DMA_Init+0xc0>
 8003f96:	bf00      	nop
 8003f98:	f010803f 	.word	0xf010803f

08003f9c <HAL_DMA_DeInit>:
{
 8003f9c:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8003f9e:	4605      	mov	r5, r0
 8003fa0:	b320      	cbz	r0, 8003fec <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003fa2:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8003fa6:	b2e4      	uxtb	r4, r4
 8003fa8:	2c02      	cmp	r4, #2
 8003faa:	d01d      	beq.n	8003fe8 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8003fac:	6802      	ldr	r2, [r0, #0]
 8003fae:	6813      	ldr	r3, [r2, #0]
 8003fb0:	f023 0301 	bic.w	r3, r3, #1
 8003fb4:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 8003fb6:	6803      	ldr	r3, [r0, #0]
 8003fb8:	2400      	movs	r4, #0
 8003fba:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8003fbc:	6803      	ldr	r3, [r0, #0]
 8003fbe:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8003fc0:	6803      	ldr	r3, [r0, #0]
 8003fc2:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8003fc4:	6803      	ldr	r3, [r0, #0]
 8003fc6:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8003fc8:	6803      	ldr	r3, [r0, #0]
 8003fca:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8003fcc:	6803      	ldr	r3, [r0, #0]
 8003fce:	2221      	movs	r2, #33	; 0x21
 8003fd0:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fd2:	f7ff ff4b 	bl	8003e6c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fd6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003fd8:	233f      	movs	r3, #63	; 0x3f
 8003fda:	4093      	lsls	r3, r2
 8003fdc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fde:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8003fe0:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8003fe4:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
}
 8003fe8:	4620      	mov	r0, r4
 8003fea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003fec:	2401      	movs	r4, #1
 8003fee:	e7fb      	b.n	8003fe8 <HAL_DMA_DeInit+0x4c>

08003ff0 <HAL_DMA_Start>:
{
 8003ff0:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdma);
 8003ff2:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8003ff6:	2c01      	cmp	r4, #1
 8003ff8:	d028      	beq.n	800404c <HAL_DMA_Start+0x5c>
 8003ffa:	2401      	movs	r4, #1
 8003ffc:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004000:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8004004:	2c01      	cmp	r4, #1
 8004006:	f04f 0500 	mov.w	r5, #0
 800400a:	f04f 0402 	mov.w	r4, #2
 800400e:	d11b      	bne.n	8004048 <HAL_DMA_Start+0x58>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004010:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004014:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004016:	6805      	ldr	r5, [r0, #0]
 8004018:	682c      	ldr	r4, [r5, #0]
 800401a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800401e:	602c      	str	r4, [r5, #0]
  hdma->Instance->NDTR = DataLength;
 8004020:	6804      	ldr	r4, [r0, #0]
 8004022:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004024:	6883      	ldr	r3, [r0, #8]
 8004026:	2b40      	cmp	r3, #64	; 0x40
 8004028:	6803      	ldr	r3, [r0, #0]
    hdma->Instance->PAR = DstAddress;
 800402a:	bf0b      	itete	eq
 800402c:	609a      	streq	r2, [r3, #8]
    hdma->Instance->PAR = SrcAddress;
 800402e:	6099      	strne	r1, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8004030:	6803      	ldreq	r3, [r0, #0]
    hdma->Instance->M0AR = DstAddress;
 8004032:	6803      	ldrne	r3, [r0, #0]
    hdma->Instance->M0AR = SrcAddress;
 8004034:	bf0c      	ite	eq
 8004036:	60d9      	streq	r1, [r3, #12]
    hdma->Instance->M0AR = DstAddress;
 8004038:	60da      	strne	r2, [r3, #12]
    __HAL_DMA_ENABLE(hdma);
 800403a:	6802      	ldr	r2, [r0, #0]
 800403c:	6813      	ldr	r3, [r2, #0]
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004044:	2000      	movs	r0, #0
}
 8004046:	bd30      	pop	{r4, r5, pc}
    __HAL_UNLOCK(hdma);
 8004048:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800404c:	2002      	movs	r0, #2
 800404e:	e7fa      	b.n	8004046 <HAL_DMA_Start+0x56>

08004050 <HAL_DMA_Start_IT>:
{
 8004050:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8004052:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004056:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8004058:	2c01      	cmp	r4, #1
 800405a:	d03d      	beq.n	80040d8 <HAL_DMA_Start_IT+0x88>
 800405c:	2401      	movs	r4, #1
 800405e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004062:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8004066:	2c01      	cmp	r4, #1
 8004068:	f04f 0500 	mov.w	r5, #0
 800406c:	f04f 0402 	mov.w	r4, #2
 8004070:	d130      	bne.n	80040d4 <HAL_DMA_Start_IT+0x84>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004072:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004076:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004078:	6805      	ldr	r5, [r0, #0]
 800407a:	682c      	ldr	r4, [r5, #0]
 800407c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8004080:	602c      	str	r4, [r5, #0]
  hdma->Instance->NDTR = DataLength;
 8004082:	6804      	ldr	r4, [r0, #0]
 8004084:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004086:	6883      	ldr	r3, [r0, #8]
 8004088:	2b40      	cmp	r3, #64	; 0x40
 800408a:	6803      	ldr	r3, [r0, #0]
    hdma->Instance->PAR = DstAddress;
 800408c:	bf0b      	itete	eq
 800408e:	609a      	streq	r2, [r3, #8]
    hdma->Instance->PAR = SrcAddress;
 8004090:	6099      	strne	r1, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8004092:	6803      	ldreq	r3, [r0, #0]
    hdma->Instance->M0AR = DstAddress;
 8004094:	6803      	ldrne	r3, [r0, #0]
    hdma->Instance->M0AR = SrcAddress;
 8004096:	bf0c      	ite	eq
 8004098:	60d9      	streq	r1, [r3, #12]
    hdma->Instance->M0AR = DstAddress;
 800409a:	60da      	strne	r2, [r3, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800409c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800409e:	233f      	movs	r3, #63	; 0x3f
 80040a0:	4093      	lsls	r3, r2
 80040a2:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040a4:	6802      	ldr	r2, [r0, #0]
 80040a6:	6813      	ldr	r3, [r2, #0]
 80040a8:	f043 0316 	orr.w	r3, r3, #22
 80040ac:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80040ae:	6802      	ldr	r2, [r0, #0]
 80040b0:	6953      	ldr	r3, [r2, #20]
 80040b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b6:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80040b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80040ba:	b123      	cbz	r3, 80040c6 <HAL_DMA_Start_IT+0x76>
      hdma->Instance->CR  |= DMA_IT_HT;
 80040bc:	6802      	ldr	r2, [r0, #0]
 80040be:	6813      	ldr	r3, [r2, #0]
 80040c0:	f043 0308 	orr.w	r3, r3, #8
 80040c4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80040c6:	6802      	ldr	r2, [r0, #0]
 80040c8:	6813      	ldr	r3, [r2, #0]
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040d0:	2000      	movs	r0, #0
}
 80040d2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80040d4:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80040d8:	2002      	movs	r0, #2
 80040da:	e7fa      	b.n	80040d2 <HAL_DMA_Start_IT+0x82>

080040dc <HAL_DMA_Abort>:
{
 80040dc:	b570      	push	{r4, r5, r6, lr}
 80040de:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040e0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80040e2:	f7ff f92b 	bl	800333c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040e6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80040ea:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 80040ec:	4606      	mov	r6, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040ee:	d006      	beq.n	80040fe <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040f0:	2380      	movs	r3, #128	; 0x80
 80040f2:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80040f4:	2300      	movs	r3, #0
 80040f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80040fa:	2001      	movs	r0, #1
}
 80040fc:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040fe:	6822      	ldr	r2, [r4, #0]
 8004100:	6813      	ldr	r3, [r2, #0]
 8004102:	f023 0316 	bic.w	r3, r3, #22
 8004106:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004108:	6822      	ldr	r2, [r4, #0]
 800410a:	6953      	ldr	r3, [r2, #20]
 800410c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004110:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004112:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004114:	b90b      	cbnz	r3, 800411a <HAL_DMA_Abort+0x3e>
 8004116:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004118:	b123      	cbz	r3, 8004124 <HAL_DMA_Abort+0x48>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800411a:	6822      	ldr	r2, [r4, #0]
 800411c:	6813      	ldr	r3, [r2, #0]
 800411e:	f023 0308 	bic.w	r3, r3, #8
 8004122:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004124:	6822      	ldr	r2, [r4, #0]
 8004126:	6813      	ldr	r3, [r2, #0]
 8004128:	f023 0301 	bic.w	r3, r3, #1
 800412c:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	f010 0001 	ands.w	r0, r0, #1
 8004136:	d109      	bne.n	800414c <HAL_DMA_Abort+0x70>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004138:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800413a:	233f      	movs	r3, #63	; 0x3f
 800413c:	4093      	lsls	r3, r2
 800413e:	60ab      	str	r3, [r5, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8004140:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8004142:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8004146:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800414a:	e7d7      	b.n	80040fc <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800414c:	f7ff f8f6 	bl	800333c <HAL_GetTick>
 8004150:	1b80      	subs	r0, r0, r6
 8004152:	2805      	cmp	r0, #5
 8004154:	d9eb      	bls.n	800412e <HAL_DMA_Abort+0x52>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004156:	2320      	movs	r3, #32
 8004158:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800415a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 800415c:	2300      	movs	r3, #0
 800415e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004162:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8004166:	e7c9      	b.n	80040fc <HAL_DMA_Abort+0x20>

08004168 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004168:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800416c:	2b02      	cmp	r3, #2
 800416e:	d003      	beq.n	8004178 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8004174:	2001      	movs	r0, #1
 8004176:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8004178:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800417a:	2305      	movs	r3, #5
 800417c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8004180:	6813      	ldr	r3, [r2, #0]
 8004182:	f023 0301 	bic.w	r3, r3, #1
 8004186:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004188:	2000      	movs	r0, #0
}
 800418a:	4770      	bx	lr

0800418c <HAL_DMA_PollForTransfer>:
{
 800418c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004190:	4604      	mov	r4, r0
 8004192:	460d      	mov	r5, r1
 8004194:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick(); 
 8004196:	f7ff f8d1 	bl	800333c <HAL_GetTick>
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800419a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800419e:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick(); 
 80041a0:	4681      	mov	r9, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80041a2:	d008      	beq.n	80041b6 <HAL_DMA_PollForTransfer+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041a4:	2380      	movs	r3, #128	; 0x80
 80041a6:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80041a8:	2300      	movs	r3, #0
 80041aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80041ae:	2501      	movs	r5, #1
}
 80041b0:	4628      	mov	r0, r5
 80041b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	05d8      	lsls	r0, r3, #23
 80041bc:	d503      	bpl.n	80041c6 <HAL_DMA_PollForTransfer+0x3a>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80041be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041c2:	6563      	str	r3, [r4, #84]	; 0x54
 80041c4:	e7f3      	b.n	80041ae <HAL_DMA_PollForTransfer+0x22>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80041c6:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 80041c8:	bb15      	cbnz	r5, 8004210 <HAL_DMA_PollForTransfer+0x84>
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041ca:	2320      	movs	r3, #32
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041cc:	6da6      	ldr	r6, [r4, #88]	; 0x58
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041ce:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 80042a8 <HAL_DMA_PollForTransfer+0x11c>
  tmpisr = regs->ISR;
 80041d2:	6831      	ldr	r1, [r6, #0]
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041d4:	4a33      	ldr	r2, [pc, #204]	; (80042a4 <HAL_DMA_PollForTransfer+0x118>)
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041d6:	fa03 f707 	lsl.w	r7, r3, r7
    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041da:	f04f 0a08 	mov.w	sl, #8
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 80041de:	420f      	tst	r7, r1
 80041e0:	d102      	bne.n	80041e8 <HAL_DMA_PollForTransfer+0x5c>
 80041e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80041e4:	07d9      	lsls	r1, r3, #31
 80041e6:	d515      	bpl.n	8004214 <HAL_DMA_PollForTransfer+0x88>
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d049      	beq.n	8004282 <HAL_DMA_PollForTransfer+0xf6>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80041f0:	07db      	lsls	r3, r3, #31
 80041f2:	d546      	bpl.n	8004282 <HAL_DMA_PollForTransfer+0xf6>
      HAL_DMA_Abort(hdma);
 80041f4:	4620      	mov	r0, r4
 80041f6:	f7ff ff71 	bl	80040dc <HAL_DMA_Abort>
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 80041fa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80041fc:	2330      	movs	r3, #48	; 0x30
 80041fe:	4093      	lsls	r3, r2
 8004200:	60b3      	str	r3, [r6, #8]
      hdma->State= HAL_DMA_STATE_READY;
 8004202:	2501      	movs	r5, #1
      __HAL_UNLOCK(hdma);
 8004204:	2300      	movs	r3, #0
 8004206:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State= HAL_DMA_STATE_READY;
 800420a:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
      return HAL_ERROR;
 800420e:	e7cf      	b.n	80041b0 <HAL_DMA_PollForTransfer+0x24>
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004210:	2310      	movs	r3, #16
 8004212:	e7db      	b.n	80041cc <HAL_DMA_PollForTransfer+0x40>
    if(Timeout != HAL_MAX_DELAY)
 8004214:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004218:	d013      	beq.n	8004242 <HAL_DMA_PollForTransfer+0xb6>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800421a:	f1b8 0f00 	cmp.w	r8, #0
 800421e:	d109      	bne.n	8004234 <HAL_DMA_PollForTransfer+0xa8>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004220:	2320      	movs	r3, #32
 8004222:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8004224:	2300      	movs	r3, #0
 8004226:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800422a:	2301      	movs	r3, #1
 800422c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8004230:	2503      	movs	r5, #3
 8004232:	e7bd      	b.n	80041b0 <HAL_DMA_PollForTransfer+0x24>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004234:	f7ff f882 	bl	800333c <HAL_GetTick>
 8004238:	eba0 0009 	sub.w	r0, r0, r9
 800423c:	4540      	cmp	r0, r8
 800423e:	4a19      	ldr	r2, [pc, #100]	; (80042a4 <HAL_DMA_PollForTransfer+0x118>)
 8004240:	d8ee      	bhi.n	8004220 <HAL_DMA_PollForTransfer+0x94>
    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004242:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmpisr = regs->ISR;
 8004244:	6831      	ldr	r1, [r6, #0]
    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004246:	fa0a f303 	lsl.w	r3, sl, r3
 800424a:	420b      	tst	r3, r1
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800424c:	bf1f      	itttt	ne
 800424e:	6d60      	ldrne	r0, [r4, #84]	; 0x54
 8004250:	f040 0001 	orrne.w	r0, r0, #1
 8004254:	6560      	strne	r0, [r4, #84]	; 0x54
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004256:	60b3      	strne	r3, [r6, #8]
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004258:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800425a:	fa0b f303 	lsl.w	r3, fp, r3
 800425e:	420b      	tst	r3, r1
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004260:	bf1f      	itttt	ne
 8004262:	6d60      	ldrne	r0, [r4, #84]	; 0x54
 8004264:	f040 0002 	orrne.w	r0, r0, #2
 8004268:	6560      	strne	r0, [r4, #84]	; 0x54
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800426a:	60b3      	strne	r3, [r6, #8]
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800426c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	420b      	tst	r3, r1
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004274:	bf1f      	itttt	ne
 8004276:	6d60      	ldrne	r0, [r4, #84]	; 0x54
 8004278:	f040 0004 	orrne.w	r0, r0, #4
 800427c:	6560      	strne	r0, [r4, #84]	; 0x54
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800427e:	60b3      	strne	r3, [r6, #8]
 8004280:	e7ad      	b.n	80041de <HAL_DMA_PollForTransfer+0x52>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8004282:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004284:	b945      	cbnz	r5, 8004298 <HAL_DMA_PollForTransfer+0x10c>
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8004286:	2330      	movs	r3, #48	; 0x30
 8004288:	4093      	lsls	r3, r2
 800428a:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800428c:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 800428e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8004292:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8004296:	e78b      	b.n	80041b0 <HAL_DMA_PollForTransfer+0x24>
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 8004298:	2310      	movs	r3, #16
 800429a:	4093      	lsls	r3, r2
 800429c:	60b3      	str	r3, [r6, #8]
  return status;
 800429e:	2500      	movs	r5, #0
 80042a0:	e786      	b.n	80041b0 <HAL_DMA_PollForTransfer+0x24>
 80042a2:	bf00      	nop
 80042a4:	00800004 	.word	0x00800004
 80042a8:	00800001 	.word	0x00800001

080042ac <HAL_DMA_IRQHandler>:
{
 80042ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	9301      	str	r3, [sp, #4]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042b2:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80042b4:	4b61      	ldr	r3, [pc, #388]	; (800443c <HAL_DMA_IRQHandler+0x190>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042b6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  uint32_t timeout = SystemCoreClock / 9600U;
 80042b8:	681f      	ldr	r7, [r3, #0]
  tmpisr = regs->ISR;
 80042ba:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042bc:	2308      	movs	r3, #8
 80042be:	fa03 f202 	lsl.w	r2, r3, r2
 80042c2:	4232      	tst	r2, r6
{
 80042c4:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042c6:	d00e      	beq.n	80042e6 <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042c8:	6802      	ldr	r2, [r0, #0]
 80042ca:	6811      	ldr	r1, [r2, #0]
 80042cc:	0749      	lsls	r1, r1, #29
 80042ce:	d50a      	bpl.n	80042e6 <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042d0:	6811      	ldr	r1, [r2, #0]
 80042d2:	f021 0104 	bic.w	r1, r1, #4
 80042d6:	6011      	str	r1, [r2, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042d8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80042da:	4093      	lsls	r3, r2
 80042dc:	60ab      	str	r3, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042de:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80042e8:	4b55      	ldr	r3, [pc, #340]	; (8004440 <HAL_DMA_IRQHandler+0x194>)
 80042ea:	4093      	lsls	r3, r2
 80042ec:	4233      	tst	r3, r6
 80042ee:	d008      	beq.n	8004302 <HAL_DMA_IRQHandler+0x56>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042f0:	6822      	ldr	r2, [r4, #0]
 80042f2:	6952      	ldr	r2, [r2, #20]
 80042f4:	0610      	lsls	r0, r2, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042f6:	bf41      	itttt	mi
 80042f8:	60ab      	strmi	r3, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042fa:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 80042fc:	f043 0302 	orrmi.w	r3, r3, #2
 8004300:	6563      	strmi	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004302:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004304:	4b4f      	ldr	r3, [pc, #316]	; (8004444 <HAL_DMA_IRQHandler+0x198>)
 8004306:	4093      	lsls	r3, r2
 8004308:	4233      	tst	r3, r6
 800430a:	d008      	beq.n	800431e <HAL_DMA_IRQHandler+0x72>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800430c:	6822      	ldr	r2, [r4, #0]
 800430e:	6812      	ldr	r2, [r2, #0]
 8004310:	0791      	lsls	r1, r2, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004312:	bf41      	itttt	mi
 8004314:	60ab      	strmi	r3, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004316:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 8004318:	f043 0304 	orrmi.w	r3, r3, #4
 800431c:	6563      	strmi	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800431e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004320:	2310      	movs	r3, #16
 8004322:	4093      	lsls	r3, r2
 8004324:	4233      	tst	r3, r6
 8004326:	d011      	beq.n	800434c <HAL_DMA_IRQHandler+0xa0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004328:	6822      	ldr	r2, [r4, #0]
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	0712      	lsls	r2, r2, #28
 800432e:	d50d      	bpl.n	800434c <HAL_DMA_IRQHandler+0xa0>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004330:	60ab      	str	r3, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	0350      	lsls	r0, r2, #13
 8004338:	d53b      	bpl.n	80043b2 <HAL_DMA_IRQHandler+0x106>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	0319      	lsls	r1, r3, #12
 800433e:	d401      	bmi.n	8004344 <HAL_DMA_IRQHandler+0x98>
        if(hdma->XferHalfCpltCallback != NULL)
 8004340:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004342:	e000      	b.n	8004346 <HAL_DMA_IRQHandler+0x9a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004344:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8004346:	b10b      	cbz	r3, 800434c <HAL_DMA_IRQHandler+0xa0>
          hdma->XferHalfCpltCallback(hdma);
 8004348:	4620      	mov	r0, r4
 800434a:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800434c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800434e:	2320      	movs	r3, #32
 8004350:	4093      	lsls	r3, r2
 8004352:	4233      	tst	r3, r6
 8004354:	d03e      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x128>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004356:	6822      	ldr	r2, [r4, #0]
 8004358:	6812      	ldr	r2, [r2, #0]
 800435a:	06d6      	lsls	r6, r2, #27
 800435c:	d53a      	bpl.n	80043d4 <HAL_DMA_IRQHandler+0x128>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800435e:	60ab      	str	r3, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004360:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004364:	2b05      	cmp	r3, #5
 8004366:	6823      	ldr	r3, [r4, #0]
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004368:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800436a:	d12a      	bne.n	80043c2 <HAL_DMA_IRQHandler+0x116>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800436c:	f022 0216 	bic.w	r2, r2, #22
 8004370:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004372:	6822      	ldr	r2, [r4, #0]
 8004374:	6953      	ldr	r3, [r2, #20]
 8004376:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800437a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800437c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800437e:	b90b      	cbnz	r3, 8004384 <HAL_DMA_IRQHandler+0xd8>
 8004380:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004382:	b123      	cbz	r3, 800438e <HAL_DMA_IRQHandler+0xe2>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004384:	6822      	ldr	r2, [r4, #0]
 8004386:	6813      	ldr	r3, [r2, #0]
 8004388:	f023 0308 	bic.w	r3, r3, #8
 800438c:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800438e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004390:	233f      	movs	r3, #63	; 0x3f
 8004392:	4093      	lsls	r3, r2
 8004394:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8004396:	2300      	movs	r3, #0
 8004398:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800439c:	2301      	movs	r3, #1
 800439e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80043a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d046      	beq.n	8004436 <HAL_DMA_IRQHandler+0x18a>
      hdma->XferErrorCallback(hdma);
 80043a8:	4620      	mov	r0, r4
}
 80043aa:	b003      	add	sp, #12
 80043ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80043b0:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043b6:	bf5e      	ittt	pl
 80043b8:	681a      	ldrpl	r2, [r3, #0]
 80043ba:	f022 0208 	bicpl.w	r2, r2, #8
 80043be:	601a      	strpl	r2, [r3, #0]
 80043c0:	e7be      	b.n	8004340 <HAL_DMA_IRQHandler+0x94>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043c2:	0350      	lsls	r0, r2, #13
 80043c4:	d528      	bpl.n	8004418 <HAL_DMA_IRQHandler+0x16c>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	0319      	lsls	r1, r3, #12
 80043ca:	d432      	bmi.n	8004432 <HAL_DMA_IRQHandler+0x186>
          if(hdma->XferM1CpltCallback != NULL)
 80043cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80043ce:	b10b      	cbz	r3, 80043d4 <HAL_DMA_IRQHandler+0x128>
          hdma->XferCpltCallback(hdma);
 80043d0:	4620      	mov	r0, r4
 80043d2:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043d6:	b373      	cbz	r3, 8004436 <HAL_DMA_IRQHandler+0x18a>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043da:	07da      	lsls	r2, r3, #31
 80043dc:	d51a      	bpl.n	8004414 <HAL_DMA_IRQHandler+0x168>
      hdma->State = HAL_DMA_STATE_ABORT;
 80043de:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80043e0:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80043e2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80043e6:	6813      	ldr	r3, [r2, #0]
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043ee:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80043f2:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80043f6:	9b01      	ldr	r3, [sp, #4]
 80043f8:	3301      	adds	r3, #1
 80043fa:	42bb      	cmp	r3, r7
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	d803      	bhi.n	8004408 <HAL_DMA_IRQHandler+0x15c>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	07db      	lsls	r3, r3, #31
 8004406:	d4f6      	bmi.n	80043f6 <HAL_DMA_IRQHandler+0x14a>
      __HAL_UNLOCK(hdma);
 8004408:	2300      	movs	r3, #0
 800440a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800440e:	2301      	movs	r3, #1
 8004410:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8004414:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004416:	e7c5      	b.n	80043a4 <HAL_DMA_IRQHandler+0xf8>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800441e:	d108      	bne.n	8004432 <HAL_DMA_IRQHandler+0x186>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004420:	6819      	ldr	r1, [r3, #0]
 8004422:	f021 0110 	bic.w	r1, r1, #16
 8004426:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004428:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800442a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800442e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8004432:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004434:	e7cb      	b.n	80043ce <HAL_DMA_IRQHandler+0x122>
}
 8004436:	b003      	add	sp, #12
 8004438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800443a:	bf00      	nop
 800443c:	20000158 	.word	0x20000158
 8004440:	00800001 	.word	0x00800001
 8004444:	00800004 	.word	0x00800004

08004448 <HAL_DMA_RegisterCallback>:
{
 8004448:	b510      	push	{r4, lr}
  __HAL_LOCK(hdma);
 800444a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800444e:	2b01      	cmp	r3, #1
 8004450:	d020      	beq.n	8004494 <HAL_DMA_RegisterCallback+0x4c>
  if(HAL_DMA_STATE_READY == hdma->State)
 8004452:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8004456:	2301      	movs	r3, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8004458:	429c      	cmp	r4, r3
  __HAL_LOCK(hdma);
 800445a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800445e:	d117      	bne.n	8004490 <HAL_DMA_RegisterCallback+0x48>
    switch (CallbackID)
 8004460:	2905      	cmp	r1, #5
 8004462:	d80b      	bhi.n	800447c <HAL_DMA_RegisterCallback+0x34>
 8004464:	e8df f001 	tbb	[pc, r1]
 8004468:	0e0c0903 	.word	0x0e0c0903
 800446c:	1210      	.short	0x1210
      hdma->XferCpltCallback = pCallback;
 800446e:	63c2      	str	r2, [r0, #60]	; 0x3c
  __HAL_UNLOCK(hdma);
 8004470:	2300      	movs	r3, #0
 8004472:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  return status;
 8004476:	4608      	mov	r0, r1
}
 8004478:	bd10      	pop	{r4, pc}
      hdma->XferHalfCpltCallback = pCallback;
 800447a:	6402      	str	r2, [r0, #64]	; 0x40
  HAL_StatusTypeDef status = HAL_OK;
 800447c:	2100      	movs	r1, #0
 800447e:	e7f7      	b.n	8004470 <HAL_DMA_RegisterCallback+0x28>
      hdma->XferM1CpltCallback = pCallback;
 8004480:	6442      	str	r2, [r0, #68]	; 0x44
      break;
 8004482:	e7fb      	b.n	800447c <HAL_DMA_RegisterCallback+0x34>
      hdma->XferM1HalfCpltCallback = pCallback;
 8004484:	6482      	str	r2, [r0, #72]	; 0x48
      break;
 8004486:	e7f9      	b.n	800447c <HAL_DMA_RegisterCallback+0x34>
      hdma->XferErrorCallback = pCallback;
 8004488:	64c2      	str	r2, [r0, #76]	; 0x4c
      break;
 800448a:	e7f7      	b.n	800447c <HAL_DMA_RegisterCallback+0x34>
      hdma->XferAbortCallback = pCallback;
 800448c:	6502      	str	r2, [r0, #80]	; 0x50
      break;
 800448e:	e7f5      	b.n	800447c <HAL_DMA_RegisterCallback+0x34>
    status =  HAL_ERROR;
 8004490:	4619      	mov	r1, r3
 8004492:	e7ed      	b.n	8004470 <HAL_DMA_RegisterCallback+0x28>
  __HAL_LOCK(hdma);
 8004494:	2002      	movs	r0, #2
 8004496:	e7ef      	b.n	8004478 <HAL_DMA_RegisterCallback+0x30>

08004498 <HAL_DMA_UnRegisterCallback>:
  __HAL_LOCK(hdma);
 8004498:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800449c:	2a01      	cmp	r2, #1
{
 800449e:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 80044a0:	d028      	beq.n	80044f4 <HAL_DMA_UnRegisterCallback+0x5c>
 80044a2:	2201      	movs	r2, #1
 80044a4:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80044a8:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 80044ac:	b2c0      	uxtb	r0, r0
 80044ae:	4290      	cmp	r0, r2
 80044b0:	d11e      	bne.n	80044f0 <HAL_DMA_UnRegisterCallback+0x58>
    switch (CallbackID)
 80044b2:	2200      	movs	r2, #0
 80044b4:	2906      	cmp	r1, #6
 80044b6:	d807      	bhi.n	80044c8 <HAL_DMA_UnRegisterCallback+0x30>
 80044b8:	e8df f001 	tbb	[pc, r1]
 80044bc:	0f0d0a04 	.word	0x0f0d0a04
 80044c0:	1811      	.short	0x1811
 80044c2:	13          	.byte	0x13
 80044c3:	00          	.byte	0x00
      hdma->XferCpltCallback = NULL;
 80044c4:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80044c6:	4608      	mov	r0, r1
  __HAL_UNLOCK(hdma);
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return status;
 80044ce:	4770      	bx	lr
      hdma->XferHalfCpltCallback = NULL;
 80044d0:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_StatusTypeDef status = HAL_OK;
 80044d2:	2000      	movs	r0, #0
      break; 
 80044d4:	e7f8      	b.n	80044c8 <HAL_DMA_UnRegisterCallback+0x30>
      hdma->XferM1CpltCallback = NULL;
 80044d6:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80044d8:	e7fb      	b.n	80044d2 <HAL_DMA_UnRegisterCallback+0x3a>
      hdma->XferM1HalfCpltCallback = NULL;
 80044da:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80044dc:	e7f9      	b.n	80044d2 <HAL_DMA_UnRegisterCallback+0x3a>
      hdma->XferErrorCallback = NULL;
 80044de:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80044e0:	e7f7      	b.n	80044d2 <HAL_DMA_UnRegisterCallback+0x3a>
      hdma->XferHalfCpltCallback = NULL;
 80044e2:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
      hdma->XferM1HalfCpltCallback = NULL;
 80044e6:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
      hdma->XferErrorCallback = NULL;
 80044ea:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 80044ec:	651a      	str	r2, [r3, #80]	; 0x50
 80044ee:	e7f0      	b.n	80044d2 <HAL_DMA_UnRegisterCallback+0x3a>
    status = HAL_ERROR;
 80044f0:	4610      	mov	r0, r2
 80044f2:	e7e9      	b.n	80044c8 <HAL_DMA_UnRegisterCallback+0x30>
  __HAL_LOCK(hdma);
 80044f4:	2002      	movs	r0, #2
}
 80044f6:	4770      	bx	lr

080044f8 <HAL_DMA_GetState>:
  return hdma->State;
 80044f8:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80044fc:	4770      	bx	lr

080044fe <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80044fe:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8004500:	4770      	bx	lr
	...

08004504 <FLASH_MassErase.isra.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004504:	4b07      	ldr	r3, [pc, #28]	; (8004524 <FLASH_MassErase.isra.0+0x20>)
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800450c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	f042 0204 	orr.w	r2, r2, #4
 8004514:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800451c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8004520:	6118      	str	r0, [r3, #16]
}
 8004522:	4770      	bx	lr
 8004524:	40023c00 	.word	0x40023c00

08004528 <HAL_FLASHEx_OBProgram>:
{
 8004528:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(&pFlash);
 800452a:	4e28      	ldr	r6, [pc, #160]	; (80045cc <HAL_FLASHEx_OBProgram+0xa4>)
 800452c:	7e33      	ldrb	r3, [r6, #24]
 800452e:	2b01      	cmp	r3, #1
{
 8004530:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8004532:	d049      	beq.n	80045c8 <HAL_FLASHEx_OBProgram+0xa0>
 8004534:	2001      	movs	r0, #1
 8004536:	7630      	strb	r0, [r6, #24]
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	07dd      	lsls	r5, r3, #31
 800453c:	d50d      	bpl.n	800455a <HAL_FLASHEx_OBProgram+0x32>
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800453e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8004542:	4283      	cmp	r3, r0
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004544:	f24c 3050 	movw	r0, #50000	; 0xc350
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8004548:	d134      	bne.n	80045b4 <HAL_FLASHEx_OBProgram+0x8c>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800454a:	f001 fc4d 	bl	8005de8 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800454e:	b920      	cbnz	r0, 800455a <HAL_FLASHEx_OBProgram+0x32>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
 8004550:	4a1f      	ldr	r2, [pc, #124]	; (80045d0 <HAL_FLASHEx_OBProgram+0xa8>)
 8004552:	8813      	ldrh	r3, [r2, #0]
 8004554:	ea23 0505 	bic.w	r5, r3, r5
 8004558:	8015      	strh	r5, [r2, #0]
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	0799      	lsls	r1, r3, #30
 800455e:	d508      	bpl.n	8004572 <HAL_FLASHEx_OBProgram+0x4a>
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004560:	f24c 3050 	movw	r0, #50000	; 0xc350
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8004564:	6925      	ldr	r5, [r4, #16]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004566:	f001 fc3f 	bl	8005de8 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800456a:	b910      	cbnz	r0, 8004572 <HAL_FLASHEx_OBProgram+0x4a>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 800456c:	4b19      	ldr	r3, [pc, #100]	; (80045d4 <HAL_FLASHEx_OBProgram+0xac>)
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800456e:	b2ed      	uxtb	r5, r5
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 8004570:	701d      	strb	r5, [r3, #0]
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	075a      	lsls	r2, r3, #29
 8004576:	d50d      	bpl.n	8004594 <HAL_FLASHEx_OBProgram+0x6c>
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004578:	f24c 3050 	movw	r0, #50000	; 0xc350
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 800457c:	7e25      	ldrb	r5, [r4, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800457e:	f001 fc33 	bl	8005de8 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8004582:	b938      	cbnz	r0, 8004594 <HAL_FLASHEx_OBProgram+0x6c>
  {     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 8004584:	4a14      	ldr	r2, [pc, #80]	; (80045d8 <HAL_FLASHEx_OBProgram+0xb0>)
 8004586:	7813      	ldrb	r3, [r2, #0]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp))); 
 8004588:	f025 051f 	bic.w	r5, r5, #31
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 800458c:	f003 031f 	and.w	r3, r3, #31
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp))); 
 8004590:	431d      	orrs	r5, r3
 8004592:	7015      	strb	r5, [r2, #0]
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	071b      	lsls	r3, r3, #28
 8004598:	d509      	bpl.n	80045ae <HAL_FLASHEx_OBProgram+0x86>
{
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800459a:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <HAL_FLASHEx_OBProgram+0xb0>)
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800459c:	7d22      	ldrb	r2, [r4, #20]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800459e:	7819      	ldrb	r1, [r3, #0]
 80045a0:	f001 01f3 	and.w	r1, r1, #243	; 0xf3
 80045a4:	7019      	strb	r1, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 80045a6:	7819      	ldrb	r1, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	701a      	strb	r2, [r3, #0]
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 80045ac:	2000      	movs	r0, #0
  __HAL_UNLOCK(&pFlash);
 80045ae:	2300      	movs	r3, #0
 80045b0:	7633      	strb	r3, [r6, #24]
}
 80045b2:	bd70      	pop	{r4, r5, r6, pc}
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80045b4:	f001 fc18 	bl	8005de8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80045b8:	2800      	cmp	r0, #0
 80045ba:	d1ce      	bne.n	800455a <HAL_FLASHEx_OBProgram+0x32>
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
 80045bc:	4b04      	ldr	r3, [pc, #16]	; (80045d0 <HAL_FLASHEx_OBProgram+0xa8>)
 80045be:	881a      	ldrh	r2, [r3, #0]
 80045c0:	4315      	orrs	r5, r2
 80045c2:	b2ad      	uxth	r5, r5
 80045c4:	801d      	strh	r5, [r3, #0]
 80045c6:	e7c8      	b.n	800455a <HAL_FLASHEx_OBProgram+0x32>
  __HAL_LOCK(&pFlash);
 80045c8:	2002      	movs	r0, #2
 80045ca:	e7f2      	b.n	80045b2 <HAL_FLASHEx_OBProgram+0x8a>
 80045cc:	200009d4 	.word	0x200009d4
 80045d0:	40023c16 	.word	0x40023c16
 80045d4:	40023c15 	.word	0x40023c15
 80045d8:	40023c14 	.word	0x40023c14

080045dc <HAL_FLASHEx_OBGetConfig>:
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 80045dc:	230f      	movs	r3, #15
 80045de:	6003      	str	r3, [r0, #0]
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 80045e0:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <HAL_FLASHEx_OBGetConfig+0x38>)
  */
static uint8_t FLASH_OB_GetRDP(void)
{
  uint8_t readstatus = OB_RDP_LEVEL_0;

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 80045e2:	4a0d      	ldr	r2, [pc, #52]	; (8004618 <HAL_FLASHEx_OBGetConfig+0x3c>)
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 80045e4:	881b      	ldrh	r3, [r3, #0]
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 80045e6:	6083      	str	r3, [r0, #8]
  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 80045e8:	7813      	ldrb	r3, [r2, #0]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2bcc      	cmp	r3, #204	; 0xcc
 80045ee:	d004      	beq.n	80045fa <HAL_FLASHEx_OBGetConfig+0x1e>
  {
    readstatus = OB_RDP_LEVEL_2;
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_1))
 80045f0:	7813      	ldrb	r3, [r2, #0]
 80045f2:	b2db      	uxtb	r3, r3
  {
    readstatus = OB_RDP_LEVEL_1;
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 80045f4:	2b55      	cmp	r3, #85	; 0x55
 80045f6:	bf18      	it	ne
 80045f8:	23aa      	movne	r3, #170	; 0xaa
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 80045fa:	6103      	str	r3, [r0, #16]
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 80045fc:	4b07      	ldr	r3, [pc, #28]	; (800461c <HAL_FLASHEx_OBGetConfig+0x40>)
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	f023 031f 	bic.w	r3, r3, #31
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8004604:	7603      	strb	r3, [r0, #24]
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8004606:	4b06      	ldr	r3, [pc, #24]	; (8004620 <HAL_FLASHEx_OBGetConfig+0x44>)
 8004608:	781b      	ldrb	r3, [r3, #0]
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	6143      	str	r3, [r0, #20]
}
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40023c16 	.word	0x40023c16
 8004618:	40023c15 	.word	0x40023c15
 800461c:	40023c00 	.word	0x40023c00
 8004620:	40023c14 	.word	0x40023c14

08004624 <HAL_FLASHEx_AdvOBProgram>:
{
 8004624:	b510      	push	{r4, lr}
  if(((pAdvOBInit->OptionType) & OPTIONBYTE_PCROP) == OPTIONBYTE_PCROP)
 8004626:	6803      	ldr	r3, [r0, #0]
 8004628:	07db      	lsls	r3, r3, #31
 800462a:	d517      	bpl.n	800465c <HAL_FLASHEx_AdvOBProgram+0x38>
    if((pAdvOBInit->PCROPState) == OB_PCROP_STATE_ENABLE)
 800462c:	6843      	ldr	r3, [r0, #4]
 800462e:	8904      	ldrh	r4, [r0, #8]
 8004630:	2b01      	cmp	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004632:	f24c 3050 	movw	r0, #50000	; 0xc350
    if((pAdvOBInit->PCROPState) == OB_PCROP_STATE_ENABLE)
 8004636:	d107      	bne.n	8004648 <HAL_FLASHEx_AdvOBProgram+0x24>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004638:	f001 fbd6 	bl	8005de8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800463c:	b918      	cbnz	r0, 8004646 <HAL_FLASHEx_AdvOBProgram+0x22>
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)Sector;
 800463e:	4b08      	ldr	r3, [pc, #32]	; (8004660 <HAL_FLASHEx_AdvOBProgram+0x3c>)
 8004640:	881a      	ldrh	r2, [r3, #0]
 8004642:	4314      	orrs	r4, r2
 8004644:	801c      	strh	r4, [r3, #0]
}
 8004646:	bd10      	pop	{r4, pc}
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004648:	f001 fbce 	bl	8005de8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800464c:	2800      	cmp	r0, #0
 800464e:	d1fa      	bne.n	8004646 <HAL_FLASHEx_AdvOBProgram+0x22>
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~Sector);
 8004650:	4a03      	ldr	r2, [pc, #12]	; (8004660 <HAL_FLASHEx_AdvOBProgram+0x3c>)
 8004652:	8813      	ldrh	r3, [r2, #0]
 8004654:	ea23 0404 	bic.w	r4, r3, r4
 8004658:	8014      	strh	r4, [r2, #0]
 800465a:	e7f4      	b.n	8004646 <HAL_FLASHEx_AdvOBProgram+0x22>
  HAL_StatusTypeDef status = HAL_ERROR;
 800465c:	2001      	movs	r0, #1
 800465e:	e7f2      	b.n	8004646 <HAL_FLASHEx_AdvOBProgram+0x22>
 8004660:	40023c16 	.word	0x40023c16

08004664 <HAL_FLASHEx_AdvOBGetConfig>:
  pAdvOBInit->Sectors = (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8004664:	4b01      	ldr	r3, [pc, #4]	; (800466c <HAL_FLASHEx_AdvOBGetConfig+0x8>)
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	8103      	strh	r3, [r0, #8]
}
 800466a:	4770      	bx	lr
 800466c:	40023c16 	.word	0x40023c16

08004670 <HAL_FLASHEx_OB_SelectPCROP>:
  optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
 8004670:	4a03      	ldr	r2, [pc, #12]	; (8004680 <HAL_FLASHEx_OB_SelectPCROP+0x10>)
 8004672:	7813      	ldrb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PCROP_SELECTED | optiontmp); 
 8004674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004678:	7013      	strb	r3, [r2, #0]
}
 800467a:	2000      	movs	r0, #0
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40023c17 	.word	0x40023c17

08004684 <HAL_FLASHEx_OB_DeSelectPCROP>:
  optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
 8004684:	4a03      	ldr	r2, [pc, #12]	; (8004694 <HAL_FLASHEx_OB_DeSelectPCROP+0x10>)
 8004686:	7813      	ldrb	r3, [r2, #0]
 8004688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PCROP_DESELECTED | optiontmp);  
 800468c:	7013      	strb	r3, [r2, #0]
}
 800468e:	2000      	movs	r0, #0
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40023c17 	.word	0x40023c17

08004698 <FLASH_Erase_Sector>:
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004698:	b139      	cbz	r1, 80046aa <FLASH_Erase_Sector+0x12>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800469a:	2901      	cmp	r1, #1
 800469c:	d021      	beq.n	80046e2 <FLASH_Erase_Sector+0x4a>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800469e:	2902      	cmp	r1, #2
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80046a0:	bf0c      	ite	eq
 80046a2:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80046a6:	f44f 7140 	movne.w	r1, #768	; 0x300
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80046aa:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <FLASH_Erase_Sector+0x50>)
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80046b2:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	4311      	orrs	r1, r2
 80046b8:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80046c0:	611a      	str	r2, [r3, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c2:	22f8      	movs	r2, #248	; 0xf8
 80046c4:	fa92 f2a2 	rbit	r2, r2
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 80046c8:	6919      	ldr	r1, [r3, #16]
 80046ca:	fab2 f282 	clz	r2, r2
 80046ce:	4090      	lsls	r0, r2
 80046d0:	4308      	orrs	r0, r1
 80046d2:	f040 0002 	orr.w	r0, r0, #2
 80046d6:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80046de:	611a      	str	r2, [r3, #16]
}
 80046e0:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80046e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046e6:	e7e0      	b.n	80046aa <FLASH_Erase_Sector+0x12>
 80046e8:	40023c00 	.word	0x40023c00

080046ec <HAL_FLASHEx_Erase_IT>:
{
 80046ec:	b510      	push	{r4, lr}
  __HAL_LOCK(&pFlash);
 80046ee:	4b15      	ldr	r3, [pc, #84]	; (8004744 <HAL_FLASHEx_Erase_IT+0x58>)
 80046f0:	7e1a      	ldrb	r2, [r3, #24]
 80046f2:	2a01      	cmp	r2, #1
 80046f4:	d023      	beq.n	800473e <HAL_FLASHEx_Erase_IT+0x52>
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 80046f6:	4a14      	ldr	r2, [pc, #80]	; (8004748 <HAL_FLASHEx_Erase_IT+0x5c>)
  __HAL_LOCK(&pFlash);
 80046f8:	2401      	movs	r4, #1
 80046fa:	761c      	strb	r4, [r3, #24]
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 80046fc:	6911      	ldr	r1, [r2, #16]
 80046fe:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8004702:	6111      	str	r1, [r2, #16]
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 8004704:	6911      	ldr	r1, [r2, #16]
 8004706:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800470a:	6111      	str	r1, [r2, #16]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
 800470c:	21f3      	movs	r1, #243	; 0xf3
 800470e:	60d1      	str	r1, [r2, #12]
  if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004710:	6802      	ldr	r2, [r0, #0]
 8004712:	42a2      	cmp	r2, r4
 8004714:	d108      	bne.n	8004728 <HAL_FLASHEx_Erase_IT+0x3c>
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 8004716:	2202      	movs	r2, #2
 8004718:	701a      	strb	r2, [r3, #0]
    pFlash.Bank = pEraseInit->Banks;
 800471a:	6842      	ldr	r2, [r0, #4]
 800471c:	611a      	str	r2, [r3, #16]
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800471e:	7c00      	ldrb	r0, [r0, #16]
 8004720:	f7ff fef0 	bl	8004504 <FLASH_MassErase.isra.0>
  return status;
 8004724:	2000      	movs	r0, #0
}
 8004726:	bd10      	pop	{r4, pc}
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
 8004728:	68c2      	ldr	r2, [r0, #12]
    pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
 800472a:	701c      	strb	r4, [r3, #0]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
 800472c:	7c01      	ldrb	r1, [r0, #16]
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
 800472e:	605a      	str	r2, [r3, #4]
    pFlash.Sector = pEraseInit->Sector;
 8004730:	6882      	ldr	r2, [r0, #8]
 8004732:	60da      	str	r2, [r3, #12]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
 8004734:	7219      	strb	r1, [r3, #8]
    FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
 8004736:	6880      	ldr	r0, [r0, #8]
 8004738:	f7ff ffae 	bl	8004698 <FLASH_Erase_Sector>
 800473c:	e7f2      	b.n	8004724 <HAL_FLASHEx_Erase_IT+0x38>
  __HAL_LOCK(&pFlash);
 800473e:	2002      	movs	r0, #2
 8004740:	e7f1      	b.n	8004726 <HAL_FLASHEx_Erase_IT+0x3a>
 8004742:	bf00      	nop
 8004744:	200009d4 	.word	0x200009d4
 8004748:	40023c00 	.word	0x40023c00

0800474c <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800474c:	4b14      	ldr	r3, [pc, #80]	; (80047a0 <FLASH_FlushCaches+0x54>)
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	0591      	lsls	r1, r2, #22
 8004752:	d50f      	bpl.n	8004774 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800475a:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476a:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004772:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004774:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <FLASH_FlushCaches+0x54>)
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	0552      	lsls	r2, r2, #21
 800477a:	d50f      	bpl.n	800479c <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004782:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004792:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800479a:	601a      	str	r2, [r3, #0]
  }
}
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40023c00 	.word	0x40023c00

080047a4 <HAL_FLASHEx_Erase>:
{
 80047a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 80047a8:	4e23      	ldr	r6, [pc, #140]	; (8004838 <HAL_FLASHEx_Erase+0x94>)
 80047aa:	7e33      	ldrb	r3, [r6, #24]
 80047ac:	2b01      	cmp	r3, #1
{
 80047ae:	4604      	mov	r4, r0
 80047b0:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80047b2:	d03f      	beq.n	8004834 <HAL_FLASHEx_Erase+0x90>
 80047b4:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80047b6:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80047ba:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80047bc:	f001 fb14 	bl	8005de8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80047c0:	4605      	mov	r5, r0
 80047c2:	b9a8      	cbnz	r0, 80047f0 <HAL_FLASHEx_Erase+0x4c>
    *SectorError = 0xFFFFFFFFU;
 80047c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047c8:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80047cc:	6823      	ldr	r3, [r4, #0]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d113      	bne.n	80047fa <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80047d2:	7c20      	ldrb	r0, [r4, #16]
 80047d4:	f7ff fe96 	bl	8004504 <FLASH_MassErase.isra.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80047d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80047dc:	f001 fb04 	bl	8005de8 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 80047e0:	4a16      	ldr	r2, [pc, #88]	; (800483c <HAL_FLASHEx_Erase+0x98>)
 80047e2:	6913      	ldr	r3, [r2, #16]
 80047e4:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80047e8:	4605      	mov	r5, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 80047ea:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 80047ec:	f7ff ffae 	bl	800474c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80047f0:	2300      	movs	r3, #0
 80047f2:	7633      	strb	r3, [r6, #24]
}
 80047f4:	4628      	mov	r0, r5
 80047f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80047fa:	68a7      	ldr	r7, [r4, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80047fc:	f8df 903c 	ldr.w	r9, [pc, #60]	; 800483c <HAL_FLASHEx_Erase+0x98>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004800:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8004804:	4413      	add	r3, r2
 8004806:	42bb      	cmp	r3, r7
 8004808:	d9f0      	bls.n	80047ec <HAL_FLASHEx_Erase+0x48>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800480a:	7c21      	ldrb	r1, [r4, #16]
 800480c:	4638      	mov	r0, r7
 800480e:	f7ff ff43 	bl	8004698 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004812:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004816:	f001 fae7 	bl	8005de8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800481a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800481e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004822:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 8004826:	b118      	cbz	r0, 8004830 <HAL_FLASHEx_Erase+0x8c>
          *SectorError = index;
 8004828:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800482c:	4605      	mov	r5, r0
          break;
 800482e:	e7dd      	b.n	80047ec <HAL_FLASHEx_Erase+0x48>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004830:	3701      	adds	r7, #1
 8004832:	e7e5      	b.n	8004800 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8004834:	2502      	movs	r5, #2
 8004836:	e7dd      	b.n	80047f4 <HAL_FLASHEx_Erase+0x50>
 8004838:	200009d4 	.word	0x200009d4
 800483c:	40023c00 	.word	0x40023c00

08004840 <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8004840:	b530      	push	{r4, r5, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004842:	6884      	ldr	r4, [r0, #8]
 8004844:	2c80      	cmp	r4, #128	; 0x80
 8004846:	d104      	bne.n	8004852 <HAL_DMAEx_MultiBufferStart+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8004848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800484c:	6543      	str	r3, [r0, #84]	; 0x54
    status = HAL_ERROR;
 800484e:	2001      	movs	r0, #1
      /* Return error status */
      status = HAL_BUSY;
    }
  }
  return status;
}
 8004850:	bd30      	pop	{r4, r5, pc}
    __HAL_LOCK(hdma);
 8004852:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8004856:	2c01      	cmp	r4, #1
 8004858:	d101      	bne.n	800485e <HAL_DMAEx_MultiBufferStart+0x1e>
 800485a:	2002      	movs	r0, #2
 800485c:	e7f8      	b.n	8004850 <HAL_DMAEx_MultiBufferStart+0x10>
 800485e:	2401      	movs	r4, #1
 8004860:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
    if(HAL_DMA_STATE_READY == hdma->State)
 8004864:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8004868:	2c01      	cmp	r4, #1
 800486a:	d1f6      	bne.n	800485a <HAL_DMAEx_MultiBufferStart+0x1a>
      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800486c:	6805      	ldr	r5, [r0, #0]
      hdma->State = HAL_DMA_STATE_BUSY; 
 800486e:	2402      	movs	r4, #2
 8004870:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8004874:	682c      	ldr	r4, [r5, #0]
 8004876:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
 800487a:	602c      	str	r4, [r5, #0]
      hdma->Instance->M1AR = SecondMemAddress;
 800487c:	6804      	ldr	r4, [r0, #0]
 800487e:	6123      	str	r3, [r4, #16]
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004880:	6803      	ldr	r3, [r0, #0]
 8004882:	9c03      	ldr	r4, [sp, #12]
 8004884:	605c      	str	r4, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004886:	6883      	ldr	r3, [r0, #8]
 8004888:	2b40      	cmp	r3, #64	; 0x40
 800488a:	6803      	ldr	r3, [r0, #0]
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800488c:	bf0b      	itete	eq
 800488e:	609a      	streq	r2, [r3, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8004890:	6099      	strne	r1, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8004892:	6803      	ldreq	r3, [r0, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8004894:	6803      	ldrne	r3, [r0, #0]
    hdma->Instance->M0AR = SrcAddress;
 8004896:	bf0c      	ite	eq
 8004898:	60d9      	streq	r1, [r3, #12]
    hdma->Instance->M0AR = DstAddress;
 800489a:	60da      	strne	r2, [r3, #12]
      __HAL_DMA_ENABLE(hdma);
 800489c:	6802      	ldr	r2, [r0, #0]
 800489e:	6813      	ldr	r3, [r2, #0]
 80048a0:	f043 0301 	orr.w	r3, r3, #1
 80048a4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048a6:	2000      	movs	r0, #0
 80048a8:	e7d2      	b.n	8004850 <HAL_DMAEx_MultiBufferStart+0x10>
	...

080048ac <HAL_DMAEx_MultiBufferStart_IT>:
{
 80048ac:	b530      	push	{r4, r5, lr}
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80048ae:	6884      	ldr	r4, [r0, #8]
 80048b0:	2c80      	cmp	r4, #128	; 0x80
 80048b2:	d104      	bne.n	80048be <HAL_DMAEx_MultiBufferStart_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80048b4:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048b8:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80048ba:	2001      	movs	r0, #1
}
 80048bc:	bd30      	pop	{r4, r5, pc}
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 80048be:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80048c0:	b11c      	cbz	r4, 80048ca <HAL_DMAEx_MultiBufferStart_IT+0x1e>
 80048c2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80048c4:	b10c      	cbz	r4, 80048ca <HAL_DMAEx_MultiBufferStart_IT+0x1e>
 80048c6:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80048c8:	b90c      	cbnz	r4, 80048ce <HAL_DMAEx_MultiBufferStart_IT+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048ca:	2340      	movs	r3, #64	; 0x40
 80048cc:	e7f4      	b.n	80048b8 <HAL_DMAEx_MultiBufferStart_IT+0xc>
  __HAL_LOCK(hdma);
 80048ce:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80048d2:	2c01      	cmp	r4, #1
 80048d4:	f000 8570 	beq.w	80053b8 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 80048d8:	2401      	movs	r4, #1
 80048da:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80048de:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80048e2:	2c01      	cmp	r4, #1
 80048e4:	f04f 0500 	mov.w	r5, #0
 80048e8:	f04f 0402 	mov.w	r4, #2
 80048ec:	f040 8562 	bne.w	80053b4 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
    hdma->State = HAL_DMA_STATE_BUSY;
 80048f0:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048f4:	6545      	str	r5, [r0, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80048f6:	6805      	ldr	r5, [r0, #0]
 80048f8:	682c      	ldr	r4, [r5, #0]
 80048fa:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
 80048fe:	602c      	str	r4, [r5, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 8004900:	6804      	ldr	r4, [r0, #0]
 8004902:	6123      	str	r3, [r4, #16]
  hdma->Instance->NDTR = DataLength;
 8004904:	6803      	ldr	r3, [r0, #0]
 8004906:	9c03      	ldr	r4, [sp, #12]
 8004908:	605c      	str	r4, [r3, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800490a:	6883      	ldr	r3, [r0, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800490c:	4cbb      	ldr	r4, [pc, #748]	; (8004bfc <HAL_DMAEx_MultiBufferStart_IT+0x350>)
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800490e:	2b40      	cmp	r3, #64	; 0x40
 8004910:	6803      	ldr	r3, [r0, #0]
    hdma->Instance->PAR = DstAddress;
 8004912:	bf0b      	itete	eq
 8004914:	609a      	streq	r2, [r3, #8]
    hdma->Instance->PAR = SrcAddress;
 8004916:	6099      	strne	r1, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8004918:	6803      	ldreq	r3, [r0, #0]
    hdma->Instance->M0AR = DstAddress;
 800491a:	6803      	ldrne	r3, [r0, #0]
    hdma->Instance->M0AR = SrcAddress;
 800491c:	bf0c      	ite	eq
 800491e:	60d9      	streq	r1, [r3, #12]
    hdma->Instance->M0AR = DstAddress;
 8004920:	60da      	strne	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004922:	6803      	ldr	r3, [r0, #0]
 8004924:	4ab6      	ldr	r2, [pc, #728]	; (8004c00 <HAL_DMAEx_MultiBufferStart_IT+0x354>)
 8004926:	42a3      	cmp	r3, r4
 8004928:	f240 8170 	bls.w	8004c0c <HAL_DMAEx_MultiBufferStart_IT+0x360>
 800492c:	4293      	cmp	r3, r2
 800492e:	f000 815d 	beq.w	8004bec <HAL_DMAEx_MultiBufferStart_IT+0x340>
 8004932:	49b4      	ldr	r1, [pc, #720]	; (8004c04 <HAL_DMAEx_MultiBufferStart_IT+0x358>)
 8004934:	428b      	cmp	r3, r1
 8004936:	f000 8159 	beq.w	8004bec <HAL_DMAEx_MultiBufferStart_IT+0x340>
 800493a:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800493e:	428b      	cmp	r3, r1
 8004940:	f000 8154 	beq.w	8004bec <HAL_DMAEx_MultiBufferStart_IT+0x340>
 8004944:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004948:	428b      	cmp	r3, r1
 800494a:	f000 814f 	beq.w	8004bec <HAL_DMAEx_MultiBufferStart_IT+0x340>
 800494e:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8004952:	428b      	cmp	r3, r1
 8004954:	f000 814c 	beq.w	8004bf0 <HAL_DMAEx_MultiBufferStart_IT+0x344>
 8004958:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800495c:	428b      	cmp	r3, r1
 800495e:	f000 8147 	beq.w	8004bf0 <HAL_DMAEx_MultiBufferStart_IT+0x344>
 8004962:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004966:	428b      	cmp	r3, r1
 8004968:	f000 8142 	beq.w	8004bf0 <HAL_DMAEx_MultiBufferStart_IT+0x344>
 800496c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004970:	428b      	cmp	r3, r1
 8004972:	f000 813d 	beq.w	8004bf0 <HAL_DMAEx_MultiBufferStart_IT+0x344>
 8004976:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 800497a:	428b      	cmp	r3, r1
 800497c:	f000 813b 	beq.w	8004bf6 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8004980:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004984:	428b      	cmp	r3, r1
 8004986:	f000 8136 	beq.w	8004bf6 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 800498a:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800498e:	428b      	cmp	r3, r1
 8004990:	f000 8131 	beq.w	8004bf6 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8004994:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004998:	428b      	cmp	r3, r1
 800499a:	bf0c      	ite	eq
 800499c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80049a0:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 80049a4:	4998      	ldr	r1, [pc, #608]	; (8004c08 <HAL_DMAEx_MultiBufferStart_IT+0x35c>)
 80049a6:	60cb      	str	r3, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80049a8:	6803      	ldr	r3, [r0, #0]
 80049aa:	42a3      	cmp	r3, r4
 80049ac:	f240 81f0 	bls.w	8004d90 <HAL_DMAEx_MultiBufferStart_IT+0x4e4>
 80049b0:	4293      	cmp	r3, r2
 80049b2:	f000 81e5 	beq.w	8004d80 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 80049b6:	4993      	ldr	r1, [pc, #588]	; (8004c04 <HAL_DMAEx_MultiBufferStart_IT+0x358>)
 80049b8:	428b      	cmp	r3, r1
 80049ba:	f000 81e1 	beq.w	8004d80 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 80049be:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 80049c2:	428b      	cmp	r3, r1
 80049c4:	f000 81dc 	beq.w	8004d80 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 80049c8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049cc:	428b      	cmp	r3, r1
 80049ce:	f000 81d7 	beq.w	8004d80 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 80049d2:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 80049d6:	428b      	cmp	r3, r1
 80049d8:	f000 81d4 	beq.w	8004d84 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 80049dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049e0:	428b      	cmp	r3, r1
 80049e2:	f000 81cf 	beq.w	8004d84 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 80049e6:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 80049ea:	428b      	cmp	r3, r1
 80049ec:	f000 81ca 	beq.w	8004d84 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 80049f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049f4:	428b      	cmp	r3, r1
 80049f6:	f000 81c5 	beq.w	8004d84 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 80049fa:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 80049fe:	428b      	cmp	r3, r1
 8004a00:	f000 81c3 	beq.w	8004d8a <HAL_DMAEx_MultiBufferStart_IT+0x4de>
 8004a04:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a08:	428b      	cmp	r3, r1
 8004a0a:	f000 81be 	beq.w	8004d8a <HAL_DMAEx_MultiBufferStart_IT+0x4de>
 8004a0e:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004a12:	428b      	cmp	r3, r1
 8004a14:	f000 81b9 	beq.w	8004d8a <HAL_DMAEx_MultiBufferStart_IT+0x4de>
 8004a18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a1c:	428b      	cmp	r3, r1
 8004a1e:	bf0c      	ite	eq
 8004a20:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8004a24:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8004a28:	4977      	ldr	r1, [pc, #476]	; (8004c08 <HAL_DMAEx_MultiBufferStart_IT+0x35c>)
 8004a2a:	60cb      	str	r3, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8004a2c:	6803      	ldr	r3, [r0, #0]
 8004a2e:	42a3      	cmp	r3, r4
 8004a30:	f240 827a 	bls.w	8004f28 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8004a34:	4293      	cmp	r3, r2
 8004a36:	f000 8265 	beq.w	8004f04 <HAL_DMAEx_MultiBufferStart_IT+0x658>
 8004a3a:	4972      	ldr	r1, [pc, #456]	; (8004c04 <HAL_DMAEx_MultiBufferStart_IT+0x358>)
 8004a3c:	428b      	cmp	r3, r1
 8004a3e:	f000 8261 	beq.w	8004f04 <HAL_DMAEx_MultiBufferStart_IT+0x658>
 8004a42:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004a46:	428b      	cmp	r3, r1
 8004a48:	f000 825c 	beq.w	8004f04 <HAL_DMAEx_MultiBufferStart_IT+0x658>
 8004a4c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a50:	428b      	cmp	r3, r1
 8004a52:	f000 8257 	beq.w	8004f04 <HAL_DMAEx_MultiBufferStart_IT+0x658>
 8004a56:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8004a5a:	428b      	cmp	r3, r1
 8004a5c:	f000 8254 	beq.w	8004f08 <HAL_DMAEx_MultiBufferStart_IT+0x65c>
 8004a60:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a64:	428b      	cmp	r3, r1
 8004a66:	f000 824f 	beq.w	8004f08 <HAL_DMAEx_MultiBufferStart_IT+0x65c>
 8004a6a:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004a6e:	428b      	cmp	r3, r1
 8004a70:	f000 824a 	beq.w	8004f08 <HAL_DMAEx_MultiBufferStart_IT+0x65c>
 8004a74:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a78:	428b      	cmp	r3, r1
 8004a7a:	f000 8245 	beq.w	8004f08 <HAL_DMAEx_MultiBufferStart_IT+0x65c>
 8004a7e:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8004a82:	428b      	cmp	r3, r1
 8004a84:	f000 8243 	beq.w	8004f0e <HAL_DMAEx_MultiBufferStart_IT+0x662>
 8004a88:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a8c:	428b      	cmp	r3, r1
 8004a8e:	f000 823e 	beq.w	8004f0e <HAL_DMAEx_MultiBufferStart_IT+0x662>
 8004a92:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004a96:	428b      	cmp	r3, r1
 8004a98:	f000 8239 	beq.w	8004f0e <HAL_DMAEx_MultiBufferStart_IT+0x662>
 8004a9c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004aa0:	428b      	cmp	r3, r1
 8004aa2:	bf0c      	ite	eq
 8004aa4:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 8004aa8:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8004aac:	4956      	ldr	r1, [pc, #344]	; (8004c08 <HAL_DMAEx_MultiBufferStart_IT+0x35c>)
 8004aae:	60cb      	str	r3, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8004ab0:	6803      	ldr	r3, [r0, #0]
 8004ab2:	42a3      	cmp	r3, r4
 8004ab4:	f240 82fa 	bls.w	80050ac <HAL_DMAEx_MultiBufferStart_IT+0x800>
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	f000 82ef 	beq.w	800509c <HAL_DMAEx_MultiBufferStart_IT+0x7f0>
 8004abe:	4951      	ldr	r1, [pc, #324]	; (8004c04 <HAL_DMAEx_MultiBufferStart_IT+0x358>)
 8004ac0:	428b      	cmp	r3, r1
 8004ac2:	f000 82eb 	beq.w	800509c <HAL_DMAEx_MultiBufferStart_IT+0x7f0>
 8004ac6:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004aca:	428b      	cmp	r3, r1
 8004acc:	f000 82e6 	beq.w	800509c <HAL_DMAEx_MultiBufferStart_IT+0x7f0>
 8004ad0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ad4:	428b      	cmp	r3, r1
 8004ad6:	f000 82e1 	beq.w	800509c <HAL_DMAEx_MultiBufferStart_IT+0x7f0>
 8004ada:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8004ade:	428b      	cmp	r3, r1
 8004ae0:	f000 82de 	beq.w	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0x7f4>
 8004ae4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ae8:	428b      	cmp	r3, r1
 8004aea:	f000 82d9 	beq.w	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0x7f4>
 8004aee:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004af2:	428b      	cmp	r3, r1
 8004af4:	f000 82d4 	beq.w	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0x7f4>
 8004af8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004afc:	428b      	cmp	r3, r1
 8004afe:	f000 82cf 	beq.w	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0x7f4>
 8004b02:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8004b06:	428b      	cmp	r3, r1
 8004b08:	f000 82cd 	beq.w	80050a6 <HAL_DMAEx_MultiBufferStart_IT+0x7fa>
 8004b0c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b10:	428b      	cmp	r3, r1
 8004b12:	f000 82c8 	beq.w	80050a6 <HAL_DMAEx_MultiBufferStart_IT+0x7fa>
 8004b16:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004b1a:	428b      	cmp	r3, r1
 8004b1c:	f000 82c3 	beq.w	80050a6 <HAL_DMAEx_MultiBufferStart_IT+0x7fa>
 8004b20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b24:	428b      	cmp	r3, r1
 8004b26:	bf0c      	ite	eq
 8004b28:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 8004b2c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8004b30:	4935      	ldr	r1, [pc, #212]	; (8004c08 <HAL_DMAEx_MultiBufferStart_IT+0x35c>)
 8004b32:	60cb      	str	r3, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8004b34:	6803      	ldr	r3, [r0, #0]
 8004b36:	42a3      	cmp	r3, r4
 8004b38:	f240 8387 	bls.w	800524a <HAL_DMAEx_MultiBufferStart_IT+0x99e>
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	f000 836f 	beq.w	8005220 <HAL_DMAEx_MultiBufferStart_IT+0x974>
 8004b42:	4a30      	ldr	r2, [pc, #192]	; (8004c04 <HAL_DMAEx_MultiBufferStart_IT+0x358>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	f000 836b 	beq.w	8005220 <HAL_DMAEx_MultiBufferStart_IT+0x974>
 8004b4a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	f000 8366 	beq.w	8005220 <HAL_DMAEx_MultiBufferStart_IT+0x974>
 8004b54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	f000 8361 	beq.w	8005220 <HAL_DMAEx_MultiBufferStart_IT+0x974>
 8004b5e:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004b62:	4293      	cmp	r3, r2
 8004b64:	f000 835e 	beq.w	8005224 <HAL_DMAEx_MultiBufferStart_IT+0x978>
 8004b68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	f000 8359 	beq.w	8005224 <HAL_DMAEx_MultiBufferStart_IT+0x978>
 8004b72:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004b76:	4293      	cmp	r3, r2
 8004b78:	f000 8354 	beq.w	8005224 <HAL_DMAEx_MultiBufferStart_IT+0x978>
 8004b7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b80:	4293      	cmp	r3, r2
 8004b82:	f000 834f 	beq.w	8005224 <HAL_DMAEx_MultiBufferStart_IT+0x978>
 8004b86:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	f000 835a 	beq.w	8005244 <HAL_DMAEx_MultiBufferStart_IT+0x998>
 8004b90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b94:	4293      	cmp	r3, r2
 8004b96:	f000 8355 	beq.w	8005244 <HAL_DMAEx_MultiBufferStart_IT+0x998>
 8004b9a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	f000 8350 	beq.w	8005244 <HAL_DMAEx_MultiBufferStart_IT+0x998>
 8004ba4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	bf0c      	ite	eq
 8004bac:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8004bb0:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 8004bb4:	4a14      	ldr	r2, [pc, #80]	; (8004c08 <HAL_DMAEx_MultiBufferStart_IT+0x35c>)
 8004bb6:	60d3      	str	r3, [r2, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004bb8:	6802      	ldr	r2, [r0, #0]
 8004bba:	6813      	ldr	r3, [r2, #0]
 8004bbc:	f043 0316 	orr.w	r3, r3, #22
 8004bc0:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004bc2:	6802      	ldr	r2, [r0, #0]
 8004bc4:	6953      	ldr	r3, [r2, #20]
 8004bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bca:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bcc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004bce:	b90b      	cbnz	r3, 8004bd4 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8004bd0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004bd2:	b123      	cbz	r3, 8004bde <HAL_DMAEx_MultiBufferStart_IT+0x332>
      hdma->Instance->CR  |= DMA_IT_HT;
 8004bd4:	6802      	ldr	r2, [r0, #0]
 8004bd6:	6813      	ldr	r3, [r2, #0]
 8004bd8:	f043 0308 	orr.w	r3, r3, #8
 8004bdc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma); 
 8004bde:	6802      	ldr	r2, [r0, #0]
 8004be0:	6813      	ldr	r3, [r2, #0]
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004be8:	2000      	movs	r0, #0
 8004bea:	e667      	b.n	80048bc <HAL_DMAEx_MultiBufferStart_IT+0x10>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004bec:	2320      	movs	r3, #32
 8004bee:	e6d9      	b.n	80049a4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004bf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bf4:	e6d6      	b.n	80049a4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004bf6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004bfa:	e6d3      	b.n	80049a4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004bfc:	40026458 	.word	0x40026458
 8004c00:	40026010 	.word	0x40026010
 8004c04:	40026410 	.word	0x40026410
 8004c08:	40026400 	.word	0x40026400
 8004c0c:	49c1      	ldr	r1, [pc, #772]	; (8004f14 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8004c0e:	428b      	cmp	r3, r1
 8004c10:	d93c      	bls.n	8004c8c <HAL_DMAEx_MultiBufferStart_IT+0x3e0>
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d032      	beq.n	8004c7c <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8004c16:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004c1a:	428b      	cmp	r3, r1
 8004c1c:	d02e      	beq.n	8004c7c <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8004c1e:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004c22:	428b      	cmp	r3, r1
 8004c24:	d02a      	beq.n	8004c7c <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8004c26:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c2a:	428b      	cmp	r3, r1
 8004c2c:	d026      	beq.n	8004c7c <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8004c2e:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8004c32:	428b      	cmp	r3, r1
 8004c34:	d024      	beq.n	8004c80 <HAL_DMAEx_MultiBufferStart_IT+0x3d4>
 8004c36:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c3a:	428b      	cmp	r3, r1
 8004c3c:	d020      	beq.n	8004c80 <HAL_DMAEx_MultiBufferStart_IT+0x3d4>
 8004c3e:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004c42:	428b      	cmp	r3, r1
 8004c44:	d01c      	beq.n	8004c80 <HAL_DMAEx_MultiBufferStart_IT+0x3d4>
 8004c46:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c4a:	428b      	cmp	r3, r1
 8004c4c:	d018      	beq.n	8004c80 <HAL_DMAEx_MultiBufferStart_IT+0x3d4>
 8004c4e:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8004c52:	428b      	cmp	r3, r1
 8004c54:	d017      	beq.n	8004c86 <HAL_DMAEx_MultiBufferStart_IT+0x3da>
 8004c56:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c5a:	428b      	cmp	r3, r1
 8004c5c:	d013      	beq.n	8004c86 <HAL_DMAEx_MultiBufferStart_IT+0x3da>
 8004c5e:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004c62:	428b      	cmp	r3, r1
 8004c64:	d00f      	beq.n	8004c86 <HAL_DMAEx_MultiBufferStart_IT+0x3da>
 8004c66:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c6a:	428b      	cmp	r3, r1
 8004c6c:	bf0c      	ite	eq
 8004c6e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8004c72:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8004c76:	49a8      	ldr	r1, [pc, #672]	; (8004f18 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8004c78:	608b      	str	r3, [r1, #8]
 8004c7a:	e695      	b.n	80049a8 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8004c7c:	2320      	movs	r3, #32
 8004c7e:	e7fa      	b.n	8004c76 <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
 8004c80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c84:	e7f7      	b.n	8004c76 <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
 8004c86:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c8a:	e7f4      	b.n	8004c76 <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
 8004c8c:	49a3      	ldr	r1, [pc, #652]	; (8004f1c <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8004c8e:	428b      	cmp	r3, r1
 8004c90:	d93b      	bls.n	8004d0a <HAL_DMAEx_MultiBufferStart_IT+0x45e>
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d031      	beq.n	8004cfa <HAL_DMAEx_MultiBufferStart_IT+0x44e>
 8004c96:	f501 716e 	add.w	r1, r1, #952	; 0x3b8
 8004c9a:	428b      	cmp	r3, r1
 8004c9c:	d02d      	beq.n	8004cfa <HAL_DMAEx_MultiBufferStart_IT+0x44e>
 8004c9e:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004ca2:	428b      	cmp	r3, r1
 8004ca4:	d029      	beq.n	8004cfa <HAL_DMAEx_MultiBufferStart_IT+0x44e>
 8004ca6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004caa:	428b      	cmp	r3, r1
 8004cac:	d025      	beq.n	8004cfa <HAL_DMAEx_MultiBufferStart_IT+0x44e>
 8004cae:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8004cb2:	428b      	cmp	r3, r1
 8004cb4:	d023      	beq.n	8004cfe <HAL_DMAEx_MultiBufferStart_IT+0x452>
 8004cb6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004cba:	428b      	cmp	r3, r1
 8004cbc:	d01f      	beq.n	8004cfe <HAL_DMAEx_MultiBufferStart_IT+0x452>
 8004cbe:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004cc2:	428b      	cmp	r3, r1
 8004cc4:	d01b      	beq.n	8004cfe <HAL_DMAEx_MultiBufferStart_IT+0x452>
 8004cc6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004cca:	428b      	cmp	r3, r1
 8004ccc:	d017      	beq.n	8004cfe <HAL_DMAEx_MultiBufferStart_IT+0x452>
 8004cce:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8004cd2:	428b      	cmp	r3, r1
 8004cd4:	d016      	beq.n	8004d04 <HAL_DMAEx_MultiBufferStart_IT+0x458>
 8004cd6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004cda:	428b      	cmp	r3, r1
 8004cdc:	d012      	beq.n	8004d04 <HAL_DMAEx_MultiBufferStart_IT+0x458>
 8004cde:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004ce2:	428b      	cmp	r3, r1
 8004ce4:	d00e      	beq.n	8004d04 <HAL_DMAEx_MultiBufferStart_IT+0x458>
 8004ce6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004cea:	428b      	cmp	r3, r1
 8004cec:	bf0c      	ite	eq
 8004cee:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8004cf2:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8004cf6:	498a      	ldr	r1, [pc, #552]	; (8004f20 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8004cf8:	e655      	b.n	80049a6 <HAL_DMAEx_MultiBufferStart_IT+0xfa>
 8004cfa:	2320      	movs	r3, #32
 8004cfc:	e7fb      	b.n	8004cf6 <HAL_DMAEx_MultiBufferStart_IT+0x44a>
 8004cfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d02:	e7f8      	b.n	8004cf6 <HAL_DMAEx_MultiBufferStart_IT+0x44a>
 8004d04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d08:	e7f5      	b.n	8004cf6 <HAL_DMAEx_MultiBufferStart_IT+0x44a>
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d030      	beq.n	8004d70 <HAL_DMAEx_MultiBufferStart_IT+0x4c4>
 8004d0e:	4985      	ldr	r1, [pc, #532]	; (8004f24 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8004d10:	428b      	cmp	r3, r1
 8004d12:	d02d      	beq.n	8004d70 <HAL_DMAEx_MultiBufferStart_IT+0x4c4>
 8004d14:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004d18:	428b      	cmp	r3, r1
 8004d1a:	d029      	beq.n	8004d70 <HAL_DMAEx_MultiBufferStart_IT+0x4c4>
 8004d1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d20:	428b      	cmp	r3, r1
 8004d22:	d025      	beq.n	8004d70 <HAL_DMAEx_MultiBufferStart_IT+0x4c4>
 8004d24:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8004d28:	428b      	cmp	r3, r1
 8004d2a:	d023      	beq.n	8004d74 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 8004d2c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d30:	428b      	cmp	r3, r1
 8004d32:	d01f      	beq.n	8004d74 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 8004d34:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004d38:	428b      	cmp	r3, r1
 8004d3a:	d01b      	beq.n	8004d74 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 8004d3c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d40:	428b      	cmp	r3, r1
 8004d42:	d017      	beq.n	8004d74 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 8004d44:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8004d48:	428b      	cmp	r3, r1
 8004d4a:	d016      	beq.n	8004d7a <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8004d4c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d50:	428b      	cmp	r3, r1
 8004d52:	d012      	beq.n	8004d7a <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8004d54:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004d58:	428b      	cmp	r3, r1
 8004d5a:	d00e      	beq.n	8004d7a <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8004d5c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d60:	428b      	cmp	r3, r1
 8004d62:	bf0c      	ite	eq
 8004d64:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8004d68:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8004d6c:	496c      	ldr	r1, [pc, #432]	; (8004f20 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8004d6e:	e783      	b.n	8004c78 <HAL_DMAEx_MultiBufferStart_IT+0x3cc>
 8004d70:	2320      	movs	r3, #32
 8004d72:	e7fb      	b.n	8004d6c <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8004d74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d78:	e7f8      	b.n	8004d6c <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8004d7a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d7e:	e7f5      	b.n	8004d6c <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004d80:	2310      	movs	r3, #16
 8004d82:	e651      	b.n	8004a28 <HAL_DMAEx_MultiBufferStart_IT+0x17c>
 8004d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d88:	e64e      	b.n	8004a28 <HAL_DMAEx_MultiBufferStart_IT+0x17c>
 8004d8a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d8e:	e64b      	b.n	8004a28 <HAL_DMAEx_MultiBufferStart_IT+0x17c>
 8004d90:	4960      	ldr	r1, [pc, #384]	; (8004f14 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8004d92:	428b      	cmp	r3, r1
 8004d94:	d93c      	bls.n	8004e10 <HAL_DMAEx_MultiBufferStart_IT+0x564>
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d032      	beq.n	8004e00 <HAL_DMAEx_MultiBufferStart_IT+0x554>
 8004d9a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004d9e:	428b      	cmp	r3, r1
 8004da0:	d02e      	beq.n	8004e00 <HAL_DMAEx_MultiBufferStart_IT+0x554>
 8004da2:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004da6:	428b      	cmp	r3, r1
 8004da8:	d02a      	beq.n	8004e00 <HAL_DMAEx_MultiBufferStart_IT+0x554>
 8004daa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004dae:	428b      	cmp	r3, r1
 8004db0:	d026      	beq.n	8004e00 <HAL_DMAEx_MultiBufferStart_IT+0x554>
 8004db2:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8004db6:	428b      	cmp	r3, r1
 8004db8:	d024      	beq.n	8004e04 <HAL_DMAEx_MultiBufferStart_IT+0x558>
 8004dba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004dbe:	428b      	cmp	r3, r1
 8004dc0:	d020      	beq.n	8004e04 <HAL_DMAEx_MultiBufferStart_IT+0x558>
 8004dc2:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004dc6:	428b      	cmp	r3, r1
 8004dc8:	d01c      	beq.n	8004e04 <HAL_DMAEx_MultiBufferStart_IT+0x558>
 8004dca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004dce:	428b      	cmp	r3, r1
 8004dd0:	d018      	beq.n	8004e04 <HAL_DMAEx_MultiBufferStart_IT+0x558>
 8004dd2:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8004dd6:	428b      	cmp	r3, r1
 8004dd8:	d017      	beq.n	8004e0a <HAL_DMAEx_MultiBufferStart_IT+0x55e>
 8004dda:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004dde:	428b      	cmp	r3, r1
 8004de0:	d013      	beq.n	8004e0a <HAL_DMAEx_MultiBufferStart_IT+0x55e>
 8004de2:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004de6:	428b      	cmp	r3, r1
 8004de8:	d00f      	beq.n	8004e0a <HAL_DMAEx_MultiBufferStart_IT+0x55e>
 8004dea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004dee:	428b      	cmp	r3, r1
 8004df0:	bf0c      	ite	eq
 8004df2:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8004df6:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8004dfa:	4947      	ldr	r1, [pc, #284]	; (8004f18 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8004dfc:	608b      	str	r3, [r1, #8]
 8004dfe:	e615      	b.n	8004a2c <HAL_DMAEx_MultiBufferStart_IT+0x180>
 8004e00:	2310      	movs	r3, #16
 8004e02:	e7fa      	b.n	8004dfa <HAL_DMAEx_MultiBufferStart_IT+0x54e>
 8004e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e08:	e7f7      	b.n	8004dfa <HAL_DMAEx_MultiBufferStart_IT+0x54e>
 8004e0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e0e:	e7f4      	b.n	8004dfa <HAL_DMAEx_MultiBufferStart_IT+0x54e>
 8004e10:	4942      	ldr	r1, [pc, #264]	; (8004f1c <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8004e12:	428b      	cmp	r3, r1
 8004e14:	d93b      	bls.n	8004e8e <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d031      	beq.n	8004e7e <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8004e1a:	f501 716e 	add.w	r1, r1, #952	; 0x3b8
 8004e1e:	428b      	cmp	r3, r1
 8004e20:	d02d      	beq.n	8004e7e <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8004e22:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004e26:	428b      	cmp	r3, r1
 8004e28:	d029      	beq.n	8004e7e <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8004e2a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e2e:	428b      	cmp	r3, r1
 8004e30:	d025      	beq.n	8004e7e <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8004e32:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8004e36:	428b      	cmp	r3, r1
 8004e38:	d023      	beq.n	8004e82 <HAL_DMAEx_MultiBufferStart_IT+0x5d6>
 8004e3a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e3e:	428b      	cmp	r3, r1
 8004e40:	d01f      	beq.n	8004e82 <HAL_DMAEx_MultiBufferStart_IT+0x5d6>
 8004e42:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004e46:	428b      	cmp	r3, r1
 8004e48:	d01b      	beq.n	8004e82 <HAL_DMAEx_MultiBufferStart_IT+0x5d6>
 8004e4a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e4e:	428b      	cmp	r3, r1
 8004e50:	d017      	beq.n	8004e82 <HAL_DMAEx_MultiBufferStart_IT+0x5d6>
 8004e52:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8004e56:	428b      	cmp	r3, r1
 8004e58:	d016      	beq.n	8004e88 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>
 8004e5a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e5e:	428b      	cmp	r3, r1
 8004e60:	d012      	beq.n	8004e88 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>
 8004e62:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004e66:	428b      	cmp	r3, r1
 8004e68:	d00e      	beq.n	8004e88 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>
 8004e6a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e6e:	428b      	cmp	r3, r1
 8004e70:	bf0c      	ite	eq
 8004e72:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8004e76:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8004e7a:	4929      	ldr	r1, [pc, #164]	; (8004f20 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8004e7c:	e5d5      	b.n	8004a2a <HAL_DMAEx_MultiBufferStart_IT+0x17e>
 8004e7e:	2310      	movs	r3, #16
 8004e80:	e7fb      	b.n	8004e7a <HAL_DMAEx_MultiBufferStart_IT+0x5ce>
 8004e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e86:	e7f8      	b.n	8004e7a <HAL_DMAEx_MultiBufferStart_IT+0x5ce>
 8004e88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e8c:	e7f5      	b.n	8004e7a <HAL_DMAEx_MultiBufferStart_IT+0x5ce>
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d030      	beq.n	8004ef4 <HAL_DMAEx_MultiBufferStart_IT+0x648>
 8004e92:	4924      	ldr	r1, [pc, #144]	; (8004f24 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8004e94:	428b      	cmp	r3, r1
 8004e96:	d02d      	beq.n	8004ef4 <HAL_DMAEx_MultiBufferStart_IT+0x648>
 8004e98:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004e9c:	428b      	cmp	r3, r1
 8004e9e:	d029      	beq.n	8004ef4 <HAL_DMAEx_MultiBufferStart_IT+0x648>
 8004ea0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ea4:	428b      	cmp	r3, r1
 8004ea6:	d025      	beq.n	8004ef4 <HAL_DMAEx_MultiBufferStart_IT+0x648>
 8004ea8:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8004eac:	428b      	cmp	r3, r1
 8004eae:	d023      	beq.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0x64c>
 8004eb0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004eb4:	428b      	cmp	r3, r1
 8004eb6:	d01f      	beq.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0x64c>
 8004eb8:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004ebc:	428b      	cmp	r3, r1
 8004ebe:	d01b      	beq.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0x64c>
 8004ec0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ec4:	428b      	cmp	r3, r1
 8004ec6:	d017      	beq.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0x64c>
 8004ec8:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8004ecc:	428b      	cmp	r3, r1
 8004ece:	d016      	beq.n	8004efe <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8004ed0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ed4:	428b      	cmp	r3, r1
 8004ed6:	d012      	beq.n	8004efe <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8004ed8:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004edc:	428b      	cmp	r3, r1
 8004ede:	d00e      	beq.n	8004efe <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8004ee0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ee4:	428b      	cmp	r3, r1
 8004ee6:	bf0c      	ite	eq
 8004ee8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8004eec:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8004ef0:	490b      	ldr	r1, [pc, #44]	; (8004f20 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8004ef2:	e783      	b.n	8004dfc <HAL_DMAEx_MultiBufferStart_IT+0x550>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	e7fb      	b.n	8004ef0 <HAL_DMAEx_MultiBufferStart_IT+0x644>
 8004ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004efc:	e7f8      	b.n	8004ef0 <HAL_DMAEx_MultiBufferStart_IT+0x644>
 8004efe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004f02:	e7f5      	b.n	8004ef0 <HAL_DMAEx_MultiBufferStart_IT+0x644>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8004f04:	2308      	movs	r3, #8
 8004f06:	e5d1      	b.n	8004aac <HAL_DMAEx_MultiBufferStart_IT+0x200>
 8004f08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f0c:	e5ce      	b.n	8004aac <HAL_DMAEx_MultiBufferStart_IT+0x200>
 8004f0e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004f12:	e5cb      	b.n	8004aac <HAL_DMAEx_MultiBufferStart_IT+0x200>
 8004f14:	400260b8 	.word	0x400260b8
 8004f18:	40026400 	.word	0x40026400
 8004f1c:	40026058 	.word	0x40026058
 8004f20:	40026000 	.word	0x40026000
 8004f24:	40026410 	.word	0x40026410
 8004f28:	49bf      	ldr	r1, [pc, #764]	; (8005228 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 8004f2a:	428b      	cmp	r3, r1
 8004f2c:	d93c      	bls.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x6fc>
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d032      	beq.n	8004f98 <HAL_DMAEx_MultiBufferStart_IT+0x6ec>
 8004f32:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004f36:	428b      	cmp	r3, r1
 8004f38:	d02e      	beq.n	8004f98 <HAL_DMAEx_MultiBufferStart_IT+0x6ec>
 8004f3a:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004f3e:	428b      	cmp	r3, r1
 8004f40:	d02a      	beq.n	8004f98 <HAL_DMAEx_MultiBufferStart_IT+0x6ec>
 8004f42:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f46:	428b      	cmp	r3, r1
 8004f48:	d026      	beq.n	8004f98 <HAL_DMAEx_MultiBufferStart_IT+0x6ec>
 8004f4a:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8004f4e:	428b      	cmp	r3, r1
 8004f50:	d024      	beq.n	8004f9c <HAL_DMAEx_MultiBufferStart_IT+0x6f0>
 8004f52:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f56:	428b      	cmp	r3, r1
 8004f58:	d020      	beq.n	8004f9c <HAL_DMAEx_MultiBufferStart_IT+0x6f0>
 8004f5a:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004f5e:	428b      	cmp	r3, r1
 8004f60:	d01c      	beq.n	8004f9c <HAL_DMAEx_MultiBufferStart_IT+0x6f0>
 8004f62:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f66:	428b      	cmp	r3, r1
 8004f68:	d018      	beq.n	8004f9c <HAL_DMAEx_MultiBufferStart_IT+0x6f0>
 8004f6a:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8004f6e:	428b      	cmp	r3, r1
 8004f70:	d017      	beq.n	8004fa2 <HAL_DMAEx_MultiBufferStart_IT+0x6f6>
 8004f72:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f76:	428b      	cmp	r3, r1
 8004f78:	d013      	beq.n	8004fa2 <HAL_DMAEx_MultiBufferStart_IT+0x6f6>
 8004f7a:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004f7e:	428b      	cmp	r3, r1
 8004f80:	d00f      	beq.n	8004fa2 <HAL_DMAEx_MultiBufferStart_IT+0x6f6>
 8004f82:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f86:	428b      	cmp	r3, r1
 8004f88:	bf0c      	ite	eq
 8004f8a:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 8004f8e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8004f92:	49a6      	ldr	r1, [pc, #664]	; (800522c <HAL_DMAEx_MultiBufferStart_IT+0x980>)
 8004f94:	608b      	str	r3, [r1, #8]
 8004f96:	e58b      	b.n	8004ab0 <HAL_DMAEx_MultiBufferStart_IT+0x204>
 8004f98:	2308      	movs	r3, #8
 8004f9a:	e7fa      	b.n	8004f92 <HAL_DMAEx_MultiBufferStart_IT+0x6e6>
 8004f9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fa0:	e7f7      	b.n	8004f92 <HAL_DMAEx_MultiBufferStart_IT+0x6e6>
 8004fa2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004fa6:	e7f4      	b.n	8004f92 <HAL_DMAEx_MultiBufferStart_IT+0x6e6>
 8004fa8:	49a1      	ldr	r1, [pc, #644]	; (8005230 <HAL_DMAEx_MultiBufferStart_IT+0x984>)
 8004faa:	428b      	cmp	r3, r1
 8004fac:	d93b      	bls.n	8005026 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d031      	beq.n	8005016 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8004fb2:	f501 716e 	add.w	r1, r1, #952	; 0x3b8
 8004fb6:	428b      	cmp	r3, r1
 8004fb8:	d02d      	beq.n	8005016 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8004fba:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004fbe:	428b      	cmp	r3, r1
 8004fc0:	d029      	beq.n	8005016 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8004fc2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004fc6:	428b      	cmp	r3, r1
 8004fc8:	d025      	beq.n	8005016 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8004fca:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8004fce:	428b      	cmp	r3, r1
 8004fd0:	d023      	beq.n	800501a <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8004fd2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004fd6:	428b      	cmp	r3, r1
 8004fd8:	d01f      	beq.n	800501a <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8004fda:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004fde:	428b      	cmp	r3, r1
 8004fe0:	d01b      	beq.n	800501a <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8004fe2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004fe6:	428b      	cmp	r3, r1
 8004fe8:	d017      	beq.n	800501a <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8004fea:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8004fee:	428b      	cmp	r3, r1
 8004ff0:	d016      	beq.n	8005020 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8004ff2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ff6:	428b      	cmp	r3, r1
 8004ff8:	d012      	beq.n	8005020 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8004ffa:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8004ffe:	428b      	cmp	r3, r1
 8005000:	d00e      	beq.n	8005020 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8005002:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005006:	428b      	cmp	r3, r1
 8005008:	bf0c      	ite	eq
 800500a:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 800500e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8005012:	4988      	ldr	r1, [pc, #544]	; (8005234 <HAL_DMAEx_MultiBufferStart_IT+0x988>)
 8005014:	e54b      	b.n	8004aae <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8005016:	2308      	movs	r3, #8
 8005018:	e7fb      	b.n	8005012 <HAL_DMAEx_MultiBufferStart_IT+0x766>
 800501a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800501e:	e7f8      	b.n	8005012 <HAL_DMAEx_MultiBufferStart_IT+0x766>
 8005020:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005024:	e7f5      	b.n	8005012 <HAL_DMAEx_MultiBufferStart_IT+0x766>
 8005026:	4293      	cmp	r3, r2
 8005028:	d030      	beq.n	800508c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>
 800502a:	4983      	ldr	r1, [pc, #524]	; (8005238 <HAL_DMAEx_MultiBufferStart_IT+0x98c>)
 800502c:	428b      	cmp	r3, r1
 800502e:	d02d      	beq.n	800508c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>
 8005030:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8005034:	428b      	cmp	r3, r1
 8005036:	d029      	beq.n	800508c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>
 8005038:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800503c:	428b      	cmp	r3, r1
 800503e:	d025      	beq.n	800508c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>
 8005040:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8005044:	428b      	cmp	r3, r1
 8005046:	d023      	beq.n	8005090 <HAL_DMAEx_MultiBufferStart_IT+0x7e4>
 8005048:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800504c:	428b      	cmp	r3, r1
 800504e:	d01f      	beq.n	8005090 <HAL_DMAEx_MultiBufferStart_IT+0x7e4>
 8005050:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8005054:	428b      	cmp	r3, r1
 8005056:	d01b      	beq.n	8005090 <HAL_DMAEx_MultiBufferStart_IT+0x7e4>
 8005058:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800505c:	428b      	cmp	r3, r1
 800505e:	d017      	beq.n	8005090 <HAL_DMAEx_MultiBufferStart_IT+0x7e4>
 8005060:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8005064:	428b      	cmp	r3, r1
 8005066:	d016      	beq.n	8005096 <HAL_DMAEx_MultiBufferStart_IT+0x7ea>
 8005068:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800506c:	428b      	cmp	r3, r1
 800506e:	d012      	beq.n	8005096 <HAL_DMAEx_MultiBufferStart_IT+0x7ea>
 8005070:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8005074:	428b      	cmp	r3, r1
 8005076:	d00e      	beq.n	8005096 <HAL_DMAEx_MultiBufferStart_IT+0x7ea>
 8005078:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800507c:	428b      	cmp	r3, r1
 800507e:	bf0c      	ite	eq
 8005080:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 8005084:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8005088:	496a      	ldr	r1, [pc, #424]	; (8005234 <HAL_DMAEx_MultiBufferStart_IT+0x988>)
 800508a:	e783      	b.n	8004f94 <HAL_DMAEx_MultiBufferStart_IT+0x6e8>
 800508c:	2308      	movs	r3, #8
 800508e:	e7fb      	b.n	8005088 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>
 8005090:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005094:	e7f8      	b.n	8005088 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>
 8005096:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800509a:	e7f5      	b.n	8005088 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800509c:	4b67      	ldr	r3, [pc, #412]	; (800523c <HAL_DMAEx_MultiBufferStart_IT+0x990>)
 800509e:	e547      	b.n	8004b30 <HAL_DMAEx_MultiBufferStart_IT+0x284>
 80050a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050a4:	e544      	b.n	8004b30 <HAL_DMAEx_MultiBufferStart_IT+0x284>
 80050a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050aa:	e541      	b.n	8004b30 <HAL_DMAEx_MultiBufferStart_IT+0x284>
 80050ac:	495e      	ldr	r1, [pc, #376]	; (8005228 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 80050ae:	428b      	cmp	r3, r1
 80050b0:	d93c      	bls.n	800512c <HAL_DMAEx_MultiBufferStart_IT+0x880>
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d032      	beq.n	800511c <HAL_DMAEx_MultiBufferStart_IT+0x870>
 80050b6:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80050ba:	428b      	cmp	r3, r1
 80050bc:	d02e      	beq.n	800511c <HAL_DMAEx_MultiBufferStart_IT+0x870>
 80050be:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 80050c2:	428b      	cmp	r3, r1
 80050c4:	d02a      	beq.n	800511c <HAL_DMAEx_MultiBufferStart_IT+0x870>
 80050c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80050ca:	428b      	cmp	r3, r1
 80050cc:	d026      	beq.n	800511c <HAL_DMAEx_MultiBufferStart_IT+0x870>
 80050ce:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 80050d2:	428b      	cmp	r3, r1
 80050d4:	d024      	beq.n	8005120 <HAL_DMAEx_MultiBufferStart_IT+0x874>
 80050d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80050da:	428b      	cmp	r3, r1
 80050dc:	d020      	beq.n	8005120 <HAL_DMAEx_MultiBufferStart_IT+0x874>
 80050de:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 80050e2:	428b      	cmp	r3, r1
 80050e4:	d01c      	beq.n	8005120 <HAL_DMAEx_MultiBufferStart_IT+0x874>
 80050e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80050ea:	428b      	cmp	r3, r1
 80050ec:	d018      	beq.n	8005120 <HAL_DMAEx_MultiBufferStart_IT+0x874>
 80050ee:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 80050f2:	428b      	cmp	r3, r1
 80050f4:	d017      	beq.n	8005126 <HAL_DMAEx_MultiBufferStart_IT+0x87a>
 80050f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80050fa:	428b      	cmp	r3, r1
 80050fc:	d013      	beq.n	8005126 <HAL_DMAEx_MultiBufferStart_IT+0x87a>
 80050fe:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8005102:	428b      	cmp	r3, r1
 8005104:	d00f      	beq.n	8005126 <HAL_DMAEx_MultiBufferStart_IT+0x87a>
 8005106:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800510a:	428b      	cmp	r3, r1
 800510c:	bf0c      	ite	eq
 800510e:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 8005112:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8005116:	4945      	ldr	r1, [pc, #276]	; (800522c <HAL_DMAEx_MultiBufferStart_IT+0x980>)
 8005118:	608b      	str	r3, [r1, #8]
 800511a:	e50b      	b.n	8004b34 <HAL_DMAEx_MultiBufferStart_IT+0x288>
 800511c:	4b47      	ldr	r3, [pc, #284]	; (800523c <HAL_DMAEx_MultiBufferStart_IT+0x990>)
 800511e:	e7fa      	b.n	8005116 <HAL_DMAEx_MultiBufferStart_IT+0x86a>
 8005120:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005124:	e7f7      	b.n	8005116 <HAL_DMAEx_MultiBufferStart_IT+0x86a>
 8005126:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800512a:	e7f4      	b.n	8005116 <HAL_DMAEx_MultiBufferStart_IT+0x86a>
 800512c:	4940      	ldr	r1, [pc, #256]	; (8005230 <HAL_DMAEx_MultiBufferStart_IT+0x984>)
 800512e:	428b      	cmp	r3, r1
 8005130:	d93b      	bls.n	80051aa <HAL_DMAEx_MultiBufferStart_IT+0x8fe>
 8005132:	4293      	cmp	r3, r2
 8005134:	d031      	beq.n	800519a <HAL_DMAEx_MultiBufferStart_IT+0x8ee>
 8005136:	f501 716e 	add.w	r1, r1, #952	; 0x3b8
 800513a:	428b      	cmp	r3, r1
 800513c:	d02d      	beq.n	800519a <HAL_DMAEx_MultiBufferStart_IT+0x8ee>
 800513e:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8005142:	428b      	cmp	r3, r1
 8005144:	d029      	beq.n	800519a <HAL_DMAEx_MultiBufferStart_IT+0x8ee>
 8005146:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800514a:	428b      	cmp	r3, r1
 800514c:	d025      	beq.n	800519a <HAL_DMAEx_MultiBufferStart_IT+0x8ee>
 800514e:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8005152:	428b      	cmp	r3, r1
 8005154:	d023      	beq.n	800519e <HAL_DMAEx_MultiBufferStart_IT+0x8f2>
 8005156:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800515a:	428b      	cmp	r3, r1
 800515c:	d01f      	beq.n	800519e <HAL_DMAEx_MultiBufferStart_IT+0x8f2>
 800515e:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8005162:	428b      	cmp	r3, r1
 8005164:	d01b      	beq.n	800519e <HAL_DMAEx_MultiBufferStart_IT+0x8f2>
 8005166:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800516a:	428b      	cmp	r3, r1
 800516c:	d017      	beq.n	800519e <HAL_DMAEx_MultiBufferStart_IT+0x8f2>
 800516e:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8005172:	428b      	cmp	r3, r1
 8005174:	d016      	beq.n	80051a4 <HAL_DMAEx_MultiBufferStart_IT+0x8f8>
 8005176:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800517a:	428b      	cmp	r3, r1
 800517c:	d012      	beq.n	80051a4 <HAL_DMAEx_MultiBufferStart_IT+0x8f8>
 800517e:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 8005182:	428b      	cmp	r3, r1
 8005184:	d00e      	beq.n	80051a4 <HAL_DMAEx_MultiBufferStart_IT+0x8f8>
 8005186:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800518a:	428b      	cmp	r3, r1
 800518c:	bf0c      	ite	eq
 800518e:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 8005192:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8005196:	4927      	ldr	r1, [pc, #156]	; (8005234 <HAL_DMAEx_MultiBufferStart_IT+0x988>)
 8005198:	e4cb      	b.n	8004b32 <HAL_DMAEx_MultiBufferStart_IT+0x286>
 800519a:	4b28      	ldr	r3, [pc, #160]	; (800523c <HAL_DMAEx_MultiBufferStart_IT+0x990>)
 800519c:	e7fb      	b.n	8005196 <HAL_DMAEx_MultiBufferStart_IT+0x8ea>
 800519e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051a2:	e7f8      	b.n	8005196 <HAL_DMAEx_MultiBufferStart_IT+0x8ea>
 80051a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80051a8:	e7f5      	b.n	8005196 <HAL_DMAEx_MultiBufferStart_IT+0x8ea>
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d030      	beq.n	8005210 <HAL_DMAEx_MultiBufferStart_IT+0x964>
 80051ae:	4922      	ldr	r1, [pc, #136]	; (8005238 <HAL_DMAEx_MultiBufferStart_IT+0x98c>)
 80051b0:	428b      	cmp	r3, r1
 80051b2:	d02d      	beq.n	8005210 <HAL_DMAEx_MultiBufferStart_IT+0x964>
 80051b4:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 80051b8:	428b      	cmp	r3, r1
 80051ba:	d029      	beq.n	8005210 <HAL_DMAEx_MultiBufferStart_IT+0x964>
 80051bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051c0:	428b      	cmp	r3, r1
 80051c2:	d025      	beq.n	8005210 <HAL_DMAEx_MultiBufferStart_IT+0x964>
 80051c4:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 80051c8:	428b      	cmp	r3, r1
 80051ca:	d023      	beq.n	8005214 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 80051cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051d0:	428b      	cmp	r3, r1
 80051d2:	d01f      	beq.n	8005214 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 80051d4:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 80051d8:	428b      	cmp	r3, r1
 80051da:	d01b      	beq.n	8005214 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 80051dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051e0:	428b      	cmp	r3, r1
 80051e2:	d017      	beq.n	8005214 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 80051e4:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 80051e8:	428b      	cmp	r3, r1
 80051ea:	d016      	beq.n	800521a <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 80051ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051f0:	428b      	cmp	r3, r1
 80051f2:	d012      	beq.n	800521a <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 80051f4:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 80051f8:	428b      	cmp	r3, r1
 80051fa:	d00e      	beq.n	800521a <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 80051fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005200:	428b      	cmp	r3, r1
 8005202:	bf0c      	ite	eq
 8005204:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 8005208:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800520c:	4909      	ldr	r1, [pc, #36]	; (8005234 <HAL_DMAEx_MultiBufferStart_IT+0x988>)
 800520e:	e783      	b.n	8005118 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8005210:	4b0a      	ldr	r3, [pc, #40]	; (800523c <HAL_DMAEx_MultiBufferStart_IT+0x990>)
 8005212:	e7fb      	b.n	800520c <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8005214:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005218:	e7f8      	b.n	800520c <HAL_DMAEx_MultiBufferStart_IT+0x960>
 800521a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800521e:	e7f5      	b.n	800520c <HAL_DMAEx_MultiBufferStart_IT+0x960>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8005220:	4b07      	ldr	r3, [pc, #28]	; (8005240 <HAL_DMAEx_MultiBufferStart_IT+0x994>)
 8005222:	e4c7      	b.n	8004bb4 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8005224:	2340      	movs	r3, #64	; 0x40
 8005226:	e4c5      	b.n	8004bb4 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8005228:	400260b8 	.word	0x400260b8
 800522c:	40026400 	.word	0x40026400
 8005230:	40026058 	.word	0x40026058
 8005234:	40026000 	.word	0x40026000
 8005238:	40026410 	.word	0x40026410
 800523c:	00800004 	.word	0x00800004
 8005240:	00800001 	.word	0x00800001
 8005244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005248:	e4b4      	b.n	8004bb4 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 800524a:	495d      	ldr	r1, [pc, #372]	; (80053c0 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 800524c:	428b      	cmp	r3, r1
 800524e:	d93a      	bls.n	80052c6 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8005250:	4293      	cmp	r3, r2
 8005252:	d031      	beq.n	80052b8 <HAL_DMAEx_MultiBufferStart_IT+0xa0c>
 8005254:	4a5b      	ldr	r2, [pc, #364]	; (80053c4 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d02e      	beq.n	80052b8 <HAL_DMAEx_MultiBufferStart_IT+0xa0c>
 800525a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800525e:	4293      	cmp	r3, r2
 8005260:	d02a      	beq.n	80052b8 <HAL_DMAEx_MultiBufferStart_IT+0xa0c>
 8005262:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005266:	4293      	cmp	r3, r2
 8005268:	d026      	beq.n	80052b8 <HAL_DMAEx_MultiBufferStart_IT+0xa0c>
 800526a:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800526e:	4293      	cmp	r3, r2
 8005270:	d024      	beq.n	80052bc <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 8005272:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005276:	4293      	cmp	r3, r2
 8005278:	d020      	beq.n	80052bc <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 800527a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800527e:	4293      	cmp	r3, r2
 8005280:	d01c      	beq.n	80052bc <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 8005282:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005286:	4293      	cmp	r3, r2
 8005288:	d018      	beq.n	80052bc <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 800528a:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800528e:	4293      	cmp	r3, r2
 8005290:	d016      	beq.n	80052c0 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8005292:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005296:	4293      	cmp	r3, r2
 8005298:	d012      	beq.n	80052c0 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 800529a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00e      	beq.n	80052c0 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 80052a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052a6:	4293      	cmp	r3, r2
 80052a8:	bf0c      	ite	eq
 80052aa:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80052ae:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 80052b2:	4a45      	ldr	r2, [pc, #276]	; (80053c8 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80052b4:	6093      	str	r3, [r2, #8]
 80052b6:	e47f      	b.n	8004bb8 <HAL_DMAEx_MultiBufferStart_IT+0x30c>
 80052b8:	4b44      	ldr	r3, [pc, #272]	; (80053cc <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 80052ba:	e7fa      	b.n	80052b2 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80052bc:	2340      	movs	r3, #64	; 0x40
 80052be:	e7f8      	b.n	80052b2 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80052c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052c4:	e7f5      	b.n	80052b2 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80052c6:	4942      	ldr	r1, [pc, #264]	; (80053d0 <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 80052c8:	428b      	cmp	r3, r1
 80052ca:	d939      	bls.n	8005340 <HAL_DMAEx_MultiBufferStart_IT+0xa94>
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d030      	beq.n	8005332 <HAL_DMAEx_MultiBufferStart_IT+0xa86>
 80052d0:	4a3c      	ldr	r2, [pc, #240]	; (80053c4 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d02d      	beq.n	8005332 <HAL_DMAEx_MultiBufferStart_IT+0xa86>
 80052d6:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80052da:	4293      	cmp	r3, r2
 80052dc:	d029      	beq.n	8005332 <HAL_DMAEx_MultiBufferStart_IT+0xa86>
 80052de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d025      	beq.n	8005332 <HAL_DMAEx_MultiBufferStart_IT+0xa86>
 80052e6:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d023      	beq.n	8005336 <HAL_DMAEx_MultiBufferStart_IT+0xa8a>
 80052ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d01f      	beq.n	8005336 <HAL_DMAEx_MultiBufferStart_IT+0xa8a>
 80052f6:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d01b      	beq.n	8005336 <HAL_DMAEx_MultiBufferStart_IT+0xa8a>
 80052fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005302:	4293      	cmp	r3, r2
 8005304:	d017      	beq.n	8005336 <HAL_DMAEx_MultiBufferStart_IT+0xa8a>
 8005306:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800530a:	4293      	cmp	r3, r2
 800530c:	d015      	beq.n	800533a <HAL_DMAEx_MultiBufferStart_IT+0xa8e>
 800530e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005312:	4293      	cmp	r3, r2
 8005314:	d011      	beq.n	800533a <HAL_DMAEx_MultiBufferStart_IT+0xa8e>
 8005316:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800531a:	4293      	cmp	r3, r2
 800531c:	d00d      	beq.n	800533a <HAL_DMAEx_MultiBufferStart_IT+0xa8e>
 800531e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005322:	4293      	cmp	r3, r2
 8005324:	bf0c      	ite	eq
 8005326:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800532a:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 800532e:	4a29      	ldr	r2, [pc, #164]	; (80053d4 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 8005330:	e441      	b.n	8004bb6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005332:	4b26      	ldr	r3, [pc, #152]	; (80053cc <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 8005334:	e7fb      	b.n	800532e <HAL_DMAEx_MultiBufferStart_IT+0xa82>
 8005336:	2340      	movs	r3, #64	; 0x40
 8005338:	e7f9      	b.n	800532e <HAL_DMAEx_MultiBufferStart_IT+0xa82>
 800533a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800533e:	e7f6      	b.n	800532e <HAL_DMAEx_MultiBufferStart_IT+0xa82>
 8005340:	4293      	cmp	r3, r2
 8005342:	d030      	beq.n	80053a6 <HAL_DMAEx_MultiBufferStart_IT+0xafa>
 8005344:	4a1f      	ldr	r2, [pc, #124]	; (80053c4 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d02d      	beq.n	80053a6 <HAL_DMAEx_MultiBufferStart_IT+0xafa>
 800534a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800534e:	4293      	cmp	r3, r2
 8005350:	d029      	beq.n	80053a6 <HAL_DMAEx_MultiBufferStart_IT+0xafa>
 8005352:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005356:	4293      	cmp	r3, r2
 8005358:	d025      	beq.n	80053a6 <HAL_DMAEx_MultiBufferStart_IT+0xafa>
 800535a:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800535e:	4293      	cmp	r3, r2
 8005360:	d023      	beq.n	80053aa <HAL_DMAEx_MultiBufferStart_IT+0xafe>
 8005362:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005366:	4293      	cmp	r3, r2
 8005368:	d01f      	beq.n	80053aa <HAL_DMAEx_MultiBufferStart_IT+0xafe>
 800536a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800536e:	4293      	cmp	r3, r2
 8005370:	d01b      	beq.n	80053aa <HAL_DMAEx_MultiBufferStart_IT+0xafe>
 8005372:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005376:	4293      	cmp	r3, r2
 8005378:	d017      	beq.n	80053aa <HAL_DMAEx_MultiBufferStart_IT+0xafe>
 800537a:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800537e:	4293      	cmp	r3, r2
 8005380:	d015      	beq.n	80053ae <HAL_DMAEx_MultiBufferStart_IT+0xb02>
 8005382:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005386:	4293      	cmp	r3, r2
 8005388:	d011      	beq.n	80053ae <HAL_DMAEx_MultiBufferStart_IT+0xb02>
 800538a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800538e:	4293      	cmp	r3, r2
 8005390:	d00d      	beq.n	80053ae <HAL_DMAEx_MultiBufferStart_IT+0xb02>
 8005392:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005396:	4293      	cmp	r3, r2
 8005398:	bf0c      	ite	eq
 800539a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800539e:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 80053a2:	4a0c      	ldr	r2, [pc, #48]	; (80053d4 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 80053a4:	e786      	b.n	80052b4 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 80053a6:	4b09      	ldr	r3, [pc, #36]	; (80053cc <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 80053a8:	e7fb      	b.n	80053a2 <HAL_DMAEx_MultiBufferStart_IT+0xaf6>
 80053aa:	2340      	movs	r3, #64	; 0x40
 80053ac:	e7f9      	b.n	80053a2 <HAL_DMAEx_MultiBufferStart_IT+0xaf6>
 80053ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053b2:	e7f6      	b.n	80053a2 <HAL_DMAEx_MultiBufferStart_IT+0xaf6>
    __HAL_UNLOCK(hdma);	  
 80053b4:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80053b8:	2002      	movs	r0, #2
 80053ba:	f7ff ba7f 	b.w	80048bc <HAL_DMAEx_MultiBufferStart_IT+0x10>
 80053be:	bf00      	nop
 80053c0:	400260b8 	.word	0x400260b8
 80053c4:	40026410 	.word	0x40026410
 80053c8:	40026400 	.word	0x40026400
 80053cc:	00800001 	.word	0x00800001
 80053d0:	40026058 	.word	0x40026058
 80053d4:	40026000 	.word	0x40026000

080053d8 <HAL_DMAEx_ChangeMemory>:
  if(memory == MEMORY0)
 80053d8:	6803      	ldr	r3, [r0, #0]
 80053da:	b912      	cbnz	r2, 80053e2 <HAL_DMAEx_ChangeMemory+0xa>
    hdma->Instance->M0AR = Address;
 80053dc:	60d9      	str	r1, [r3, #12]
}
 80053de:	2000      	movs	r0, #0
 80053e0:	4770      	bx	lr
    hdma->Instance->M1AR = Address;
 80053e2:	6119      	str	r1, [r3, #16]
 80053e4:	e7fb      	b.n	80053de <HAL_DMAEx_ChangeMemory+0x6>
  *            - Peripheral clocks  
  *            - LSI, LSE and RTC clocks 
  * @retval None
  */
__weak void HAL_RCC_DeInit(void)
{}
 80053e6:	4770      	bx	lr

080053e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ea:	6803      	ldr	r3, [r0, #0]
{
 80053ec:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ee:	07d8      	lsls	r0, r3, #31
 80053f0:	d43f      	bmi.n	8005472 <HAL_RCC_OscConfig+0x8a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	0799      	lsls	r1, r3, #30
 80053f6:	f100 808a 	bmi.w	800550e <HAL_RCC_OscConfig+0x126>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	071e      	lsls	r6, r3, #28
 80053fe:	f100 80d5 	bmi.w	80055ac <HAL_RCC_OscConfig+0x1c4>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	075d      	lsls	r5, r3, #29
 8005406:	d52e      	bpl.n	8005466 <HAL_RCC_OscConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005408:	2300      	movs	r3, #0
 800540a:	9301      	str	r3, [sp, #4]
 800540c:	4b8e      	ldr	r3, [pc, #568]	; (8005648 <HAL_RCC_OscConfig+0x260>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800540e:	4d8f      	ldr	r5, [pc, #572]	; (800564c <HAL_RCC_OscConfig+0x264>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8005410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005412:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005416:	641a      	str	r2, [r3, #64]	; 0x40
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8005422:	682b      	ldr	r3, [r5, #0]
 8005424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005428:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 800542a:	f7fd ff87 	bl	800333c <HAL_GetTick>
 800542e:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005430:	682b      	ldr	r3, [r5, #0]
 8005432:	05da      	lsls	r2, r3, #23
 8005434:	f140 80dc 	bpl.w	80055f0 <HAL_RCC_OscConfig+0x208>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005438:	68a2      	ldr	r2, [r4, #8]
 800543a:	4b83      	ldr	r3, [pc, #524]	; (8005648 <HAL_RCC_OscConfig+0x260>)
 800543c:	2a01      	cmp	r2, #1
 800543e:	f040 80de 	bne.w	80055fe <HAL_RCC_OscConfig+0x216>
 8005442:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005444:	f042 0201 	orr.w	r2, r2, #1
 8005448:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800544a:	68a3      	ldr	r3, [r4, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 80eb 	beq.w	8005628 <HAL_RCC_OscConfig+0x240>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005452:	f7fd ff73 	bl	800333c <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005456:	4d7c      	ldr	r5, [pc, #496]	; (8005648 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8005458:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800545a:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800545e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005460:	079b      	lsls	r3, r3, #30
 8005462:	f140 80da 	bpl.w	800561a <HAL_RCC_OscConfig+0x232>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005466:	69a2      	ldr	r2, [r4, #24]
 8005468:	2a00      	cmp	r2, #0
 800546a:	f040 80f5 	bne.w	8005658 <HAL_RCC_OscConfig+0x270>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800546e:	2000      	movs	r0, #0
 8005470:	e015      	b.n	800549e <HAL_RCC_OscConfig+0xb6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005472:	4b75      	ldr	r3, [pc, #468]	; (8005648 <HAL_RCC_OscConfig+0x260>)
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	f002 020c 	and.w	r2, r2, #12
 800547a:	2a04      	cmp	r2, #4
 800547c:	d007      	beq.n	800548e <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005484:	2a08      	cmp	r2, #8
 8005486:	d10c      	bne.n	80054a2 <HAL_RCC_OscConfig+0xba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	0252      	lsls	r2, r2, #9
 800548c:	d509      	bpl.n	80054a2 <HAL_RCC_OscConfig+0xba>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800548e:	4b6e      	ldr	r3, [pc, #440]	; (8005648 <HAL_RCC_OscConfig+0x260>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	039b      	lsls	r3, r3, #14
 8005494:	d5ad      	bpl.n	80053f2 <HAL_RCC_OscConfig+0xa>
 8005496:	6863      	ldr	r3, [r4, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1aa      	bne.n	80053f2 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 800549c:	2001      	movs	r0, #1
}
 800549e:	b003      	add	sp, #12
 80054a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054a2:	6862      	ldr	r2, [r4, #4]
 80054a4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80054a8:	d113      	bne.n	80054d2 <HAL_RCC_OscConfig+0xea>
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80054b0:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054b2:	6863      	ldr	r3, [r4, #4]
 80054b4:	b1eb      	cbz	r3, 80054f2 <HAL_RCC_OscConfig+0x10a>
        tickstart = HAL_GetTick();
 80054b6:	f7fd ff41 	bl	800333c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ba:	4d63      	ldr	r5, [pc, #396]	; (8005648 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80054bc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054be:	682b      	ldr	r3, [r5, #0]
 80054c0:	039f      	lsls	r7, r3, #14
 80054c2:	d496      	bmi.n	80053f2 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054c4:	f7fd ff3a 	bl	800333c <HAL_GetTick>
 80054c8:	1b80      	subs	r0, r0, r6
 80054ca:	2864      	cmp	r0, #100	; 0x64
 80054cc:	d9f7      	bls.n	80054be <HAL_RCC_OscConfig+0xd6>
            return HAL_TIMEOUT;
 80054ce:	2003      	movs	r0, #3
 80054d0:	e7e5      	b.n	800549e <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054d2:	4b5d      	ldr	r3, [pc, #372]	; (8005648 <HAL_RCC_OscConfig+0x260>)
 80054d4:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	d103      	bne.n	80054e4 <HAL_RCC_OscConfig+0xfc>
 80054dc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	e7e2      	b.n	80054aa <HAL_RCC_OscConfig+0xc2>
 80054e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054f0:	e7de      	b.n	80054b0 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 80054f2:	f7fd ff23 	bl	800333c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054f6:	4d54      	ldr	r5, [pc, #336]	; (8005648 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80054f8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054fa:	682b      	ldr	r3, [r5, #0]
 80054fc:	0398      	lsls	r0, r3, #14
 80054fe:	f57f af78 	bpl.w	80053f2 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005502:	f7fd ff1b 	bl	800333c <HAL_GetTick>
 8005506:	1b80      	subs	r0, r0, r6
 8005508:	2864      	cmp	r0, #100	; 0x64
 800550a:	d9f6      	bls.n	80054fa <HAL_RCC_OscConfig+0x112>
 800550c:	e7df      	b.n	80054ce <HAL_RCC_OscConfig+0xe6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800550e:	4b4e      	ldr	r3, [pc, #312]	; (8005648 <HAL_RCC_OscConfig+0x260>)
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	f012 0f0c 	tst.w	r2, #12
 8005516:	d007      	beq.n	8005528 <HAL_RCC_OscConfig+0x140>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800551e:	2a08      	cmp	r2, #8
 8005520:	d116      	bne.n	8005550 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	0259      	lsls	r1, r3, #9
 8005526:	d413      	bmi.n	8005550 <HAL_RCC_OscConfig+0x168>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005528:	4b47      	ldr	r3, [pc, #284]	; (8005648 <HAL_RCC_OscConfig+0x260>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	0792      	lsls	r2, r2, #30
 800552e:	d502      	bpl.n	8005536 <HAL_RCC_OscConfig+0x14e>
 8005530:	68e2      	ldr	r2, [r4, #12]
 8005532:	2a01      	cmp	r2, #1
 8005534:	d1b2      	bne.n	800549c <HAL_RCC_OscConfig+0xb4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005536:	6818      	ldr	r0, [r3, #0]
 8005538:	22f8      	movs	r2, #248	; 0xf8
 800553a:	fa92 f2a2 	rbit	r2, r2
 800553e:	fab2 f182 	clz	r1, r2
 8005542:	6922      	ldr	r2, [r4, #16]
 8005544:	408a      	lsls	r2, r1
 8005546:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 800554a:	430a      	orrs	r2, r1
 800554c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800554e:	e754      	b.n	80053fa <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005550:	68e2      	ldr	r2, [r4, #12]
 8005552:	4b3f      	ldr	r3, [pc, #252]	; (8005650 <HAL_RCC_OscConfig+0x268>)
 8005554:	b1da      	cbz	r2, 800558e <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_ENABLE();
 8005556:	2201      	movs	r2, #1
 8005558:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800555a:	f7fd feef 	bl	800333c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800555e:	4d3a      	ldr	r5, [pc, #232]	; (8005648 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8005560:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005562:	682b      	ldr	r3, [r5, #0]
 8005564:	079b      	lsls	r3, r3, #30
 8005566:	d50c      	bpl.n	8005582 <HAL_RCC_OscConfig+0x19a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005568:	6829      	ldr	r1, [r5, #0]
 800556a:	23f8      	movs	r3, #248	; 0xf8
 800556c:	fa93 f3a3 	rbit	r3, r3
 8005570:	fab3 f283 	clz	r2, r3
 8005574:	6923      	ldr	r3, [r4, #16]
 8005576:	4093      	lsls	r3, r2
 8005578:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800557c:	4313      	orrs	r3, r2
 800557e:	602b      	str	r3, [r5, #0]
 8005580:	e73b      	b.n	80053fa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005582:	f7fd fedb 	bl	800333c <HAL_GetTick>
 8005586:	1b80      	subs	r0, r0, r6
 8005588:	2802      	cmp	r0, #2
 800558a:	d9ea      	bls.n	8005562 <HAL_RCC_OscConfig+0x17a>
 800558c:	e79f      	b.n	80054ce <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_HSI_DISABLE();
 800558e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005590:	f7fd fed4 	bl	800333c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005594:	4d2c      	ldr	r5, [pc, #176]	; (8005648 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8005596:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	079f      	lsls	r7, r3, #30
 800559c:	f57f af2d 	bpl.w	80053fa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055a0:	f7fd fecc 	bl	800333c <HAL_GetTick>
 80055a4:	1b80      	subs	r0, r0, r6
 80055a6:	2802      	cmp	r0, #2
 80055a8:	d9f6      	bls.n	8005598 <HAL_RCC_OscConfig+0x1b0>
 80055aa:	e790      	b.n	80054ce <HAL_RCC_OscConfig+0xe6>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055ac:	6962      	ldr	r2, [r4, #20]
 80055ae:	4b29      	ldr	r3, [pc, #164]	; (8005654 <HAL_RCC_OscConfig+0x26c>)
 80055b0:	b17a      	cbz	r2, 80055d2 <HAL_RCC_OscConfig+0x1ea>
      __HAL_RCC_LSI_ENABLE();
 80055b2:	2201      	movs	r2, #1
 80055b4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80055b6:	f7fd fec1 	bl	800333c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ba:	4d23      	ldr	r5, [pc, #140]	; (8005648 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80055bc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055be:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80055c0:	0798      	lsls	r0, r3, #30
 80055c2:	f53f af1e 	bmi.w	8005402 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055c6:	f7fd feb9 	bl	800333c <HAL_GetTick>
 80055ca:	1b80      	subs	r0, r0, r6
 80055cc:	2802      	cmp	r0, #2
 80055ce:	d9f6      	bls.n	80055be <HAL_RCC_OscConfig+0x1d6>
 80055d0:	e77d      	b.n	80054ce <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_LSI_DISABLE();
 80055d2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80055d4:	f7fd feb2 	bl	800333c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055d8:	4d1b      	ldr	r5, [pc, #108]	; (8005648 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80055da:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055dc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80055de:	0799      	lsls	r1, r3, #30
 80055e0:	f57f af0f 	bpl.w	8005402 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055e4:	f7fd feaa 	bl	800333c <HAL_GetTick>
 80055e8:	1b80      	subs	r0, r0, r6
 80055ea:	2802      	cmp	r0, #2
 80055ec:	d9f6      	bls.n	80055dc <HAL_RCC_OscConfig+0x1f4>
 80055ee:	e76e      	b.n	80054ce <HAL_RCC_OscConfig+0xe6>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80055f0:	f7fd fea4 	bl	800333c <HAL_GetTick>
 80055f4:	1b80      	subs	r0, r0, r6
 80055f6:	2802      	cmp	r0, #2
 80055f8:	f67f af1a 	bls.w	8005430 <HAL_RCC_OscConfig+0x48>
 80055fc:	e767      	b.n	80054ce <HAL_RCC_OscConfig+0xe6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055fe:	2a05      	cmp	r2, #5
 8005600:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005602:	d103      	bne.n	800560c <HAL_RCC_OscConfig+0x224>
 8005604:	f042 0204 	orr.w	r2, r2, #4
 8005608:	671a      	str	r2, [r3, #112]	; 0x70
 800560a:	e71a      	b.n	8005442 <HAL_RCC_OscConfig+0x5a>
 800560c:	f022 0201 	bic.w	r2, r2, #1
 8005610:	671a      	str	r2, [r3, #112]	; 0x70
 8005612:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005614:	f022 0204 	bic.w	r2, r2, #4
 8005618:	e716      	b.n	8005448 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800561a:	f7fd fe8f 	bl	800333c <HAL_GetTick>
 800561e:	1b80      	subs	r0, r0, r6
 8005620:	42b8      	cmp	r0, r7
 8005622:	f67f af1c 	bls.w	800545e <HAL_RCC_OscConfig+0x76>
 8005626:	e752      	b.n	80054ce <HAL_RCC_OscConfig+0xe6>
      tickstart = HAL_GetTick();
 8005628:	f7fd fe88 	bl	800333c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800562c:	4d06      	ldr	r5, [pc, #24]	; (8005648 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 800562e:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005630:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005634:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005636:	0798      	lsls	r0, r3, #30
 8005638:	f57f af15 	bpl.w	8005466 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800563c:	f7fd fe7e 	bl	800333c <HAL_GetTick>
 8005640:	1b80      	subs	r0, r0, r6
 8005642:	42b8      	cmp	r0, r7
 8005644:	d9f6      	bls.n	8005634 <HAL_RCC_OscConfig+0x24c>
 8005646:	e742      	b.n	80054ce <HAL_RCC_OscConfig+0xe6>
 8005648:	40023800 	.word	0x40023800
 800564c:	40007000 	.word	0x40007000
 8005650:	42470000 	.word	0x42470000
 8005654:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005658:	4d2b      	ldr	r5, [pc, #172]	; (8005708 <HAL_RCC_OscConfig+0x320>)
 800565a:	68ab      	ldr	r3, [r5, #8]
 800565c:	f003 030c 	and.w	r3, r3, #12
 8005660:	2b08      	cmp	r3, #8
 8005662:	f43f af1b 	beq.w	800549c <HAL_RCC_OscConfig+0xb4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005666:	4e29      	ldr	r6, [pc, #164]	; (800570c <HAL_RCC_OscConfig+0x324>)
 8005668:	2300      	movs	r3, #0
 800566a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800566c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800566e:	d13e      	bne.n	80056ee <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8005670:	f7fd fe64 	bl	800333c <HAL_GetTick>
 8005674:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005676:	682b      	ldr	r3, [r5, #0]
 8005678:	0199      	lsls	r1, r3, #6
 800567a:	d432      	bmi.n	80056e2 <HAL_RCC_OscConfig+0x2fa>
 800567c:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8005680:	fa97 f7a7 	rbit	r7, r7
 8005684:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005688:	fab7 f787 	clz	r7, r7
 800568c:	fa92 f2a2 	rbit	r2, r2
 8005690:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8005694:	fab2 f082 	clz	r0, r2
 8005698:	fa91 f1a1 	rbit	r1, r1
 800569c:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80056a4:	fa02 f707 	lsl.w	r7, r2, r7
 80056a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80056aa:	0852      	lsrs	r2, r2, #1
 80056ac:	3a01      	subs	r2, #1
 80056ae:	4082      	lsls	r2, r0
 80056b0:	433b      	orrs	r3, r7
 80056b2:	4313      	orrs	r3, r2
 80056b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056b6:	4c14      	ldr	r4, [pc, #80]	; (8005708 <HAL_RCC_OscConfig+0x320>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056b8:	fab1 f181 	clz	r1, r1
 80056bc:	fa02 f101 	lsl.w	r1, r2, r1
 80056c0:	430b      	orrs	r3, r1
 80056c2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80056c4:	2301      	movs	r3, #1
 80056c6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80056c8:	f7fd fe38 	bl	800333c <HAL_GetTick>
 80056cc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	019a      	lsls	r2, r3, #6
 80056d2:	f53f aecc 	bmi.w	800546e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056d6:	f7fd fe31 	bl	800333c <HAL_GetTick>
 80056da:	1b40      	subs	r0, r0, r5
 80056dc:	2802      	cmp	r0, #2
 80056de:	d9f6      	bls.n	80056ce <HAL_RCC_OscConfig+0x2e6>
 80056e0:	e6f5      	b.n	80054ce <HAL_RCC_OscConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056e2:	f7fd fe2b 	bl	800333c <HAL_GetTick>
 80056e6:	1bc0      	subs	r0, r0, r7
 80056e8:	2802      	cmp	r0, #2
 80056ea:	d9c4      	bls.n	8005676 <HAL_RCC_OscConfig+0x28e>
 80056ec:	e6ef      	b.n	80054ce <HAL_RCC_OscConfig+0xe6>
        tickstart = HAL_GetTick();
 80056ee:	f7fd fe25 	bl	800333c <HAL_GetTick>
 80056f2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f4:	682b      	ldr	r3, [r5, #0]
 80056f6:	019b      	lsls	r3, r3, #6
 80056f8:	f57f aeb9 	bpl.w	800546e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056fc:	f7fd fe1e 	bl	800333c <HAL_GetTick>
 8005700:	1b00      	subs	r0, r0, r4
 8005702:	2802      	cmp	r0, #2
 8005704:	d9f6      	bls.n	80056f4 <HAL_RCC_OscConfig+0x30c>
 8005706:	e6e2      	b.n	80054ce <HAL_RCC_OscConfig+0xe6>
 8005708:	40023800 	.word	0x40023800
 800570c:	42470060 	.word	0x42470060

08005710 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	460d      	mov	r5, r1
 8005714:	b088      	sub	sp, #32
 8005716:	4616      	mov	r6, r2
 8005718:	4c20      	ldr	r4, [pc, #128]	; (800579c <HAL_RCC_MCOConfig+0x8c>)
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800571a:	b9f0      	cbnz	r0, 800575a <HAL_RCC_MCOConfig+0x4a>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    
    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800571c:	9001      	str	r0, [sp, #4]
 800571e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005720:	f043 0301 	orr.w	r3, r3, #1
 8005724:	6323      	str	r3, [r4, #48]	; 0x30
 8005726:	6b23      	ldr	r3, [r4, #48]	; 0x30
    /* Configure the MCO1 pin in alternate function mode */    
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005728:	9007      	str	r0, [sp, #28]
    __MCO1_CLK_ENABLE();
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	9301      	str	r3, [sp, #4]
 8005730:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005732:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8005736:	2302      	movs	r3, #2
 8005738:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800573c:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800573e:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005742:	a903      	add	r1, sp, #12
 8005744:	4816      	ldr	r0, [pc, #88]	; (80057a0 <HAL_RCC_MCOConfig+0x90>)
 8005746:	f7fd ffa9 	bl	800369c <HAL_GPIO_Init>
    
    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800574a:	68a1      	ldr	r1, [r4, #8]
 800574c:	f021 61ec 	bic.w	r1, r1, #123731968	; 0x7600000
 8005750:	4331      	orrs	r1, r6
 8005752:	4329      	orrs	r1, r5
 8005754:	60a1      	str	r1, [r4, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8005756:	b008      	add	sp, #32
 8005758:	bd70      	pop	{r4, r5, r6, pc}
    __MCO2_CLK_ENABLE();
 800575a:	2300      	movs	r3, #0
 800575c:	9302      	str	r3, [sp, #8]
 800575e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005760:	4810      	ldr	r0, [pc, #64]	; (80057a4 <HAL_RCC_MCOConfig+0x94>)
    __MCO2_CLK_ENABLE();
 8005762:	f042 0204 	orr.w	r2, r2, #4
 8005766:	6322      	str	r2, [r4, #48]	; 0x30
 8005768:	6b22      	ldr	r2, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800576a:	9307      	str	r3, [sp, #28]
    __MCO2_CLK_ENABLE();
 800576c:	f002 0204 	and.w	r2, r2, #4
 8005770:	9202      	str	r2, [sp, #8]
 8005772:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005774:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005778:	2202      	movs	r2, #2
 800577a:	e9cd 1203 	strd	r1, r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800577e:	2203      	movs	r2, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005780:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005782:	e9cd 3205 	strd	r3, r2, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005786:	f7fd ff89 	bl	800369c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800578a:	68a3      	ldr	r3, [r4, #8]
 800578c:	ea45 01c6 	orr.w	r1, r5, r6, lsl #3
 8005790:	f023 4578 	bic.w	r5, r3, #4160749568	; 0xf8000000
 8005794:	430d      	orrs	r5, r1
 8005796:	60a5      	str	r5, [r4, #8]
}
 8005798:	e7dd      	b.n	8005756 <HAL_RCC_MCOConfig+0x46>
 800579a:	bf00      	nop
 800579c:	40023800 	.word	0x40023800
 80057a0:	40020000 	.word	0x40020000
 80057a4:	40020800 	.word	0x40020800

080057a8 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80057a8:	4b01      	ldr	r3, [pc, #4]	; (80057b0 <HAL_RCC_EnableCSS+0x8>)
 80057aa:	2201      	movs	r2, #1
 80057ac:	601a      	str	r2, [r3, #0]
}
 80057ae:	4770      	bx	lr
 80057b0:	4247004c 	.word	0x4247004c

080057b4 <HAL_RCC_DisableCSS>:
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 80057b4:	4b01      	ldr	r3, [pc, #4]	; (80057bc <HAL_RCC_DisableCSS+0x8>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]
}
 80057ba:	4770      	bx	lr
 80057bc:	4247004c 	.word	0x4247004c

080057c0 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057c0:	b510      	push	{r4, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057c2:	4a19      	ldr	r2, [pc, #100]	; (8005828 <HAL_RCC_GetSysClockFreq+0x68>)
 80057c4:	6893      	ldr	r3, [r2, #8]
 80057c6:	f003 030c 	and.w	r3, r3, #12
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d028      	beq.n	8005820 <HAL_RCC_GetSysClockFreq+0x60>
 80057ce:	2b08      	cmp	r3, #8
 80057d0:	d128      	bne.n	8005824 <HAL_RCC_GetSysClockFreq+0x64>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057d2:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057d4:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057d6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057da:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80057de:	f647 74c0 	movw	r4, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80057e2:	6853      	ldr	r3, [r2, #4]
 80057e4:	fa94 f0a4 	rbit	r0, r4
 80057e8:	fab0 f080 	clz	r0, r0
 80057ec:	ea03 0304 	and.w	r3, r3, r4
 80057f0:	fa23 f300 	lsr.w	r3, r3, r0
 80057f4:	bf14      	ite	ne
 80057f6:	480d      	ldrne	r0, [pc, #52]	; (800582c <HAL_RCC_GetSysClockFreq+0x6c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80057f8:	480d      	ldreq	r0, [pc, #52]	; (8005830 <HAL_RCC_GetSysClockFreq+0x70>)
 80057fa:	fbb0 f0f1 	udiv	r0, r0, r1
 80057fe:	4358      	muls	r0, r3
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8005800:	4b09      	ldr	r3, [pc, #36]	; (8005828 <HAL_RCC_GetSysClockFreq+0x68>)
 8005802:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	fa92 f2a2 	rbit	r2, r2
 800580c:	fab2 f282 	clz	r2, r2
 8005810:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005814:	40d3      	lsrs	r3, r2
 8005816:	3301      	adds	r3, #1
 8005818:	005b      	lsls	r3, r3, #1
      
      sysclockfreq = pllvco/pllp;
 800581a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800581e:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8005820:	4802      	ldr	r0, [pc, #8]	; (800582c <HAL_RCC_GetSysClockFreq+0x6c>)
 8005822:	e7fc      	b.n	800581e <HAL_RCC_GetSysClockFreq+0x5e>
      sysclockfreq = HSI_VALUE;
 8005824:	4802      	ldr	r0, [pc, #8]	; (8005830 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8005826:	e7fa      	b.n	800581e <HAL_RCC_GetSysClockFreq+0x5e>
 8005828:	40023800 	.word	0x40023800
 800582c:	007a1200 	.word	0x007a1200
 8005830:	00f42400 	.word	0x00f42400

08005834 <HAL_RCC_ClockConfig>:
{
 8005834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005838:	4b55      	ldr	r3, [pc, #340]	; (8005990 <HAL_RCC_ClockConfig+0x15c>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	f002 020f 	and.w	r2, r2, #15
 8005840:	428a      	cmp	r2, r1
{
 8005842:	4605      	mov	r5, r0
 8005844:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005846:	d331      	bcc.n	80058ac <HAL_RCC_ClockConfig+0x78>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	0798      	lsls	r0, r3, #30
 800584c:	d438      	bmi.n	80058c0 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800584e:	682b      	ldr	r3, [r5, #0]
 8005850:	07d9      	lsls	r1, r3, #31
 8005852:	d43d      	bmi.n	80058d0 <HAL_RCC_ClockConfig+0x9c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8005854:	4b4e      	ldr	r3, [pc, #312]	; (8005990 <HAL_RCC_ClockConfig+0x15c>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	f002 020f 	and.w	r2, r2, #15
 800585c:	42b2      	cmp	r2, r6
 800585e:	f200 8087 	bhi.w	8005970 <HAL_RCC_ClockConfig+0x13c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005862:	682b      	ldr	r3, [r5, #0]
 8005864:	075a      	lsls	r2, r3, #29
 8005866:	f100 808b 	bmi.w	8005980 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800586a:	682b      	ldr	r3, [r5, #0]
 800586c:	071b      	lsls	r3, r3, #28
 800586e:	d507      	bpl.n	8005880 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005870:	4a48      	ldr	r2, [pc, #288]	; (8005994 <HAL_RCC_ClockConfig+0x160>)
 8005872:	6929      	ldr	r1, [r5, #16]
 8005874:	6893      	ldr	r3, [r2, #8]
 8005876:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800587a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800587e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8005880:	f7ff ff9e 	bl	80057c0 <HAL_RCC_GetSysClockFreq>
 8005884:	4b43      	ldr	r3, [pc, #268]	; (8005994 <HAL_RCC_ClockConfig+0x160>)
 8005886:	22f0      	movs	r2, #240	; 0xf0
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	fa92 f2a2 	rbit	r2, r2
 800588e:	fab2 f282 	clz	r2, r2
 8005892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005896:	40d3      	lsrs	r3, r2
 8005898:	4a3f      	ldr	r2, [pc, #252]	; (8005998 <HAL_RCC_ClockConfig+0x164>)
 800589a:	5cd3      	ldrb	r3, [r2, r3]
 800589c:	40d8      	lsrs	r0, r3
 800589e:	4b3f      	ldr	r3, [pc, #252]	; (800599c <HAL_RCC_ClockConfig+0x168>)
 80058a0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80058a2:	2000      	movs	r0, #0
 80058a4:	f7fd fd14 	bl	80032d0 <HAL_InitTick>
  return HAL_OK;
 80058a8:	2000      	movs	r0, #0
 80058aa:	e007      	b.n	80058bc <HAL_RCC_ClockConfig+0x88>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ac:	b2ca      	uxtb	r2, r1
 80058ae:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	428b      	cmp	r3, r1
 80058b8:	d0c6      	beq.n	8005848 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80058ba:	2001      	movs	r0, #1
}
 80058bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058c0:	4a34      	ldr	r2, [pc, #208]	; (8005994 <HAL_RCC_ClockConfig+0x160>)
 80058c2:	68a9      	ldr	r1, [r5, #8]
 80058c4:	6893      	ldr	r3, [r2, #8]
 80058c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058ca:	430b      	orrs	r3, r1
 80058cc:	6093      	str	r3, [r2, #8]
 80058ce:	e7be      	b.n	800584e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058d0:	686a      	ldr	r2, [r5, #4]
 80058d2:	4b30      	ldr	r3, [pc, #192]	; (8005994 <HAL_RCC_ClockConfig+0x160>)
 80058d4:	2a01      	cmp	r2, #1
 80058d6:	d11d      	bne.n	8005914 <HAL_RCC_ClockConfig+0xe0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058de:	d0ec      	beq.n	80058ba <HAL_RCC_ClockConfig+0x86>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058e0:	4c2c      	ldr	r4, [pc, #176]	; (8005994 <HAL_RCC_ClockConfig+0x160>)
 80058e2:	68a3      	ldr	r3, [r4, #8]
 80058e4:	f023 0303 	bic.w	r3, r3, #3
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80058ec:	f7fd fd26 	bl	800333c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058f0:	686b      	ldr	r3, [r5, #4]
 80058f2:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80058f4:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058f6:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058fa:	d115      	bne.n	8005928 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80058fc:	68a3      	ldr	r3, [r4, #8]
 80058fe:	f003 030c 	and.w	r3, r3, #12
 8005902:	2b04      	cmp	r3, #4
 8005904:	d0a6      	beq.n	8005854 <HAL_RCC_ClockConfig+0x20>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005906:	f7fd fd19 	bl	800333c <HAL_GetTick>
 800590a:	1bc0      	subs	r0, r0, r7
 800590c:	4540      	cmp	r0, r8
 800590e:	d9f5      	bls.n	80058fc <HAL_RCC_ClockConfig+0xc8>
          return HAL_TIMEOUT;
 8005910:	2003      	movs	r0, #3
 8005912:	e7d3      	b.n	80058bc <HAL_RCC_ClockConfig+0x88>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8005914:	1e91      	subs	r1, r2, #2
 8005916:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005918:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800591a:	d802      	bhi.n	8005922 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800591c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005920:	e7dd      	b.n	80058de <HAL_RCC_ClockConfig+0xaa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005922:	f013 0f02 	tst.w	r3, #2
 8005926:	e7da      	b.n	80058de <HAL_RCC_ClockConfig+0xaa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005928:	2b02      	cmp	r3, #2
 800592a:	d10a      	bne.n	8005942 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800592c:	68a3      	ldr	r3, [r4, #8]
 800592e:	f003 030c 	and.w	r3, r3, #12
 8005932:	2b08      	cmp	r3, #8
 8005934:	d08e      	beq.n	8005854 <HAL_RCC_ClockConfig+0x20>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005936:	f7fd fd01 	bl	800333c <HAL_GetTick>
 800593a:	1bc0      	subs	r0, r0, r7
 800593c:	4540      	cmp	r0, r8
 800593e:	d9f5      	bls.n	800592c <HAL_RCC_ClockConfig+0xf8>
 8005940:	e7e6      	b.n	8005910 <HAL_RCC_ClockConfig+0xdc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8005942:	2b03      	cmp	r3, #3
 8005944:	d10f      	bne.n	8005966 <HAL_RCC_ClockConfig+0x132>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8005946:	68a3      	ldr	r3, [r4, #8]
 8005948:	f003 030c 	and.w	r3, r3, #12
 800594c:	2b0c      	cmp	r3, #12
 800594e:	d081      	beq.n	8005854 <HAL_RCC_ClockConfig+0x20>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005950:	f7fd fcf4 	bl	800333c <HAL_GetTick>
 8005954:	1bc0      	subs	r0, r0, r7
 8005956:	4540      	cmp	r0, r8
 8005958:	d9f5      	bls.n	8005946 <HAL_RCC_ClockConfig+0x112>
 800595a:	e7d9      	b.n	8005910 <HAL_RCC_ClockConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800595c:	f7fd fcee 	bl	800333c <HAL_GetTick>
 8005960:	1bc0      	subs	r0, r0, r7
 8005962:	4540      	cmp	r0, r8
 8005964:	d8d4      	bhi.n	8005910 <HAL_RCC_ClockConfig+0xdc>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005966:	68a3      	ldr	r3, [r4, #8]
 8005968:	f013 0f0c 	tst.w	r3, #12
 800596c:	d1f6      	bne.n	800595c <HAL_RCC_ClockConfig+0x128>
 800596e:	e771      	b.n	8005854 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005970:	b2f2      	uxtb	r2, r6
 8005972:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	42b3      	cmp	r3, r6
 800597c:	d19d      	bne.n	80058ba <HAL_RCC_ClockConfig+0x86>
 800597e:	e770      	b.n	8005862 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005980:	4a04      	ldr	r2, [pc, #16]	; (8005994 <HAL_RCC_ClockConfig+0x160>)
 8005982:	68e9      	ldr	r1, [r5, #12]
 8005984:	6893      	ldr	r3, [r2, #8]
 8005986:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800598a:	430b      	orrs	r3, r1
 800598c:	6093      	str	r3, [r2, #8]
 800598e:	e76c      	b.n	800586a <HAL_RCC_ClockConfig+0x36>
 8005990:	40023c00 	.word	0x40023c00
 8005994:	40023800 	.word	0x40023800
 8005998:	08006123 	.word	0x08006123
 800599c:	20000158 	.word	0x20000158

080059a0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80059a0:	4b01      	ldr	r3, [pc, #4]	; (80059a8 <HAL_RCC_GetHCLKFreq+0x8>)
 80059a2:	6818      	ldr	r0, [r3, #0]
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	20000158 	.word	0x20000158

080059ac <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80059ac:	4b08      	ldr	r3, [pc, #32]	; (80059d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059ae:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	fa92 f2a2 	rbit	r2, r2
 80059b8:	fab2 f282 	clz	r2, r2
 80059bc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80059c0:	40d3      	lsrs	r3, r2
 80059c2:	4a04      	ldr	r2, [pc, #16]	; (80059d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059c4:	5cd3      	ldrb	r3, [r2, r3]
 80059c6:	4a04      	ldr	r2, [pc, #16]	; (80059d8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80059c8:	6810      	ldr	r0, [r2, #0]
}
 80059ca:	40d8      	lsrs	r0, r3
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40023800 	.word	0x40023800
 80059d4:	08006133 	.word	0x08006133
 80059d8:	20000158 	.word	0x20000158

080059dc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80059dc:	4b08      	ldr	r3, [pc, #32]	; (8005a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059de:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	fa92 f2a2 	rbit	r2, r2
 80059e8:	fab2 f282 	clz	r2, r2
 80059ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80059f0:	40d3      	lsrs	r3, r2
 80059f2:	4a04      	ldr	r2, [pc, #16]	; (8005a04 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059f4:	5cd3      	ldrb	r3, [r2, r3]
 80059f6:	4a04      	ldr	r2, [pc, #16]	; (8005a08 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80059f8:	6810      	ldr	r0, [r2, #0]
} 
 80059fa:	40d8      	lsrs	r0, r3
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	40023800 	.word	0x40023800
 8005a04:	08006133 	.word	0x08006133
 8005a08:	20000158 	.word	0x20000158

08005a0c <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that 
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a0c:	b510      	push	{r4, lr}
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8005a0e:	230f      	movs	r3, #15
 8005a10:	6003      	str	r3, [r0, #0]
  
  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8005a12:	4b2f      	ldr	r3, [pc, #188]	; (8005ad0 <HAL_RCC_GetOscConfig+0xc4>)
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	0351      	lsls	r1, r2, #13
 8005a18:	d54d      	bpl.n	8005ab6 <HAL_RCC_GetOscConfig+0xaa>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8005a1a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8005a1e:	6042      	str	r2, [r0, #4]
  }
  
  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	f002 0201 	and.w	r2, r2, #1
 8005a26:	60c2      	str	r2, [r0, #12]
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
  }
  
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> POSITION_VAL(RCC_CR_HSITRIM));
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	21f8      	movs	r1, #248	; 0xf8
 8005a2c:	fa91 f1a1 	rbit	r1, r1
 8005a30:	fab1 f181 	clz	r1, r1
 8005a34:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8005a38:	40ca      	lsrs	r2, r1
 8005a3a:	6102      	str	r2, [r0, #16]
  
  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8005a3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a3e:	0752      	lsls	r2, r2, #29
 8005a40:	d540      	bpl.n	8005ac4 <HAL_RCC_GetOscConfig+0xb8>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8005a42:	2305      	movs	r3, #5
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
  }
  
  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8005a44:	4a22      	ldr	r2, [pc, #136]	; (8005ad0 <HAL_RCC_GetOscConfig+0xc4>)
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8005a46:	6083      	str	r3, [r0, #8]
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8005a48:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	6143      	str	r3, [r0, #20]
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
  }
  
  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8005a50:	6813      	ldr	r3, [r2, #0]
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8005a52:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005a56:	bf14      	ite	ne
 8005a58:	2302      	movne	r3, #2
 8005a5a:	2301      	moveq	r3, #1
 8005a5c:	6183      	str	r3, [r0, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005a5e:	6853      	ldr	r3, [r2, #4]
 8005a60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a64:	61c3      	str	r3, [r0, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8005a66:	6853      	ldr	r3, [r2, #4]
 8005a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a6c:	6203      	str	r3, [r0, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8005a6e:	6853      	ldr	r3, [r2, #4]
 8005a70:	f647 74c0 	movw	r4, #32704	; 0x7fc0
 8005a74:	fa94 f1a4 	rbit	r1, r4
 8005a78:	fab1 f181 	clz	r1, r1
 8005a7c:	4023      	ands	r3, r4
 8005a7e:	40cb      	lsrs	r3, r1
 8005a80:	6243      	str	r3, [r0, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> POSITION_VAL(RCC_PLLCFGR_PLLP));
 8005a82:	6853      	ldr	r3, [r2, #4]
 8005a84:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8005a88:	fa91 f1a1 	rbit	r1, r1
 8005a8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a90:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005a94:	fab1 f181 	clz	r1, r1
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	40cb      	lsrs	r3, r1
 8005a9c:	6283      	str	r3, [r0, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> POSITION_VAL(RCC_PLLCFGR_PLLQ));
 8005a9e:	6853      	ldr	r3, [r2, #4]
 8005aa0:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8005aa4:	fa92 f2a2 	rbit	r2, r2
 8005aa8:	fab2 f282 	clz	r2, r2
 8005aac:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8005ab0:	40d3      	lsrs	r3, r2
 8005ab2:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8005ab4:	bd10      	pop	{r4, pc}
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8005abc:	bf18      	it	ne
 8005abe:	f44f 3280 	movne.w	r2, #65536	; 0x10000
 8005ac2:	e7ac      	b.n	8005a1e <HAL_RCC_GetOscConfig+0x12>
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8005ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac6:	f013 0301 	ands.w	r3, r3, #1
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8005aca:	bf18      	it	ne
 8005acc:	2301      	movne	r3, #1
 8005ace:	e7b9      	b.n	8005a44 <HAL_RCC_GetOscConfig+0x38>
 8005ad0:	40023800 	.word	0x40023800

08005ad4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ad4:	230f      	movs	r3, #15
 8005ad6:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ad8:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <HAL_RCC_GetClockConfig+0x34>)
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	f002 0203 	and.w	r2, r2, #3
 8005ae0:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005ae8:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8005af0:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	08db      	lsrs	r3, r3, #3
 8005af6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005afa:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8005afc:	4b03      	ldr	r3, [pc, #12]	; (8005b0c <HAL_RCC_GetClockConfig+0x38>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 030f 	and.w	r3, r3, #15
 8005b04:	600b      	str	r3, [r1, #0]
}
 8005b06:	4770      	bx	lr
 8005b08:	40023800 	.word	0x40023800
 8005b0c:	40023c00 	.word	0x40023c00

08005b10 <HAL_RCC_CSSCallback>:
 8005b10:	4770      	bx	lr
	...

08005b14 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005b14:	b508      	push	{r3, lr}
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005b16:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <HAL_RCC_NMI_IRQHandler+0x18>)
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	061b      	lsls	r3, r3, #24
 8005b1c:	d504      	bpl.n	8005b28 <HAL_RCC_NMI_IRQHandler+0x14>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005b1e:	f7ff fff7 	bl	8005b10 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005b22:	4b03      	ldr	r3, [pc, #12]	; (8005b30 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8005b24:	2280      	movs	r2, #128	; 0x80
 8005b26:	701a      	strb	r2, [r3, #0]
  }
}
 8005b28:	bd08      	pop	{r3, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	4002380e 	.word	0x4002380e

08005b34 <FLASH_Program_DoubleWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005b34:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b36:	4908      	ldr	r1, [pc, #32]	; (8005b58 <FLASH_Program_DoubleWord+0x24>)
 8005b38:	690c      	ldr	r4, [r1, #16]
 8005b3a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8005b3e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005b40:	690c      	ldr	r4, [r1, #16]
 8005b42:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8005b46:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005b48:	690c      	ldr	r4, [r1, #16]
 8005b4a:	f044 0401 	orr.w	r4, r4, #1
 8005b4e:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005b50:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005b52:	6043      	str	r3, [r0, #4]
}
 8005b54:	bd10      	pop	{r4, pc}
 8005b56:	bf00      	nop
 8005b58:	40023c00 	.word	0x40023c00

08005b5c <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b5c:	4b07      	ldr	r3, [pc, #28]	; (8005b7c <FLASH_Program_Word+0x20>)
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005b64:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b6c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005b6e:	691a      	ldr	r2, [r3, #16]
 8005b70:	f042 0201 	orr.w	r2, r2, #1
 8005b74:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8005b76:	6001      	str	r1, [r0, #0]
}
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	40023c00 	.word	0x40023c00

08005b80 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b80:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <FLASH_Program_HalfWord+0x20>)
 8005b82:	691a      	ldr	r2, [r3, #16]
 8005b84:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005b88:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005b8a:	691a      	ldr	r2, [r3, #16]
 8005b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b90:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005b92:	691a      	ldr	r2, [r3, #16]
 8005b94:	f042 0201 	orr.w	r2, r2, #1
 8005b98:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8005b9a:	8001      	strh	r1, [r0, #0]
}
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	40023c00 	.word	0x40023c00

08005ba4 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005ba4:	4b20      	ldr	r3, [pc, #128]	; (8005c28 <FLASH_SetErrorCode+0x84>)
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	06d0      	lsls	r0, r2, #27
 8005baa:	d506      	bpl.n	8005bba <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005bac:	491f      	ldr	r1, [pc, #124]	; (8005c2c <FLASH_SetErrorCode+0x88>)
 8005bae:	69ca      	ldr	r2, [r1, #28]
 8005bb0:	f042 0210 	orr.w	r2, r2, #16
 8005bb4:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005bb6:	2210      	movs	r2, #16
 8005bb8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005bba:	68da      	ldr	r2, [r3, #12]
 8005bbc:	0691      	lsls	r1, r2, #26
 8005bbe:	d506      	bpl.n	8005bce <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005bc0:	491a      	ldr	r1, [pc, #104]	; (8005c2c <FLASH_SetErrorCode+0x88>)
 8005bc2:	69ca      	ldr	r2, [r1, #28]
 8005bc4:	f042 0208 	orr.w	r2, r2, #8
 8005bc8:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005bca:	2220      	movs	r2, #32
 8005bcc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005bce:	4b16      	ldr	r3, [pc, #88]	; (8005c28 <FLASH_SetErrorCode+0x84>)
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	0652      	lsls	r2, r2, #25
 8005bd4:	d506      	bpl.n	8005be4 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005bd6:	4915      	ldr	r1, [pc, #84]	; (8005c2c <FLASH_SetErrorCode+0x88>)
 8005bd8:	69ca      	ldr	r2, [r1, #28]
 8005bda:	f042 0204 	orr.w	r2, r2, #4
 8005bde:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005be0:	2240      	movs	r2, #64	; 0x40
 8005be2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	0610      	lsls	r0, r2, #24
 8005be8:	d506      	bpl.n	8005bf8 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005bea:	4910      	ldr	r1, [pc, #64]	; (8005c2c <FLASH_SetErrorCode+0x88>)
 8005bec:	69ca      	ldr	r2, [r1, #28]
 8005bee:	f042 0202 	orr.w	r2, r2, #2
 8005bf2:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005bf4:	2280      	movs	r2, #128	; 0x80
 8005bf6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005bf8:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <FLASH_SetErrorCode+0x84>)
 8005bfa:	68da      	ldr	r2, [r3, #12]
 8005bfc:	05d1      	lsls	r1, r2, #23
 8005bfe:	d507      	bpl.n	8005c10 <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005c00:	490a      	ldr	r1, [pc, #40]	; (8005c2c <FLASH_SetErrorCode+0x88>)
 8005c02:	69ca      	ldr	r2, [r1, #28]
 8005c04:	f042 0201 	orr.w	r2, r2, #1
 8005c08:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c0e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	0792      	lsls	r2, r2, #30
 8005c14:	d506      	bpl.n	8005c24 <FLASH_SetErrorCode+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005c16:	4905      	ldr	r1, [pc, #20]	; (8005c2c <FLASH_SetErrorCode+0x88>)
 8005c18:	69ca      	ldr	r2, [r1, #28]
 8005c1a:	f042 0220 	orr.w	r2, r2, #32
 8005c1e:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005c20:	2202      	movs	r2, #2
 8005c22:	60da      	str	r2, [r3, #12]
  }
}
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	40023c00 	.word	0x40023c00
 8005c2c:	200009d4 	.word	0x200009d4

08005c30 <HAL_FLASH_Program_IT>:
{
 8005c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8005c32:	4e1a      	ldr	r6, [pc, #104]	; (8005c9c <HAL_FLASH_Program_IT+0x6c>)
 8005c34:	7e35      	ldrb	r5, [r6, #24]
 8005c36:	2d01      	cmp	r5, #1
{
 8005c38:	4604      	mov	r4, r0
 8005c3a:	4608      	mov	r0, r1
 8005c3c:	4611      	mov	r1, r2
  __HAL_LOCK(&pFlash);
 8005c3e:	d02a      	beq.n	8005c96 <HAL_FLASH_Program_IT+0x66>
 8005c40:	2501      	movs	r5, #1
 8005c42:	7635      	strb	r5, [r6, #24]
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 8005c44:	4d16      	ldr	r5, [pc, #88]	; (8005ca0 <HAL_FLASH_Program_IT+0x70>)
 8005c46:	692f      	ldr	r7, [r5, #16]
 8005c48:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 8005c4c:	612f      	str	r7, [r5, #16]
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 8005c4e:	692f      	ldr	r7, [r5, #16]
 8005c50:	f047 7700 	orr.w	r7, r7, #33554432	; 0x2000000
 8005c54:	612f      	str	r7, [r5, #16]
  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 8005c56:	2703      	movs	r7, #3
 8005c58:	7037      	strb	r7, [r6, #0]
  pFlash.Address = Address;
 8005c5a:	6170      	str	r0, [r6, #20]
  if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005c5c:	b96c      	cbnz	r4, 8005c7a <HAL_FLASH_Program_IT+0x4a>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005c5e:	692b      	ldr	r3, [r5, #16]
 8005c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c64:	612b      	str	r3, [r5, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005c66:	692b      	ldr	r3, [r5, #16]
 8005c68:	612b      	str	r3, [r5, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005c6a:	692b      	ldr	r3, [r5, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005c6c:	b2d1      	uxtb	r1, r2
  FLASH->CR |= FLASH_CR_PG;
 8005c6e:	f043 0301 	orr.w	r3, r3, #1
 8005c72:	612b      	str	r3, [r5, #16]
  *(__IO uint8_t*)Address = Data;
 8005c74:	7001      	strb	r1, [r0, #0]
  return status;
 8005c76:	2000      	movs	r0, #0
}
 8005c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005c7a:	2c01      	cmp	r4, #1
 8005c7c:	d103      	bne.n	8005c86 <HAL_FLASH_Program_IT+0x56>
    FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005c7e:	b291      	uxth	r1, r2
 8005c80:	f7ff ff7e 	bl	8005b80 <FLASH_Program_HalfWord>
 8005c84:	e7f7      	b.n	8005c76 <HAL_FLASH_Program_IT+0x46>
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005c86:	2c02      	cmp	r4, #2
 8005c88:	d102      	bne.n	8005c90 <HAL_FLASH_Program_IT+0x60>
    FLASH_Program_Word(Address, (uint32_t) Data);
 8005c8a:	f7ff ff67 	bl	8005b5c <FLASH_Program_Word>
 8005c8e:	e7f2      	b.n	8005c76 <HAL_FLASH_Program_IT+0x46>
    FLASH_Program_DoubleWord(Address, Data);
 8005c90:	f7ff ff50 	bl	8005b34 <FLASH_Program_DoubleWord>
 8005c94:	e7ef      	b.n	8005c76 <HAL_FLASH_Program_IT+0x46>
  __HAL_LOCK(&pFlash);
 8005c96:	2002      	movs	r0, #2
 8005c98:	e7ee      	b.n	8005c78 <HAL_FLASH_Program_IT+0x48>
 8005c9a:	bf00      	nop
 8005c9c:	200009d4 	.word	0x200009d4
 8005ca0:	40023c00 	.word	0x40023c00

08005ca4 <HAL_FLASH_EndOfOperationCallback>:
}
 8005ca4:	4770      	bx	lr

08005ca6 <HAL_FLASH_OperationErrorCallback>:
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_FLASH_IRQHandler>:
{
 8005ca8:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005caa:	4b2e      	ldr	r3, [pc, #184]	; (8005d64 <HAL_FLASH_IRQHandler+0xbc>)
 8005cac:	4c2e      	ldr	r4, [pc, #184]	; (8005d68 <HAL_FLASH_IRQHandler+0xc0>)
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 8005cb4:	d00d      	beq.n	8005cd2 <HAL_FLASH_IRQHandler+0x2a>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8005cb6:	7823      	ldrb	r3, [r4, #0]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d135      	bne.n	8005d28 <HAL_FLASH_IRQHandler+0x80>
      pFlash.Sector = 0xFFFFFFFFU;
 8005cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      addresstmp = pFlash.Sector;
 8005cc0:	68e5      	ldr	r5, [r4, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 8005cc2:	60e3      	str	r3, [r4, #12]
    FLASH_SetErrorCode();
 8005cc4:	f7ff ff6e 	bl	8005ba4 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8005cc8:	4628      	mov	r0, r5
 8005cca:	f7ff ffec 	bl	8005ca6 <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	7023      	strb	r3, [r4, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005cd2:	4b24      	ldr	r3, [pc, #144]	; (8005d64 <HAL_FLASH_IRQHandler+0xbc>)
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	07d2      	lsls	r2, r2, #31
 8005cd8:	d513      	bpl.n	8005d02 <HAL_FLASH_IRQHandler+0x5a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005cda:	2201      	movs	r2, #1
 8005cdc:	60da      	str	r2, [r3, #12]
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8005cde:	7823      	ldrb	r3, [r4, #0]
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d131      	bne.n	8005d48 <HAL_FLASH_IRQHandler+0xa0>
      pFlash.NbSectorsToErase--;
 8005ce4:	6863      	ldr	r3, [r4, #4]
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	6063      	str	r3, [r4, #4]
      if(pFlash.NbSectorsToErase != 0U)
 8005cea:	6863      	ldr	r3, [r4, #4]
 8005cec:	b313      	cbz	r3, 8005d34 <HAL_FLASH_IRQHandler+0x8c>
        addresstmp = pFlash.Sector;
 8005cee:	68e0      	ldr	r0, [r4, #12]
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8005cf0:	f7ff ffd8 	bl	8005ca4 <HAL_FLASH_EndOfOperationCallback>
        pFlash.Sector++;
 8005cf4:	68e3      	ldr	r3, [r4, #12]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	60e3      	str	r3, [r4, #12]
        addresstmp = pFlash.Sector;
 8005cfa:	68e0      	ldr	r0, [r4, #12]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8005cfc:	7a21      	ldrb	r1, [r4, #8]
 8005cfe:	f7fe fccb 	bl	8004698 <FLASH_Erase_Sector>
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8005d02:	7823      	ldrb	r3, [r4, #0]
 8005d04:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8005d08:	b96b      	cbnz	r3, 8005d26 <HAL_FLASH_IRQHandler+0x7e>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8005d0a:	4b16      	ldr	r3, [pc, #88]	; (8005d64 <HAL_FLASH_IRQHandler+0xbc>)
 8005d0c:	691a      	ldr	r2, [r3, #16]
 8005d0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005d12:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005d1a:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8005d1c:	691a      	ldr	r2, [r3, #16]
 8005d1e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005d22:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 8005d24:	7621      	strb	r1, [r4, #24]
}
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8005d28:	7823      	ldrb	r3, [r4, #0]
 8005d2a:	2b02      	cmp	r3, #2
      addresstmp = pFlash.Bank;
 8005d2c:	bf0c      	ite	eq
 8005d2e:	6925      	ldreq	r5, [r4, #16]
      addresstmp = pFlash.Address;
 8005d30:	6965      	ldrne	r5, [r4, #20]
 8005d32:	e7c7      	b.n	8005cc4 <HAL_FLASH_IRQHandler+0x1c>
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8005d34:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005d38:	60e5      	str	r5, [r4, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005d3a:	7023      	strb	r3, [r4, #0]
        FLASH_FlushCaches() ;
 8005d3c:	f7fe fd06 	bl	800474c <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8005d40:	4628      	mov	r0, r5
 8005d42:	f7ff ffaf 	bl	8005ca4 <HAL_FLASH_EndOfOperationCallback>
 8005d46:	e7dc      	b.n	8005d02 <HAL_FLASH_IRQHandler+0x5a>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8005d48:	7823      	ldrb	r3, [r4, #0]
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d107      	bne.n	8005d5e <HAL_FLASH_IRQHandler+0xb6>
        FLASH_FlushCaches() ;
 8005d4e:	f7fe fcfd 	bl	800474c <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8005d52:	6920      	ldr	r0, [r4, #16]
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8005d54:	f7ff ffa6 	bl	8005ca4 <HAL_FLASH_EndOfOperationCallback>
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	7023      	strb	r3, [r4, #0]
 8005d5c:	e7d1      	b.n	8005d02 <HAL_FLASH_IRQHandler+0x5a>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8005d5e:	6960      	ldr	r0, [r4, #20]
 8005d60:	e7f8      	b.n	8005d54 <HAL_FLASH_IRQHandler+0xac>
 8005d62:	bf00      	nop
 8005d64:	40023c00 	.word	0x40023c00
 8005d68:	200009d4 	.word	0x200009d4

08005d6c <HAL_FLASH_Unlock>:
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8005d6c:	4b06      	ldr	r3, [pc, #24]	; (8005d88 <HAL_FLASH_Unlock+0x1c>)
 8005d6e:	691a      	ldr	r2, [r3, #16]
 8005d70:	2a00      	cmp	r2, #0
    FLASH->KEYR = FLASH_KEY1;
 8005d72:	bfbf      	itttt	lt
 8005d74:	4a05      	ldrlt	r2, [pc, #20]	; (8005d8c <HAL_FLASH_Unlock+0x20>)
 8005d76:	605a      	strlt	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8005d78:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
  return HAL_OK; 
 8005d7c:	2000      	movlt	r0, #0
    FLASH->KEYR = FLASH_KEY2;
 8005d7e:	bfb4      	ite	lt
 8005d80:	605a      	strlt	r2, [r3, #4]
    return HAL_ERROR;
 8005d82:	2001      	movge	r0, #1
}
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40023c00 	.word	0x40023c00
 8005d8c:	45670123 	.word	0x45670123

08005d90 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8005d90:	4a03      	ldr	r2, [pc, #12]	; (8005da0 <HAL_FLASH_Lock+0x10>)
 8005d92:	6913      	ldr	r3, [r2, #16]
 8005d94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d98:	6113      	str	r3, [r2, #16]
}
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40023c00 	.word	0x40023c00

08005da4 <HAL_FLASH_OB_Unlock>:
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8005da4:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <HAL_FLASH_OB_Unlock+0x1c>)
 8005da6:	695a      	ldr	r2, [r3, #20]
 8005da8:	07d2      	lsls	r2, r2, #31
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8005daa:	bf41      	itttt	mi
 8005dac:	4a05      	ldrmi	r2, [pc, #20]	; (8005dc4 <HAL_FLASH_OB_Unlock+0x20>)
 8005dae:	609a      	strmi	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8005db0:	f102 3244 	addmi.w	r2, r2, #1145324612	; 0x44444444
  return HAL_OK;  
 8005db4:	2000      	movmi	r0, #0
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8005db6:	bf4c      	ite	mi
 8005db8:	609a      	strmi	r2, [r3, #8]
    return HAL_ERROR;
 8005dba:	2001      	movpl	r0, #1
}
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40023c00 	.word	0x40023c00
 8005dc4:	08192a3b 	.word	0x08192a3b

08005dc8 <HAL_FLASH_OB_Lock>:
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8005dc8:	4a03      	ldr	r2, [pc, #12]	; (8005dd8 <HAL_FLASH_OB_Lock+0x10>)
 8005dca:	6953      	ldr	r3, [r2, #20]
 8005dcc:	f043 0301 	orr.w	r3, r3, #1
 8005dd0:	6153      	str	r3, [r2, #20]
}
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	40023c00 	.word	0x40023c00

08005ddc <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 8005ddc:	4b01      	ldr	r3, [pc, #4]	; (8005de4 <HAL_FLASH_GetError+0x8>)
 8005dde:	69d8      	ldr	r0, [r3, #28]
}  
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	200009d4 	.word	0x200009d4

08005de8 <FLASH_WaitForLastOperation>:
{ 
 8005de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005dea:	4b12      	ldr	r3, [pc, #72]	; (8005e34 <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005dec:	4c12      	ldr	r4, [pc, #72]	; (8005e38 <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005dee:	2200      	movs	r2, #0
{ 
 8005df0:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005df2:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8005df4:	f7fd faa2 	bl	800333c <HAL_GetTick>
 8005df8:	4626      	mov	r6, r4
 8005dfa:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005dfc:	68e3      	ldr	r3, [r4, #12]
 8005dfe:	03da      	lsls	r2, r3, #15
 8005e00:	d40c      	bmi.n	8005e1c <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005e02:	68e3      	ldr	r3, [r4, #12]
 8005e04:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005e06:	bf44      	itt	mi
 8005e08:	2301      	movmi	r3, #1
 8005e0a:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005e0c:	68f0      	ldr	r0, [r6, #12]
 8005e0e:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 8005e12:	d007      	beq.n	8005e24 <FLASH_WaitForLastOperation+0x3c>
    FLASH_SetErrorCode();
 8005e14:	f7ff fec6 	bl	8005ba4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005e18:	2001      	movs	r0, #1
 8005e1a:	e003      	b.n	8005e24 <FLASH_WaitForLastOperation+0x3c>
    if(Timeout != HAL_MAX_DELAY)
 8005e1c:	1c69      	adds	r1, r5, #1
 8005e1e:	d0ed      	beq.n	8005dfc <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005e20:	b90d      	cbnz	r5, 8005e26 <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 8005e22:	2003      	movs	r0, #3
}  
 8005e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005e26:	f7fd fa89 	bl	800333c <HAL_GetTick>
 8005e2a:	1bc0      	subs	r0, r0, r7
 8005e2c:	42a8      	cmp	r0, r5
 8005e2e:	d9e5      	bls.n	8005dfc <FLASH_WaitForLastOperation+0x14>
 8005e30:	e7f7      	b.n	8005e22 <FLASH_WaitForLastOperation+0x3a>
 8005e32:	bf00      	nop
 8005e34:	200009d4 	.word	0x200009d4
 8005e38:	40023c00 	.word	0x40023c00

08005e3c <HAL_FLASH_Program>:
{
 8005e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8005e40:	4d1f      	ldr	r5, [pc, #124]	; (8005ec0 <HAL_FLASH_Program+0x84>)
{
 8005e42:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8005e44:	7e2b      	ldrb	r3, [r5, #24]
 8005e46:	2b01      	cmp	r3, #1
{
 8005e48:	4607      	mov	r7, r0
 8005e4a:	460e      	mov	r6, r1
 8005e4c:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8005e4e:	d035      	beq.n	8005ebc <HAL_FLASH_Program+0x80>
 8005e50:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e52:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8005e56:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e58:	f7ff ffc6 	bl	8005de8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8005e5c:	b9b0      	cbnz	r0, 8005e8c <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005e5e:	b9cf      	cbnz	r7, 8005e94 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005e60:	4b18      	ldr	r3, [pc, #96]	; (8005ec4 <HAL_FLASH_Program+0x88>)
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005e68:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005e6a:	691a      	ldr	r2, [r3, #16]
 8005e6c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005e6e:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005e70:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 8005e72:	f042 0201 	orr.w	r2, r2, #1
 8005e76:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8005e78:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e7a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e7e:	f7ff ffb3 	bl	8005de8 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8005e82:	4a10      	ldr	r2, [pc, #64]	; (8005ec4 <HAL_FLASH_Program+0x88>)
 8005e84:	6913      	ldr	r3, [r2, #16]
 8005e86:	f023 0301 	bic.w	r3, r3, #1
 8005e8a:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	762b      	strb	r3, [r5, #24]
}
 8005e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005e94:	2f01      	cmp	r7, #1
 8005e96:	d104      	bne.n	8005ea2 <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005e98:	b2a1      	uxth	r1, r4
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	f7ff fe70 	bl	8005b80 <FLASH_Program_HalfWord>
 8005ea0:	e7eb      	b.n	8005e7a <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005ea2:	2f02      	cmp	r7, #2
 8005ea4:	d104      	bne.n	8005eb0 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	f7ff fe57 	bl	8005b5c <FLASH_Program_Word>
 8005eae:	e7e4      	b.n	8005e7a <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8005eb0:	4622      	mov	r2, r4
 8005eb2:	4643      	mov	r3, r8
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f7ff fe3d 	bl	8005b34 <FLASH_Program_DoubleWord>
 8005eba:	e7de      	b.n	8005e7a <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8005ebc:	2002      	movs	r0, #2
 8005ebe:	e7e7      	b.n	8005e90 <HAL_FLASH_Program+0x54>
 8005ec0:	200009d4 	.word	0x200009d4
 8005ec4:	40023c00 	.word	0x40023c00

08005ec8 <HAL_FLASH_OB_Launch>:
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8005ec8:	4a04      	ldr	r2, [pc, #16]	; (8005edc <HAL_FLASH_OB_Launch+0x14>)
 8005eca:	7813      	ldrb	r3, [r2, #0]
 8005ecc:	f043 0302 	orr.w	r3, r3, #2
 8005ed0:	7013      	strb	r3, [r2, #0]
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 8005ed2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ed6:	f7ff bf87 	b.w	8005de8 <FLASH_WaitForLastOperation>
 8005eda:	bf00      	nop
 8005edc:	40023c14 	.word	0x40023c14

08005ee0 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 8005ee0:	b538      	push	{r3, r4, r5, lr}
 8005ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ee6:	fa92 f2a2 	rbit	r2, r2
  uint32_t tickstart = 0U;

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 8005eea:	4b0c      	ldr	r3, [pc, #48]	; (8005f1c <HAL_PWREx_EnableBkUpReg+0x3c>)

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8005eec:	4c0c      	ldr	r4, [pc, #48]	; (8005f20 <HAL_PWREx_EnableBkUpReg+0x40>)
  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 8005eee:	fab2 f282 	clz	r2, r2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8005efa:	f7fd fa1f 	bl	800333c <HAL_GetTick>
 8005efe:	4605      	mov	r5, r0
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8005f00:	6863      	ldr	r3, [r4, #4]
 8005f02:	071b      	lsls	r3, r3, #28
 8005f04:	d501      	bpl.n	8005f0a <HAL_PWREx_EnableBkUpReg+0x2a>
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    } 
  }
  return HAL_OK;
 8005f06:	2000      	movs	r0, #0
}
 8005f08:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8005f0a:	f7fd fa17 	bl	800333c <HAL_GetTick>
 8005f0e:	1b40      	subs	r0, r0, r5
 8005f10:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005f14:	d9f4      	bls.n	8005f00 <HAL_PWREx_EnableBkUpReg+0x20>
      return HAL_TIMEOUT;
 8005f16:	2003      	movs	r0, #3
 8005f18:	e7f6      	b.n	8005f08 <HAL_PWREx_EnableBkUpReg+0x28>
 8005f1a:	bf00      	nop
 8005f1c:	10838020 	.word	0x10838020
 8005f20:	40007000 	.word	0x40007000

08005f24 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f2a:	fa92 f2a2 	rbit	r2, r2
  uint32_t tickstart = 0U;

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
 8005f2e:	4b0c      	ldr	r3, [pc, #48]	; (8005f60 <HAL_PWREx_DisableBkUpReg+0x3c>)

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8005f30:	4c0c      	ldr	r4, [pc, #48]	; (8005f64 <HAL_PWREx_DisableBkUpReg+0x40>)
  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
 8005f32:	fab2 f282 	clz	r2, r2
 8005f36:	4413      	add	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8005f3e:	f7fd f9fd 	bl	800333c <HAL_GetTick>
 8005f42:	4605      	mov	r5, r0
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8005f44:	6860      	ldr	r0, [r4, #4]
 8005f46:	f010 0008 	ands.w	r0, r0, #8
 8005f4a:	d100      	bne.n	8005f4e <HAL_PWREx_DisableBkUpReg+0x2a>
    {
      return HAL_TIMEOUT;
    } 
  }
  return HAL_OK;
}
 8005f4c:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8005f4e:	f7fd f9f5 	bl	800333c <HAL_GetTick>
 8005f52:	1b40      	subs	r0, r0, r5
 8005f54:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005f58:	d9f4      	bls.n	8005f44 <HAL_PWREx_DisableBkUpReg+0x20>
      return HAL_TIMEOUT;
 8005f5a:	2003      	movs	r0, #3
 8005f5c:	e7f6      	b.n	8005f4c <HAL_PWREx_DisableBkUpReg+0x28>
 8005f5e:	bf00      	nop
 8005f60:	10838020 	.word	0x10838020
 8005f64:	40007000 	.word	0x40007000

08005f68 <HAL_PWREx_EnableFlashPowerDown>:
 8005f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f6c:	fa93 f3a3 	rbit	r3, r3
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 8005f70:	fab3 f383 	clz	r3, r3
 8005f74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005f78:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	2201      	movs	r2, #1
 8005f80:	601a      	str	r2, [r3, #0]
}
 8005f82:	4770      	bx	lr

08005f84 <HAL_PWREx_DisableFlashPowerDown>:
 8005f84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f88:	fa93 f3a3 	rbit	r3, r3
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 8005f8c:	fab3 f383 	clz	r3, r3
 8005f90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005f94:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]
}
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_PWREx_GetVoltageRange>:
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output Scale 2 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output Scale 3 mode
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR & PWR_CR_VOS);
 8005fa0:	4b02      	ldr	r3, [pc, #8]	; (8005fac <HAL_PWREx_GetVoltageRange+0xc>)
 8005fa2:	6818      	ldr	r0, [r3, #0]
}
 8005fa4:	f400 4040 	and.w	r0, r0, #49152	; 0xc000
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	40007000 	.word	0x40007000

08005fb0 <HAL_PWREx_ControlVoltageScaling>:
  * @note This API forces the PLL state ON to allow the possibility to configure the voltage scale 1 or 2.
  * @note The new voltage scale is active only when the PLL is ON.  
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005fb2:	4c28      	ldr	r4, [pc, #160]	; (8006054 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	9200      	str	r2, [sp, #0]
 8005fb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fbe:	6423      	str	r3, [r4, #64]	; 0x40
 8005fc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	9b00      	ldr	r3, [sp, #0]
  
  /* Check if the PLL is used as system clock or not */
  if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fca:	68a3      	ldr	r3, [r4, #8]
 8005fcc:	f003 030c 	and.w	r3, r3, #12
 8005fd0:	2b08      	cmp	r3, #8
{
 8005fd2:	4606      	mov	r6, r0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fd4:	d03b      	beq.n	800604e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    /* Disable the main PLL */
    __HAL_RCC_PLL_DISABLE();
 8005fd6:	4d20      	ldr	r5, [pc, #128]	; (8006058 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005fd8:	602a      	str	r2, [r5, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();    
 8005fda:	f7fd f9af 	bl	800333c <HAL_GetTick>
 8005fde:	4607      	mov	r7, r0
    /* Wait till PLL is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8005fe6:	d11d      	bne.n	8006024 <HAL_PWREx_ControlVoltageScaling+0x74>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set Range */
    __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
 8005fe8:	9301      	str	r3, [sp, #4]
 8005fea:	4b1c      	ldr	r3, [pc, #112]	; (800605c <HAL_PWREx_ControlVoltageScaling+0xac>)
    __HAL_RCC_PLL_ENABLE();
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    /* Wait till PLL is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fec:	4c19      	ldr	r4, [pc, #100]	; (8006054 <HAL_PWREx_ControlVoltageScaling+0xa4>)
    __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
 8005fee:	6818      	ldr	r0, [r3, #0]
 8005ff0:	f420 4040 	bic.w	r0, r0, #49152	; 0xc000
 8005ff4:	4330      	orrs	r0, r6
 8005ff6:	6018      	str	r0, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005ffe:	9301      	str	r3, [sp, #4]
 8006000:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_PLL_ENABLE();
 8006002:	2301      	movs	r3, #1
 8006004:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8006006:	f7fd f999 	bl	800333c <HAL_GetTick>
 800600a:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	019a      	lsls	r2, r3, #6
 8006010:	d510      	bpl.n	8006034 <HAL_PWREx_ControlVoltageScaling+0x84>
        return HAL_TIMEOUT;
      } 
    }
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006012:	f7fd f993 	bl	800333c <HAL_GetTick>
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 8006016:	4c11      	ldr	r4, [pc, #68]	; (800605c <HAL_PWREx_ControlVoltageScaling+0xac>)
    tickstart = HAL_GetTick();
 8006018:	4605      	mov	r5, r0
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 800601a:	6863      	ldr	r3, [r4, #4]
 800601c:	045b      	lsls	r3, r3, #17
 800601e:	d50f      	bpl.n	8006040 <HAL_PWREx_ControlVoltageScaling+0x90>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006020:	2000      	movs	r0, #0
 8006022:	e005      	b.n	8006030 <HAL_PWREx_ControlVoltageScaling+0x80>
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006024:	f7fd f98a 	bl	800333c <HAL_GetTick>
 8006028:	1bc0      	subs	r0, r0, r7
 800602a:	2802      	cmp	r0, #2
 800602c:	d9d8      	bls.n	8005fe0 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 800602e:	2003      	movs	r0, #3
}
 8006030:	b003      	add	sp, #12
 8006032:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006034:	f7fd f982 	bl	800333c <HAL_GetTick>
 8006038:	1b40      	subs	r0, r0, r5
 800603a:	2802      	cmp	r0, #2
 800603c:	d9e6      	bls.n	800600c <HAL_PWREx_ControlVoltageScaling+0x5c>
 800603e:	e7f6      	b.n	800602e <HAL_PWREx_ControlVoltageScaling+0x7e>
      if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
 8006040:	f7fd f97c 	bl	800333c <HAL_GetTick>
 8006044:	1b40      	subs	r0, r0, r5
 8006046:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800604a:	d9e6      	bls.n	800601a <HAL_PWREx_ControlVoltageScaling+0x6a>
 800604c:	e7ef      	b.n	800602e <HAL_PWREx_ControlVoltageScaling+0x7e>
    return HAL_ERROR;
 800604e:	2001      	movs	r0, #1
 8006050:	e7ee      	b.n	8006030 <HAL_PWREx_ControlVoltageScaling+0x80>
 8006052:	bf00      	nop
 8006054:	40023800 	.word	0x40023800
 8006058:	42470060 	.word	0x42470060
 800605c:	40007000 	.word	0x40007000

08006060 <HAL_PWREx_EnableMainRegulatorLowVoltage>:
 8006060:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006064:	fa93 f3a3 	rbit	r3, r3
  *        STM32F413xx/STM32F423xx devices.   
  * @retval None
  */
void HAL_PWREx_EnableMainRegulatorLowVoltage(void)
{
  *(__IO uint32_t *) CR_MRLVDS_BB = (uint32_t)ENABLE;
 8006068:	fab3 f383 	clz	r3, r3
 800606c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006070:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	2201      	movs	r2, #1
 8006078:	601a      	str	r2, [r3, #0]
}
 800607a:	4770      	bx	lr

0800607c <HAL_PWREx_DisableMainRegulatorLowVoltage>:
 800607c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006080:	fa93 f3a3 	rbit	r3, r3
  *        STM32F413xx/STM32F423xxdevices. 
  * @retval None
  */
void HAL_PWREx_DisableMainRegulatorLowVoltage(void)
{
  *(__IO uint32_t *) CR_MRLVDS_BB = (uint32_t)DISABLE;
 8006084:	fab3 f383 	clz	r3, r3
 8006088:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800608c:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]
}
 8006096:	4770      	bx	lr

08006098 <HAL_PWREx_EnableLowRegulatorLowVoltage>:
 8006098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800609c:	fa93 f3a3 	rbit	r3, r3
  *        STM32F413xx/STM32F423xx devices.   
  * @retval None
  */
void HAL_PWREx_EnableLowRegulatorLowVoltage(void)
{
  *(__IO uint32_t *) CR_LPLVDS_BB = (uint32_t)ENABLE;
 80060a0:	fab3 f383 	clz	r3, r3
 80060a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80060a8:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	2201      	movs	r2, #1
 80060b0:	601a      	str	r2, [r3, #0]
}
 80060b2:	4770      	bx	lr

080060b4 <HAL_PWREx_DisableLowRegulatorLowVoltage>:
 80060b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060b8:	fa93 f3a3 	rbit	r3, r3
  *        STM32F413xx/STM32F423xx  devices.   
  * @retval None
  */
void HAL_PWREx_DisableLowRegulatorLowVoltage(void)
{
  *(__IO uint32_t *) CR_LPLVDS_BB = (uint32_t)DISABLE;
 80060bc:	fab3 f383 	clz	r3, r3
 80060c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80060c4:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	2200      	movs	r2, #0
 80060cc:	601a      	str	r2, [r3, #0]
}
 80060ce:	4770      	bx	lr
